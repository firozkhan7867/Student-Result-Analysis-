import {
    LOGIN_SUCCESS,
    LOGIN_FAIL,
    USER_LOADED_SUCCESS,
    USER_LOADED_FAIL,
    AUTHENTICATED_SUCCESS,
    AUTHENTICATED_FAIL,
    LOGOUT,
    PASSWORD_RESET_FAIL,
    PASSWORD_RESET_SUCCESS,
    PASSWORD_RESET_CONFIRM_FAIL,
    PASSWORD_RESET_CONFIRM_SUCCESS,
    SIGNUP_SUCCESS,
    SIGNUP_FAIL,
    ACTIVATION_FAIL,
    ACTIVATION_SUCCESS,
    GET_UP_DATA_SUCCESS,
    GET_UP_DATA_FAIL,
    GET_BACK_DATA_FAIL,
    GET_BACK_DATA_SUCCESS,
    STUDENT_UP_DATA_SUCCESS,
    STUDENT_UP_DATA_FAIL,
} from "./types";
// import React, {useState} from "react";
import axios from "axios";

export const checkAuthenticated = () => async dispatch => {
    if (localStorage.getItem('access')){
        const config = {
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        };
        const body = JSON.stringify({token: localStorage.getItem('access')});

        try{
            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body,config);
            // console.log(res)
            if (res.data.code !== 'token_not_valid'){
                dispatch({
                    type: AUTHENTICATED_SUCCESS,
                })
            }else{
                dispatch({
                    type: AUTHENTICATED_FAIL,
                })
            }

        }catch(err){
            dispatch({
                type: AUTHENTICATED_FAIL,
            })
        }

    }else{
        dispatch({
            type: AUTHENTICATED_FAIL,
        })
    }
};


export const load_user = () => async dispatch => {
    if (localStorage.getItem('access')) {
        const config = {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `JWT ${localStorage.getItem('access')}`,
                'Accept': 'application/json'
            }
        }; 

        try {
            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);
    
            dispatch({
                type: USER_LOADED_SUCCESS,
                payload: res.data
            });
        } catch (err) {
            dispatch({
                type: USER_LOADED_FAIL
            });
        }
    } else {
        dispatch({
            type: USER_LOADED_FAIL
        });
    }
};

export const login = (email, password) => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };
    const body = JSON.stringify({ email, password });
    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);
        // console.log(res);
        dispatch({
            type: LOGIN_SUCCESS,
            payload: res.data
        });
        dispatch(load_user());
    } catch (err) {
        dispatch({
            type: LOGIN_FAIL
        })
    } 
};



export const signup = (name,first_name, last_name,email, password, re_password) => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    const body = JSON.stringify({ name,first_name, last_name,email, password, re_password });

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);
        // console.log(res);
        dispatch({
            type:     SIGNUP_SUCCESS,
            payload: res.data
        });

        dispatch(load_user());
    } catch (err) {
        dispatch({
            type: SIGNUP_FAIL
        })
    }
};


export const verify = (uid,token) => async dispatch =>{
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    const body = JSON.stringify({uid,token});

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);
        // console.log(res);
        dispatch({
            type: ACTIVATION_SUCCESS,
            payload: res.data
        });

        dispatch(load_user());
    } catch (err) {
        dispatch({
            type: ACTIVATION_FAIL
        })
    }
};

export const reset_password = (email) => async dispatch =>{
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    const body = JSON.stringify({email});

    try{
        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`,body,config);

        dispatch({
            type: PASSWORD_RESET_SUCCESS
        })

    }catch(err){
        dispatch({
            type: PASSWORD_RESET_FAIL
        })
    }
}


export const reset_password_confirm = (uid,token, new_password, re_new_password) => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    const body = JSON.stringify({uid, token, new_password, re_new_password});

    try {
        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`,body,config)
        
        dispatch({
            type: PASSWORD_RESET_CONFIRM_SUCCESS
        })
    
    }catch(err){
        dispatch({
            type: PASSWORD_RESET_CONFIRM_FAIL
        })
    }

}



export const logout = () => dispatch => {
    dispatch({
        type:  LOGOUT,
    });
}

// REACTJS GET SEM ANALYSIS API HANDLER

export const GetUploadData = () => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };
    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/updata`,config)
        dispatch({
            type: GET_UP_DATA_SUCCESS,
            payload: res.data,
        })
        
    }catch(err){
        dispatch({
            type: GET_UP_DATA_FAIL,
        })
    }

}

export const GetBackData = () => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };
    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/backupdata`,config)
        dispatch({
            type: GET_BACK_DATA_SUCCESS,
            payload: res.data,
        })
        
    }catch(err){
        dispatch({
            type: GET_BACK_DATA_FAIL,
        })
    }

}






export const semupload = (data) => async dispatch => {
    // const config = {
    //     headers: {
    //         'Content-Type': 'application/json'
    //     }
    // };

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/data`, data);
        
    } catch (err) {
        
    }
};


export const backupload = (data) => async dispatch => {
    // const config = {
    //     headers: {
    //         'Content-Type': 'application/json'
    //     }
    // };

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/backpost`, data);
        

    } catch (err) {
        
    }
};



export const studentup = (data) => async dispatch => {
    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/student`, data);  

    } catch (err) {
        
    }
};


export const LOGIN_SUCCESS = "LOGIN_SUCCESS";
export const LOGIN_FAIL = "LOGIN_FAIL";
export const SIGNUP_SUCCESS = "SIGNUP_SUCCESS";
export const SIGNUP_FAIL = "SIGNUP_FAIL";
export const ACTIVATION_SUCCESS = "ACTIVATION_SUCCESS";
export const ACTIVATION_FAIL = "ACTIVATION_FAIL";
export const USER_LOADED_SUCCESS = "USER_LOADED_SUCCESS";
export const USER_LOADED_FAIL = "USER_LOADED_FAIL";
export const AUTHENTICATED_SUCCESS = "AUTHENTICATED_SUCCESS";
export const AUTHENTICATED_FAIL = "AUTHENTICATED_FAIL";
export const PASSWORD_RESET_FAIL = "PASSWORD_RESET_FAIL";
export const PASSWORD_RESET_SUCCESS = "PASSWORD_RESET_SUCCESS";
export const PASSWORD_RESET_CONFIRM_FAIL = "PASSWORD_RESET_CONFIRM_FAIL";
export const PASSWORD_RESET_CONFIRM_SUCCESS = "PASSWORD_RESET_CONFIRM_SUCCESS";
export const LOGOUT = "LOGOUT";
export const GET_UP_DATA_SUCCESS = "GET_UP_DATA_SUCCESS";
export const GET_UP_DATA_FAIL = "GET_UP_DATA_FAIL";

export const GET_BACK_DATA_SUCCESS = "GET_BACK_DATA_SUCCESS";
export const GET_BACK_DATA_FAIL = "GET_BACK_DATA_FAIL";

export const FETCH_VIS_DATA_SUCCESS = "FETCH_VIS_DATA_SUCCESS";
export const FETCH_VIS_DATA_FAIL = "FETCH_VIS_DATA_FAIL";


export const FETCH_SUBJ_DATA_SUCCESS = "FETCH_SUBJ_DATA_SUCCESS";
export const FETCH_SUBJ_DATA_FAIL = "FETCH_SUBJ_DATA_FAIL";


export const FETCH_SUBJ_SECT_DATA_SUCCESS = "FETCH_SUBJ_SECT_DATA_SUCCESS";
export const FETCH_SUBJ_SECT_DATA_FAIL = "FETCH_SUBJ_SECT_DATA_FAIL";



export const FETCH_REGULATION_DATA_SUCCESS = "FETCH_REGULATION_DATA_SUCCESS";
export const FETCH_REGULATION_DATA_FAIL = "FETCH_REGULATION_DATA_FAIL";



export const POST_REGULATION_DATA_SUCCESS = "POST_REGULATION_DATA_SUCCESS";
export const POST_REGULATION_DATA_FAIL = "POST_REGULATION_DATA_FAIL";

export const CHECK_FETCH_DATA_SUCCESS = "CHECK_FETCH_DATA_SUCCESS";
export const CHECK_FETCH_DATA_FAIL = "CHECK_FETCH_DATA_FAIL";

export const CHECK_STUDENT_ROLL_SUCCESS = "CHECK_STUDENT_ROLL_SUCCESS";
export const CHECK_STUDENT_ROLL_FAIL = "CHECK_STUDENT_ROLL_FAIL";

export const GET_STUDENT_DETAILS_SUCCESS = "GET_STUDENT_DETAILS_SUCCESS";
export const GET_STUDENT_DETAILS_FAIL = "GET_STUDENT_DETAILS_FAIL";







export const GET_FETCH_DATA_1_SUCCESS = "GET_FETCH_DATA_1_SUCCESS";
export const GET_FETCH_DATA_1_FAIL = "GET_FETCH_DATA_1_FAIL";


export const GET_FETCH_DATA_2_SUCCESS = "GET_FETCH_DATA_2_SUCCESS";
export const GET_FETCH_DATA_2_FAIL = "GET_FETCH_DATA_2_FAIL";


export const GET_FETCH_DATA_3_SUCCESS = "GET_FETCH_DATA_3_SUCCESS";
export const GET_FETCH_DATA_3_FAIL = "GET_FETCH_DATA_3_FAIL";


export const POST_FILTER_DATA_SUCCESS = "POST_FILTER_DATA_SUCCESS";
export const POST_FILTER_DATA_FAIL = "POST_FILTER_DATA_FAIL";

export const POST_ADD_REG_SUCCESS = "POST_ADD_REG_SUCCESS";
export const POST_ADD_REG_FAIL = "POST_ADD_REG_FAIL";


export const POST_ADD_BRANCH_SUCCESS = "POST_ADD_BRANCH_SUCCESS";
export const POST_ADD_BRANCH_FAIL = "POST_ADD_BRANCH_FAIL";


export const POST_ADD_BATCH_SUCCESS = "POST_ADD_BATCH_SUCCESS";
export const POST_ADD_BATCH_FAIL = "POST_ADD_BATCH_FAIL";


export const GET_SEM_WISE_BACKLOG_ANALYSIS_SUCCESS = "GET_SEM_WISE_BACKLOG_ANALYSIS_SUCCESS";
export const GET_SEM_WISE_BACKLOG_ANALYSIS_FAIL = "GET_SEM_WISE_BACKLOG_ANALYSIS_FAIL";


export const GET_ALL_ADMIN_DATA_SUCCESS= "GET_ALL_ADMIN_DATA_SUCCESS";
export const GET_ALL_ADMIN_DATA_FAIL = "GET_ALL_ADMIN_DATA_FAIL";


export const POST_DELETE_BRANCH_SUCCESS= "POST_DELETE_BRANCH_SUCCESS";
export const POST_DELETE_BRANCH_FAIL = "POST_DELETE_BRANCH_FAIL";

export const POST_EDIT_BRANCH_SUCCESS= "POST_EDIT_BRANCH_SUCCESS";
export const POST_EDIT_BRANCH_FAIL = "POST_EDIT_BRANCH_FAIL";


export const POST_DELETE_REG_SUCCESS= "POST_DELETE_REG_SUCCESS";
export const POST_DELETE_REG_FAIL = "POST_DELETE_REG_FAIL";


export const POST_EDIT_REG_SUCCESS= "POST_EDIT_REG_SUCCESS";
export const POST_EDIT_REG_FAIL = "POST_EDIT_REG_FAIL";


export const POST_DELETE_BATCH_SUCCESS= "POST_DELETE_BATCH_SUCCESS";
export const POST_DELETE_BATCH_FAIL = "POST_DELETE_BATCH_FAIL";

export const POST_EDIT_BATCH_SUCCESS= "POST_EDIT_BATCH_SUCCESS";
export const POST_EDIT_BATCH_FAIL = "POST_EDIT_BATCH_FAIL";


export const POST_VIEW_SEMESTER_SUCCESS= "POST_VIEW_SEMESTER_SUCCESS";
export const POST_VIEW_SEMESTER_FAIL = "POST_VIEW_SEMESTER_FAIL";


//SemWiseBacklogAnalysis
export const SAVEID = "SAVEID";

import {
    FETCH_VIS_DATA_SUCCESS,
    FETCH_VIS_DATA_FAIL,
    FETCH_SUBJ_DATA_SUCCESS,
    FETCH_SUBJ_DATA_FAIL,
    FETCH_SUBJ_SECT_DATA_FAIL,
    FETCH_SUBJ_SECT_DATA_SUCCESS,
    FETCH_REGULATION_DATA_SUCCESS,
    FETCH_REGULATION_DATA_FAIL,
    GET_SEM_WISE_BACKLOG_ANALYSIS_SUCCESS,
    GET_SEM_WISE_BACKLOG_ANALYSIS_FAIL,
    CHECK_FETCH_DATA_SUCCESS,
    CHECK_FETCH_DATA_FAIL,
    CHECK_STUDENT_ROLL_SUCCESS,
    CHECK_STUDENT_ROLL_FAIL,
    GET_STUDENT_DETAILS_SUCCESS,
    GET_STUDENT_DETAILS_FAIL,
    SAVEID,
    GET_FETCH_DATA_1_SUCCESS,
    GET_FETCH_DATA_1_FAIL,
    GET_FETCH_DATA_2_SUCCESS,
    GET_FETCH_DATA_2_FAIL,
    GET_FETCH_DATA_3_FAIL,
    GET_FETCH_DATA_3_SUCCESS,
    POST_FILTER_DATA_FAIL,
    POST_FILTER_DATA_SUCCESS,
    POST_ADD_REG_SUCCESS,
    POST_ADD_REG_FAIL,
    POST_ADD_BRANCH_FAIL,
    POST_ADD_BRANCH_SUCCESS,
    POST_ADD_BATCH_FAIL,
    POST_ADD_BATCH_SUCCESS,
    GET_ALL_ADMIN_DATA_FAIL,
    GET_ALL_ADMIN_DATA_SUCCESS,
    POST_DELETE_BRANCH_FAIL,
    POST_DELETE_BRANCH_SUCCESS,
    POST_EDIT_BRANCH_FAIL,
    POST_EDIT_BRANCH_SUCCESS,
    POST_EDIT_REG_SUCCESS,
    POST_EDIT_REG_FAIL,
    POST_DELETE_REG_SUCCESS,
    POST_DELETE_REG_FAIL,
    POST_DELETE_BATCH_SUCCESS,
    POST_DELETE_BATCH_FAIL,
    POST_EDIT_BATCH_SUCCESS,
    POST_EDIT_BATCH_FAIL,
    POST_VIEW_SEMESTER_SUCCESS,
    POST_VIEW_SEMESTER_FAIL,
} from "./types";
import axios from "axios";

export const fetchSemData = (id) => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };
    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/subj/${id}`,config)
        dispatch({
            type: FETCH_VIS_DATA_SUCCESS,
            payload: res.data,
        })
        
    }catch(err){
        dispatch({
            type: FETCH_VIS_DATA_FAIL,
        })
    }

}

export const fetchSubjData = (id) => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };
    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/student/${id}`,config)
        dispatch({
            type: FETCH_SUBJ_DATA_SUCCESS,
            payload: res.data,
        })
        
    }catch(err){
        dispatch({
            type: FETCH_SUBJ_DATA_FAIL,
        })
    }

}


export const fetchSubjSectAnalysys = (id) => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/get_subj_section_data/${id}`,config)
        //console.log(res.data);
        dispatch({
            type: FETCH_SUBJ_SECT_DATA_SUCCESS,
            payload: res.data,
        })

        dispatch({
            type: SAVEID,
            payload: id,
        })
        
    }catch(err){
        dispatch({
            type: FETCH_SUBJ_SECT_DATA_FAIL,
        })
    }
}


export const fetchRegulationData = () => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    // console.log("inside vis");
    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/get_fetch_data`,config)
        // console.log(res.data);
        dispatch({
            type: FETCH_REGULATION_DATA_SUCCESS,
            payload: res.data,
        })
        
    }catch(err){
        dispatch({
            type: FETCH_REGULATION_DATA_FAIL,
        })
    }
}



export const postRegulationData = (branch,batch,sem) => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    const batchs = parseInt(batch);
    const sems = parseInt(sem);
    // console.log("inside");

    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/check_sem_data_exists/${batchs}/${sems}/${branch}`,config)
        // console.log(res.data);
        dispatch({
            type: CHECK_FETCH_DATA_SUCCESS,
            payload: res.data,
        })

        return res;
        
    }catch(err){

        dispatch({
            type: CHECK_FETCH_DATA_FAIL,
        })
        
    }

    return {"code":"warning","msg":"something went wrong and could not fetch...."}
    
}





export const postFetchData = (branch,batch,sem) => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    const batchs = parseInt(batch);
    const sems = parseInt(sem);
    // console.log("inside");

    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/fetch_semester_result/${batchs}/${sems}/${branch}`,config)
        // console.log(res.data);
        console.log(res);
        

    }catch(err){

        console.log(err);
        
    }

}






// export const checkStudentDetails = (roll) => async dispatch => {
//     const config = {
//         headers: {
//             'Content-Type': 'application/json'
//         }
//     };

//     try {
//         const res = await axios.get(`${process.env.REACT_APP_API_URL}/check_student_exists/${roll}`,config)
//         // console.log(res.data);
//         dispatch({
//             type: CHECK_STUDENT_ROLL_SUCCESS,
//             payload: res.data,
//         })
//         return res;
        
//     }catch(err){  
//         dispatch({
//             type: CHECK_STUDENT_ROLL_FAIL,
//         })      
//     }

//     return {"code":"warning","msg":"something went wrong and could not Render Data...."}
    
// }

export const checkStudentDetails = (roll) => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/check_student_exists/${roll}`,config)
        // console.log(res.data);
        dispatch({
            type: CHECK_STUDENT_ROLL_SUCCESS,
            payload: res.data,
        })

        return res;
    }catch(err){

        dispatch({
            type: CHECK_STUDENT_ROLL_FAIL,
        })
        
    }

    return {"code":"warning","msg":"something went wrong and could not fetch...."}
    
}


export const getStudentDetails = (roll) => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/get_individual_sem_analysis/${roll}`,config)
        // console.log(res.data);
        dispatch({
            type: GET_STUDENT_DETAILS_SUCCESS,
            payload: res.data,
        })

        return res.data;
    }catch(err){

        dispatch({
            type: GET_STUDENT_DETAILS_FAIL,
        })
        
    }

   // return {"code":"warning","msg":"something went wrong and could not fetch...."}
    
}












// ----------------------------- this is list of function for API for FILTER PAGE -------------------------------- 









// this function will fetch only branch and regulation from server

export const fetchdata1 = () => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    console.log("inside vis");
    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/fetchdata1`,config)
        // console.log(res.data);
        dispatch({
            type: GET_FETCH_DATA_1_SUCCESS,
            payload: res.data,
        })
        
    }catch(err){
        dispatch({
            type: GET_FETCH_DATA_1_FAIL,
        })
    }
}



//  pass the data for branch and reg to fetch data of particular batch from that regulation

export const fetchdatafun2 = (reg) => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    const regVal =  parseInt(reg);

    // console.log("inside vis");
    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/fetchdata2/${regVal}`,config)
        // console.log(res.data);
        dispatch({
            type: GET_FETCH_DATA_2_SUCCESS,
            payload: res.data,
        })
        
    }catch(err){
        dispatch({
            type: GET_FETCH_DATA_2_FAIL,
        })
    }
}



//Api for Sem Wise Back log Data for individual student (Fetch Student Details Page)
export const semWiseBacklogData = (roll) => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    // const rollVal =  parseInt(roll);
    console.log(roll)

    // console.log("inside vis");
    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/semWiseBacklogData/${roll}`,config)
        // console.log(res.data);
        dispatch({
            type: GET_SEM_WISE_BACKLOG_ANALYSIS_SUCCESS,
            payload: res.data,
        })
        
    }catch(err){
        dispatch({
            type: GET_SEM_WISE_BACKLOG_ANALYSIS_FAIL,
        })
    }
}



// pass the data for reg and fetch the section and sems data


export const fetchdatafun3 = (branch,reg,batch) => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    const regVal =  parseInt(reg);

    const branchVal =  parseInt(branch);

    const batchVal =  parseInt(batch);

    // console.log("inside vis");
    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/fetchdata3/${regVal}/${branchVal}/${batchVal}`,config)
        // console.log(res.data);
        dispatch({
            type: GET_FETCH_DATA_3_SUCCESS,
            payload: res.data,
        })
        
    }catch(err){
        dispatch({
            type: GET_FETCH_DATA_3_FAIL,
        })
    }
}





export const postFilterData = (data) => async dispatch => {
    // const config = {
    //     headers: {
    //         'Content-Type': 'application/json'
    //     }
    // };

    // const body = JSON.stringify({ branch,reg,batch,sems,cgpa,backlog,sect });

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/filter`, data);
        // console.log(res);
        dispatch({
            type:  POST_FILTER_DATA_SUCCESS,
            payload: res.data
        });

    } catch (err) {
        dispatch({
            type: POST_FILTER_DATA_FAIL
        })
    }
};



// ADD DATA API - post api for adding new regulation

export const postAddReg = (data) => async dispatch => {

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/addreg`, data);
        // console.log(res);
        dispatch({
            type:  POST_ADD_REG_SUCCESS,
            payload: res.data
        });

    } catch (err) {
        dispatch({
            type: POST_ADD_REG_FAIL
        })
    }
};
//ADD batch API - post api for adding new batch
export const postAddBatch = (data) => async dispatch => {

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/addbatch`, data);
        // console.log(res);
        dispatch({
            type:  POST_ADD_BATCH_SUCCESS,
            payload: res.data
        });

    } catch (err) {
        dispatch({
            type: POST_ADD_BATCH_FAIL
        })
    }
};

// ADD DATA API - post api for adding new Branch

export const postAddBranch = (data) => async dispatch => {

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/addbranch`, data);
        // console.log(res);
        dispatch({
            type:  POST_ADD_BRANCH_SUCCESS,
            payload: res.data
        });

    } catch (err) {
        dispatch({
            type: POST_ADD_BRANCH_FAIL
        })
    }
};




// This API will Fetch all the data related to Admin Page, Branches, Regulation, Batches


export const getAllAdminData = () => async dispatch => {
    const config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };

    // console.log("inside vis");
    try {
        const res = await axios.get(`${process.env.REACT_APP_API_URL}/getAllAdminData`,config)
        // console.log(res.data);
        dispatch({
            type: GET_ALL_ADMIN_DATA_SUCCESS,
            payload: res.data,
        })
        
    }catch(err){
        dispatch({
            type: GET_ALL_ADMIN_DATA_FAIL,
        })
    }
}




export const editBranch = (id) => async dispatch => {

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/editBranch`, id);
        // console.log(res);
        dispatch({
            type:  POST_EDIT_BRANCH_SUCCESS,
            payload: res.data
        });

    } catch (err) {
        dispatch({
            type: POST_EDIT_BRANCH_FAIL
        })
    }
};

export const editRegulation = (id) => async dispatch => {

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/editRegulation`, id);
        // console.log(res);
        dispatch({
            type:  POST_EDIT_REG_SUCCESS,
            payload: res.data
        });

    } catch (err) {
        dispatch({
            type: POST_EDIT_REG_FAIL
        })
    }
};



export const editBatch = (id) => async dispatch => {

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/editBatch`, id);
        // console.log(res);
        dispatch({
            type:  POST_EDIT_BATCH_SUCCESS,
            payload: res.data
        });

    } catch (err) {
        dispatch({
            type: POST_EDIT_BATCH_FAIL
        })
    }
};




export const deleteBranch = (id) => async dispatch => {

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/dltBranch`, id);
        // console.log(res);
        dispatch({
            type:  POST_DELETE_BRANCH_SUCCESS,
            payload: res.data
        });

    } catch (err) {
        dispatch({
            type: POST_DELETE_BRANCH_FAIL
        })
    }
};


export const deleteRegulation = (id) => async dispatch => {

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/dltRegulation`, id);
        // console.log(res);
        dispatch({
            type:  POST_DELETE_REG_SUCCESS,
            payload: res.data
        });

    } catch (err) {
        dispatch({
            type: POST_DELETE_REG_FAIL
        })
    }
};



export const deleteBatch = (id) => async dispatch => {

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/dltBatch`, id);
        // console.log(res);
        dispatch({
            type:  POST_DELETE_BATCH_SUCCESS,
            payload: res.data
        });

    } catch (err) {
        dispatch({
            type: POST_DELETE_BATCH_FAIL
        })
    }
};






export const viewSemDetails = (id) => async dispatch => {

    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}/viewSemDetails`, id);
        // console.log(res);
        dispatch({
            type:  POST_VIEW_SEMESTER_SUCCESS,
            payload: res.data
        });

    } catch (err) {
        dispatch({
            type: POST_VIEW_SEMESTER_FAIL
        })
    }
};

import React from 'react';

const  Alert = ({type,msg,onclick,bb}) => {
  return (
        <div className={`alert alert-${bb} alert-dismissible fade show d-flex justify-content-between`} role="alert">
            <div className="" >
                <strong>{type} ...!!</strong> {msg}
            </div>
            <button type="button" onClick={() => {onclick('')}} className="rounded p-2 bg-danger text-white close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
  )
}

export default Alert;


import React from 'react'
// import "./widgetlg.css"
//import Button from 'react-bootstrap/Button';
import { useState } from "react";
import { connect } from 'react-redux';

import { CCard, CCardBody, CCardHeader} from '@coreui/react';
import "./Backlog.css";


const  Backlog = () => {
    return (
        <CCard>
        <h5 >
        <p>Backlog Analysis</p>
            
        </h5>
            <table className="table table-hover">
                <thead>
                    <tr>
                    <th scope="col">S.No</th>
                    <th scope="col">Backlog Subject</th>
                    <th scope="col">Backlog status</th>
                    <th scope="col">Number of attempts</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>m1</td>
                        <td>cleared</td>
                        <td>2</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>m2</td>
                        <td>cleared</td>
                        <td>1</td>
                    </tr>
                    <tr>
                        <td>1</td>
                        <td>m1</td>
                        <td>cleared</td>
                        <td>2</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>m2</td>
                        <td>cleared</td>
                        <td>1</td>
                    </tr>
                    <tr>
                        <td>1</td>
                        <td>m1</td>
                        <td>cleared</td>
                        <td>2</td>
                    </tr>
                </tbody>
            </table>
            <div className="d-flex justify-content-between">
                
            </div>
</CCard>

    )
}


export default Backlog;



import React, { Component } from 'react'
import { CCard, CCardBody,   CCardHeader } from '@coreui/react'
import { CChartBar } from '@coreui/react-chartjs'
import "./featuredinfo.css"

class Bargraph extends Component {

    arr_key= () =>{
      // console.log( typeof(this.props.back_data));
      if (this.props.back_data){
        const data = new Map(Object.entries(this.props.back_data));
        return Array.from( data.keys() );
      }
      else{
        return [1,1,1,1,1];
      }
    }

    arry_val = () => {
      if (this.props.back_data){
      const data = new Map(Object.entries(this.props.back_data));
      return Array.from( data.values() );
    }
      
    else{
      return [0,0,0,0,0];
    }
    }


    // https://stackoverflow.com/questions/68911251/coreui-chart-type-bar-clickable-bars-to-link-to-another-page
    render() {
        return (
        <CCard className="h">
          <CCardBody className='body'>
            <CChartBar className='graph'
              data={{
                responsive: true,
                labels: this.arr_key(),
                datasets: [
                  {
                    // data: this.arry_val(),
                    backgroundColor: [
                      '#FF6384',
                      '#36A2EB',
                      '#FFCE56',
                      '#41B883',
                      '#E46651',
                      '#00D8FF',
                    ],
                    hoverBackgroundColor: [
                      '#FF6384',
                      '#36A2EB',
                      '#FFCE56',
                      '#41B883',
                      '#E46651',
                      '#00D8FF',
                    ],
                    data: this.arry_val(),
                    label: 'Backlog Counts',
                  },
                ],
              }}
            />
          </CCardBody>
        </CCard>
        )
    }
}


export default Bargraph;
import React from 'react'
import "./chart.css";
import { LineChart, Line, XAxis, CartesianGrid, Tooltip,  ResponsiveContainer } from 'recharts';


export default function Chart({title,data,datakey,grid}) {

    return (
        <div className='chart' >
            <h3 className="chartTitle">
                Semester Analytics
                {/* {title} */}
            </h3>
            <ResponsiveContainer width="100%" aspect={4/1} >
                <LineChart data={data} >
                    <XAxis dataKey="name"  stroke='#5550bd' />
                    <Line type="monotone" dataKey={datakey} stroke='#5550bd' />
                    <Tooltip />
                    {grid && <CartesianGrid stroke='#e0dfdf' />}
                </LineChart>
            </ResponsiveContainer>
        </div>
    )
}


import React, {Component} from 'react';
import PieChart from "./PieChart";
import Bargraph from "./Bargraph"
import "./featuredinfo.css"
import Table from './Table';
// import WidgetLg from '../TopperData/ToppersData';
// import SecWisePerfamanceChart from '../SecWisePerfamanceChart/SecWisePerfamanceChart';
import PieChartSecWiseFail from './PieChartSecWiseFail';
import ToppersData from '../TopperData/ToppersData';
import ErrorBoundary from '../../pages/error/ErrorBoundary';
const Combo = (props) => {
    
    return (
        <div className="">
            <div className="featured">
                {/* <ErrorBoundary>
                    <PieChartSecWiseFail/>
                </ErrorBoundary> */}
                <div className="featuredItem">
                    <h5 className='d-flex justify-content-center'>Section Wise analysis of failure data</h5>
                    <br/>
                    <div className="mx-4">
                        <ErrorBoundary>
                            <PieChartSecWiseFail/>
                        </ErrorBoundary>
                    </div>
                </div>
                <div className="featuredItem ">
                    <h5>BackLog Details and Count</h5>
                    <br />
                    {/* <br /><br /><br /><br /><br /> */}
                    <ErrorBoundary>
                        <Bargraph back_data={props.back_data} />
                    </ErrorBoundary>
                    {/* <Bargraph  /> */}
                </div>
                
            </div>
            <div className='featured'>
                <div className="featuredItem ">
                    <h5>Grade Analysis</h5>
                    <br />
                    <ErrorBoundary>
                        <PieChart cgpa_data={props.cgpa_data}/>
                    </ErrorBoundary>
                    
                </div>
                <div className="featuredItem">
                    <h5 className='d-flex justify-content-center'>Topper's Data of each Section</h5>
                    <hr />
                        <br />

                    <div className="mx-4">
                        <ErrorBoundary>
                            <ToppersData/>
                        </ErrorBoundary>
                    </div>
                </div>
                
            </div>
            {/* <div className='featured'>
                <div className="featuredItem ">
                    <h2>Grade Analysis</h2>
                    <br />
                    <PieChart cgpa_data={props.cgpa_data} />
                </div>
                <div className="featuredItem ">
                    <h2>Grade Analysis</h2>
                    <br />
                    <PieChart cgpa_data={props.cgpa_data} />
                </div>
                <div className="featuredItem ">
                    <h2>Grade Analysis</h2>
                    <br />
                    <PieChart cgpa_data={props.cgpa_data} />
                </div>
            </div>
            <div className='featured'>
                <div className="featuredItem ">
                    <h2>Grade Analysis</h2>
                    <br />
                    <PieChart cgpa_data={props.cgpa_data} />
                </div>
                <div className="featuredItem ">
                    <h2>Grade Analysis</h2>
                    <br />
                    <PieChart cgpa_data={props.cgpa_data} />
                </div>
                <div className="featuredItem ">
                    <h2>Grade Analysis</h2>
                    <br />
                    <PieChart cgpa_data={props.cgpa_data} />
                </div>
            </div> */}
            

            

            <div className="featured">
                <div className="featuredItem">
                    <h5 className='d-flex justify-content-center'>Section Wise Subject Analysis</h5>
                    <hr />
                        <br />
                    <Table />
                </div>
            </div>

            {/* <div className="featured">
                <div className="featuredItem">
                    <h1 className='d-flex justify-content-center'>Section Wise Subject Analysis</h1>
                    <hr />
                        <br />
                        <SecWisePerfamanceChart/>
                </div>
            </div> */}

        </div>
    )
}


export default Combo;

import React from 'react';
// import ReactDOM from 'react-dom';
import ReactApexChart from 'react-apexcharts';

import { CCard, CCardBody, CCardHeader} from '@coreui/react';


class Grade_all_sem extends React.Component {
    constructor(props) {
      super(props);

      this.state = {
      
        series: [25, 15, 44, 55, 41, 17],
        options: {
          chart: {
            width: '100%',
            type: 'pie',
            height:20,
          },
          labels: ["O","A","B","C","D","F"],
          theme: {
            monochrome: {
              enabled: true
            }
          },
          plotOptions: {
            pie: {
              dataLabels: {
                offset: -5
              }
            }
          },
          title: {
            text: "Grade analysis over all semesters",
            align: 'center'
          },
          dataLabels: {
            formatter(val, opts) {
              const name = opts.w.globals.labels[opts.seriesIndex]
              return [name, val.toFixed(1) + '%']
            }
          },
          legend: {
            show: false
          }
        },
      
      
      };
    }

  

    render() {
      return (
        

        <CCard>
        <CCardBody>
      <div id="chart">
<ReactApexChart options={this.state.options} series={this.state.series} type="pie" height={350} />
</div>
</CCardBody>
</CCard>



      );
    }
  }

export default Grade_all_sem;

import React, { useEffect, useState, useRef } from 'react';
import { CCard, CCardBody, CCardHeader } from '@coreui/react';
import { CChartPie } from '@coreui/react-chartjs';
import "./featuredinfo.css";
import { Modal, Button } from "react-bootstrap";

const Charts = (props) => {

  const [list, setlist] = useState(false);
  const [data,setdata] = useState({
    bool: false,
    data:[],
    grade: "O",
  })

  const arr_key = () => {
    if (props.cgpa_data) {
      const data = new Map(Object.entries(props.cgpa_data.cgpa));
      return Array.from(data.keys());
    }
    else {
      return [0, 0, 0, 0, 0];
    }
  }



  const arry_val = () => {
    if (props.cgpa_data) {
      const data = new Map(Object.entries(props.cgpa_data.cgpa));
      return Array.from(data.values());
    }

    else {
      return [0, 0, 0, 0, 0];
    }
  }
  

  return (
    <>
    
      <Modal
        show={list}
        onHide={() => setlist(false)}
        dialogClassName="model"
        aria-labelledby="example-custom-modal-styling-title"
      >
        <Modal.Header closeButton>
          <Modal.Title id="example-custom-modal-styling-title">
              Student Details with Grade  - {data.grade} :
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
        <div class="mb-3 mx-4">
                <div className="">
                  <table className="table table-hover" style={{ width: "98%" }}>
                    <thead>
                      <tr>
                        <th scope="col">#</th>
                        <th scope="col">Roll</th>
                        <th scope="col">Student Name</th>
                        <th scope="col">Grade</th>
                        <th scope="col">Result</th>
                      </tr>
                    </thead>
                    <tbody>
                      {data.bool ? 
                        data.data.map((value, index2) => {
                          return (
                            <tr>
                              <th scope="row">{index2 + 1}</th>
                              <td>{value.roll}</td>
                              <td>{value.name}</td>
                              <td>{value.grade}</td>
                              <td>{value.result ?
                                <button type='button' className='btn btn-success mx-2' >PASS</button>
                                :
                                <button type='button' className='btn btn-danger mx-2' >FAIL</button>
                              }
                              </td>
                            </tr>
                          )
                        }):""}
                        <tr></tr>
                    </tbody>
                  </table>
                </div>
              </div>
        </Modal.Body>
      </Modal>
      <CCard className="mb-1">
        <CCardHeader>Pie Chart</CCardHeader>
        <CCardBody>
          <CChartPie
            data={{

              labels: arr_key(),

              datasets: [
                {

                  data: arry_val(),
                  backgroundColor: [
                    '#FF6384',
                    '#36A2EB',
                    '#FFCE56',
                    '#41B883',
                    '#E46651',
                    '#00D8FF',
                  ],
                  hoverBackgroundColor: [
                    '#FF6384',
                    '#36A2EB',
                    '#FFCE56',
                    '#41B883',
                    '#E46651',
                    '#00D8FF',
                  ],
                },
              ],
            }}
            // options={
            //   {
            //     events: {
            //       dataPointSelection: function(event, chartContext, config) {
            //         // console.log(event);
            //         // console.log(chartContext);
            //         console.log(config.dataPointIndex);
            //         // The last parameter config contains additional information like `seriesIndex` and `dataPointIndex` for cartesian charts
            //       }
            //       },
            //   }}
            options={
              {
                onClick: (evt, activeEls) => {
                  // console.log(activeEls[0].index);
                  const data = new Map(Object.entries(props.cgpa_data.cgpa));
                  const keys = Array.from(data.keys());

                  // console.log(keys[activeEls[0].index]);
                  // console.log(props.cgpa_data.list[keys[activeEls[0].index]]);
                  setlist(true);
                  setdata({
                    bool:true,
                    data:props.cgpa_data.list[keys[activeEls[0].index]],
                    grade:keys[activeEls[0].index],
                  })
                },
              }}
          />
        </CCardBody>
      </CCard>
    </>
  )
}

export default Charts;
import React from 'react';
// import ReactDOM from 'react-dom';
import ReactApexChart from 'react-apexcharts';
import { CCard, CCardBody, CCardHeader } from '@coreui/react';
import { connect } from "react-redux";

const PieChartSecWiseFail =(props) => {
	
		const data = props.failPercentageSection;
		// console.log(data);

		const state = {
			series: data,
			options: {
				chart: {
					width: 420,
					type: 'donut',
					events: {
						dataPointSelection: function(event, chartContext, config) {
							// console.log(event);
							// console.log(chartContext);
							console.log(config.dataPointIndex);
						  // The last parameter config contains additional information like `seriesIndex` and `dataPointIndex` for cartesian charts
						}
					  },
				},
				// onClick: (evt, activeEls) => {
				// 	console.log(activeEls[0]._model.label);
				// 	console.log("hi");
				// 	console.log(activeEls);
				// 	console.log(activeEls[0]._model.label.split(" ")[0]);
				// },
				
				plotOptions: {
					pie: {
						startAngle: -90,
						endAngle: 270
					}
				},
				dataLabels: {
					enabled: false
				},
				fill: {
					type: 'gradient',
				},
				legend: {
					formatter: function (val, opts) {
						return 'section ' + (opts.seriesIndex + 1) + " - " + opts.w.globals.series[opts.seriesIndex]
					}
				},
				title: {
					text: ''
				},
				responsive: [{
					breakpoint: 480,
					options: {
						chart: {
							width: 200
						},
						legend: {
							position: 'bottom'
						}
					}
				}]
			},


		};




		// console.log(this.props.failPercentageSection);
		return (
			<CCard>
				<CCardBody>
					<div id="chart">
						<ReactApexChart options={state.options} series={props.failPercentageSection} type="donut" width={460} height={300} />
					</div>
				</CCardBody>
			</CCard>

		);
	}



function mapStateToProps(state) {
	const failPercentageSection = state.auth.failPercentageSection;
	return {
		failPercentageSection
	};
}

export default connect(mapStateToProps)(PieChartSecWiseFail)


import React from 'react';
// import ReactDOM from 'react-dom';
import ReactApexChart from 'react-apexcharts';
import { CCard, CCardBody, CCardHeader } from '@coreui/react';
import { connect } from 'react-redux';

class SemWiseBacklogAnalysis extends React.Component {
	constructor(props) {
		super(props);

		console.log(this.props.semWiseBacklogData);

		this.state = {

			series: [{
				name: 'Total backlogs in each sem',
				data: this.props.semWiseBacklogData.allBacklogs,
			}, {
				name: 'Number of backlogs cleared',
				data: this.props.semWiseBacklogData.clearedBacklogs,
			},],
			options: {
				chart: {
					type: 'bar',
					height: 20
				},
				plotOptions: {
					bar: {
						horizontal: false,
						columnWidth: '55%',
						endingShape: 'rounded'
					},
				},
				title: {
					text: 'Sem wise Backlog analysis',
					align: 'center'
				},
				dataLabels: {
					enabled: false
				},
				stroke: {
					show: true,
					width: 2,
					colors: ['transparent']
				},
				xaxis: {
					categories: ['Sem1', 'Sem2', 'Sem3', 'Sem4', 'Sem5', 'Sem6', 'Sem7', 'Sem8'],
				},
				yaxis: {
					title: {
						text: 'Total number of subjects in each sem'
					}
				},
				fill: {
					opacity: 1
				},
				tooltip: {
					y: {
						formatter: function (val) {
							return val
						}
					}
				}
			},


		};
	}
	render() {
		return (
			<CCard>
				<CCardBody>
					<div id="chart">
						<ReactApexChart options={this.state.options} series={[{
				name: 'Total backlogs in each sem',
				data: this.props.semWiseBacklogData.allBacklogs,
			}, {
				name: 'Number of backlogs cleared',
				data: this.props.semWiseBacklogData.clearedBacklogs,
			},]} type="bar" height={350} />
					</div>
				</CCardBody>
			</CCard>
		);
	}
}

const mapStateToProps = state => ({
    semWiseBacklogData: state.auth.semWiseBacklogData,
});

export default connect(mapStateToProps,null)(SemWiseBacklogAnalysis);





import React, { useState } from 'react';
// import ReactDOM from 'react-dom';
import { CCard, CCardBody, CCardHeader } from '@coreui/react';
import ReactApexChart from 'react-apexcharts';
import { connect } from "react-redux";
import {getStudentDetails} from "../../actions/visua";


const SemWisePerformanceAnalysis = ({getStudentDetails,studentdetails}) => {

	const options = {
		chart: {
			height: 350,
			type: 'line',
			zoom: {
				enabled: true,
				autoScaleYaxis: true, 
			}
		},
		marker:{
			size: 5,
			strokeWidth: 2,
			shape:"circle",

		},
		dataLabels: {
			enabled: true
		},
		stroke: {
			curve: 'smooth',
			lineCap: 'butt',

		},
		title: {
			text: 'Semester wise performance analysis',
			align: 'center'
		},
		grid: {
			row: {
				colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns
				opacity: 0.5
			},
		},
		xaxis: {
			categories: ['Sem1', 'Sem2', 'Sem3', 'Sem4', 'Sem5', 'Sem6', 'Sem7', 'Sem8'],
			tickPlacement: 'on'
		},
		yaxis: {
			title: {
				text: 'CGPA for each sem'
			},
			min:5.8,
			max:10
		}
	}

	const series =  [{name: "CGPA ", data: studentdetails.cgpas}];

	return (
		<CCard>
			<CCardBody>
				<div id="chart">
					<ReactApexChart options={options} series={series} type="line" height={350} />
				</div>
			</CCardBody>
		</CCard>
	);
}




const mapStateToProps = state => ({
    studentdetails: state.auth.studentdetails
});

export default connect(mapStateToProps,{getStudentDetails})(SemWisePerformanceAnalysis);

import React,{useState, useEffect} from 'react';
import { connect } from 'react-redux';

const Table = ({subjVisData}) => {
    const [sect, setSect] = useState([]);
    
    const [data, setSubj] = useState([]);
    
    
    useEffect(() => {
        getsubjs()
    }, [subjVisData]);
    const getsubjs = () =>{
        if (subjVisData){
            if(subjVisData.sect){
                setSect(subjVisData.sect);
            }
            if(subjVisData.data){
                setSubj(subjVisData.data);
            }
        }
    }

    

    return (
        <div className="featured">
            <table className="table table-striped table-hover">
                <thead>
                    <tr>
                    <th scope="col">Subjects</th>
                    {sect.map((value,index) =>{
                        return (
                            <th scope='col'>Section - {value}</th>
                        )
                    })}
                    </tr>
                </thead>
                <tbody>
                    {data.map((value,index) => {
                        return (
                            <tr key={index}>
                                <th scope='3'>
                                    {value.subj}
                                </th>
                                {value.data.map((value2,index2) => {
                                    return (
                                        <td key={index2} className="">
                                            <span className='text-danger'> Failed : {value2.analysis.fail} </span> <br />
                                            <span className='text-primary'> Passed count : {value2.analysis.passed_student} </span><br />
                                            <span > Total Student : {value2.analysis.total_student}</span><br />
                                            <span className='text-center'>Pass Percentage : <span className='text-success font-weight-bold '> {value2.analysis.Pass_percentage}% </span></span>
                                        </td>
                                    )
                                })}
                            </tr>
                        )
                    })}
                </tbody>
            </table>
        </div>
    );
}

const mapStateToProps = state => ({
    subjVisData: state.auth.subjVisData
});

export default connect(mapStateToProps )(Table);


import React, { Fragment } from 'react';
import "./featuredinfo.css"
import { connect } from "react-redux";



const FeaturedInfo = (props) => {

    const failCount = () => {
        if (props.semVisData && props.semFailList) {
            console.log(props.semFailList);
            if (props.semVisData.Fail_count) {
                return <Fragment>
                    {props.semVisData.Fail_count}
                </Fragment>
            }
            else {
                if (props.semVisData.Fail_count === 0) {
                    return 0
                }
                return <Fragment>
                    No data Found
                </Fragment>
            }
        } else {
            return <Fragment>
                No data Found
            </Fragment>
        }
    }
    const passCount = () => {
        if (props.semVisData) {
            if (props.semVisData.Pass_count) {
                return <Fragment>
                    {props.semVisData.Pass_count}
                </Fragment>
            }
            else {
                return <Fragment>
                    No data Found
                </Fragment>
            }
        } else {
            return <Fragment>
                No data Found
            </Fragment>
        }
    }

    const regesterCount = () => {
        if (props.semVisData) {
            if (props.semVisData.Total_Registered) {
                return <Fragment>
                    {props.semVisData.Total_Registered}
                </Fragment>
            }
            else {
                return <Fragment>
                    No data Found
                </Fragment>
            }
        } else {
            return <Fragment>
                No data Found
            </Fragment>
        }
    }

    return (
        <div className='featured'>
            <div className="featuredItem total">
                <span className="featuredTitle">Total Applications</span>
                <div className="featuredMoneyContainer">
                    <span className="featuredMoney">{regesterCount()}</span>
                    {/* <span className="featuredMoneyRate"> -11.4   */}
                    {/* <ArrowDownward className='featuredIcon'/> */}
                    {/* </span> */}
                </div>
                <span className="featuredSb">
                    Students Registered
                </span>
            </div>
            <div className="featuredItem pass">
                <span className="featuredTitle">No of Students Passed</span>
                <div className="featuredMoneyContainer">
                    <span className="featuredMoney">{passCount()}</span>
                    {/* <span className="featuredMoneyRate"> -1.4  
                <ArrowDownward className='featuredIcon negative'/>
                </span> */}
                </div>
                <span className="featuredSb">
                    Students passed
                </span>
            </div>
            <div class="modal fade" id="editModel" aria-labelledby="editModelLabel" aria-hidden="true">
                <div class="modal-dialog  modal-dialog-scrollable modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editModelLabel">View Semester Details</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">

                            <p class=" my-4 fw-bold fs-3 text-center">Failed List of Students :-</p>
                            {
                                props.semFailList.code ?
                                    <div class="mb-3 mx-4">
                                        <div className="">
                                            <table className="table table-hover" style={{ width: "98%" }}>
                                                <thead>
                                                    <tr>
                                                        <th scope="col">#</th>
                                                        <th scope="col">Roll</th>
                                                        <th scope="col">Student Name</th>
                                                        <th scope="col">Subject Name</th>
                                                        <th scope="col">Subject Code</th>
                                                        <th scope="col">Attendance</th>
                                                        <th scope="col">Credit</th>
                                                        <th scope="col">Grade</th>
                                                        <th scope="col">CGPA</th>
                                                        <th scope="col">Result</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    {props.semFailList.data.map((value, index2) => {
                                                        return (
                                                            <tr>
                                                                <th scope="row">{index2 + 1}</th>
                                                                <td>{value.roll}</td>
                                                                <td>{value.name}</td>
                                                                <td>{value.subjName}</td>
                                                                <td>{value.code}</td>
                                                                <td>{value.attendance}</td>
                                                                <td>{value.credit}</td>
                                                                <td>{value.grade}</td>
                                                                <td>{value.cgpa}</td>
                                                                <td>{value.result ? 
                                                                        <button type='button' className='btn btn-danger mx-2' >FAIL</button> 
                                                                        : 
                                                                        <button type='button' className='btn btn-success mx-2' >PASS</button>
                                                                    }
                                                                    </td>
                                                            </tr>
                                                        )
                                                    })}
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    : "Loading Data"
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div className="featuredItem fail"  data-bs-toggle="modal" data-bs-target="#editModel">
                <span className="featuredTitle">No of Students Failed</span>
                <div className="featuredMoneyContainer">
                    <span className="featuredMoney">{failCount()}</span>
                    {/* <span className="featuredMoneyRate"> +2.4  
                <ArrowUpward className='featuredIcon'/></span> */}
                </div>
                <span className="featuredSb">
                    Students Failed
                </span>
            </div>
        </div>
    )
}


const mapStateToProps = state => ({
    semVisData: state.auth.semVisData,
    semFailList: state.auth.semFailList,
});

export default connect(mapStateToProps)(FeaturedInfo);



import React from 'react'
import "./Model.css"

function ModelContent({ setOpenModal }) {
    
    return (
        <div class="maincontainer">
            <div class="close">
            <button
            onClick={() => {
              setOpenModal(false);
            }}
          >
            X
          </button>
            </div>
        <div className='widgetLg'>
            <h3 className="widgetLgTitle">
                Toppers Data
            </h3>
            <table className="widgetLgTable">
                <tr className="widgetLgTr">
                    <th className="widgetLgTh">Rank</th>
                    <th className="widgetLgTh">R.No</th>
                    <th className="widgetLgTh">Name</th>
                    <th className="widgetLgTh">CGPA</th>
                </tr>
                <tr className="widgetLgTr">
                    <td className="widgetLgUser">
                        
                    <span className="widgetLgNa">Firoz Khan</span>
                    </td>
                    <td className="widgetLgDate">2 Jun 2021</td>
                    <td className="widgetLgAmount">$122.00</td>
                    <td className="widgetLgStatus">
                    9.00
                    </td>
                </tr>
                <tr className="widgetLgTr">
                    <td className="widgetLgUser">
                        
                    <span className="widgetLgNa">Firoz Khan</span>
                    </td>
                    <td className="widgetLgDate">2 Jun 2021</td>
                    <td className="widgetLgAmount">$122.00</td>
                    <td className="widgetLgStatus">
                    8.33
                    </td>
                </tr><tr className="widgetLgTr">
                    <td className="widgetLgUser">
                       
                    <span className="widgetLgNa">Firoz Khan</span>
                    </td>
                    <td className="widgetLgDate">2 Jun 2021</td>
                    <td className="widgetLgAmount">Firoz Khan</td>
                    <td className="widgetLgStatus">
                    8.99
                    </td>
                </tr><tr className="widgetLgTr">
                    <td className="widgetLgUser">
                       
                    <span className="widgetLgNa">Firoz Khan</span>
                    </td>
                    <td className="widgetLgDate">2 Jun 2021</td>
                    <td className="widgetLgAmount">$122.00</td>
                    <td className="widgetLgStatus">
                    7.99
                    </td>
                </tr>
            </table>
            </div>
            </div>
            );
}

export default ModelContent


import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import "../../../node_modules/bootstrap/dist/css/bootstrap.min.css";
import "./nav.css"

class DashboardNav extends Component {
    constructor(props) {
        super(props);
        this.toggleOpenState = this.toggleOpenState.bind(this);
        this.state = {
          isOpen: false
        };
      }
      toggleOpenState() {
        this.setState({
          isOpen: !this.state.isOpen
        });
      }
    render() {
        return (
            <div>
                <nav className="navbar navbar-expand-lg navbar-light ff px-5">
                    <Link className="navbar-brand" to="/">Navbar</Link>
                    <button className="navbar-toggler" type="button" onClick={this.toggleOpenState} data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <span className="navbar-toggler-icon"></span>
                    </button>
    
                    <div className="collapse navbar-collapse d-flex flex-row-reverse" isOpen={this.state.isOpen} id="navbarSupportedContent">
                        <ul className="navbar-nav mr-5  pr-5">
                            <li className="nav-item active">
                                <Link className="nav-link" to="/">Home</Link>
                            </li>
                            <li className="nav-item">
                                <Link className="nav-link" to="/login">Login</Link>
                            </li>
                            <li className="nav-item">
                                <Link className="nav-link" to="/signup">Sign Up</Link>
                            </li>
                            <li className="nav-item dropdown">
                                <Link className="nav-link dropdown-toggle" to="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Dropdown
                                </Link> 
                                <div className="dropdown-menu" aria-labelledby="navbarDropdown">
                                <Link className="dropdown-item" to="#">Action</Link>
                                <Link className="dropdown-item" to="#">Another action</Link>
                                <div className="dropdown-divider"></div>
                                <a className="nav-link" href="#!" >Logout</a>
                                </div>
                            </li>
                            <li className="nav-item mx-5">
                            </li>
                        </ul>
                    </div>
                </nav>
            </div>
        );
    }
}


export default DashboardNav;


import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import "../../../node_modules/bootstrap/dist/css/bootstrap.min.css";
import "./nav.css"

class DashboardNav extends Component {
    
    render() {
        return (
            <div>
                <nav className="navbar navbar-expand-lg navbar-light ff px-5">
                    <Link className="navbar-brand" to="/">Navbar</Link>
                    <button className="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <span className="navbar-toggler-icon"></span>
                    </button>
    
                    <div className="collapse navbar-collapse d-flex flex-row-reverse"  id="navbarSupportedContent">
                        <ul className="navbar-nav mr-5  pr-5">
                            <li className="nav-item active">
                                <Link className="nav-link" to="/">Home</Link>
                            </li>
                            <li className="nav-item">
                                <Link className="nav-link" to="/login">Login</Link>
                            </li>
                            <li className="nav-item">
                                <Link className="nav-link" to="/signup">Sign Up</Link>
                            </li>
                            <li className="nav-item dropdown">
                                <Link className="nav-link dropdown-toggle" to="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Dropdown
                                </Link> 
                                <div className="dropdown-menu" aria-labelledby="navbarDropdown">
                                <Link className="dropdown-item" to="#">Action</Link>
                                <Link className="dropdown-item" to="#">Another action</Link>
                                <div className="dropdown-divider"></div>
                                <a className="nav-link" href="#!" >Logout</a>
                                </div>
                            </li>
                            <li className="nav-item mx-5">
                            </li>
                        </ul>
                    </div>
                </nav>
            </div>
        );
    }
}


export default DashboardNav;

import React from "react";
import "./featuredinfo.css"

import {
    Chart,
    Series,
    CommonSeriesSettings,
    Tooltip,
  } from "devextreme-react/chart";
  // import { fetchSubjSectAnalysys } from '../../actions/visua';
  import { connect } from 'react-redux';
  
  const SecWisePerfamanceChart= ({subjSectAnalysis}) => {
    const data = subjSectAnalysis;
    // console.log(data);
    return (
      
        <Chart
          id="chart"
          
          dataSource={data.subjSectionData}
        >
          <CommonSeriesSettings argumentField="subject_name" type="stackedBar" />

          
          {/* {
            subjSectAnalysisdata.map((value,index)=>{
              return (
                <Series valueField={value.}/>
              )


            })
          } */}
          
          
          <Series
            valueField="section-1-Pass"
            name="Section 1 Pass"
            stack="section-1"
            color="#101e9c"
          />
          <Series
            valueField="section-1-Fail"
            name="Section 1 Fail"
            stack="section-1"
            color="#00BFFF"
          />
          <Series
            valueField="section-2-Pass"
            name="Section 2 Pass"
            stack="section-2"
            color="#DC143C"
          />
          <Series
            valueField="section-2-Fail"
            name="Section 2 Fail"
            stack="section-2"
            color="#FF6347"
          />
  
          <Series valueField="section-3-Pass" name="Section 3 Pass" stack="section-3" color="#DAA520"/>
          <Series valueField="section-3-Fail" name="Section 3 Fail" stack="section-3" color="#EADDCA"/>
          <Series
            valueField="section-4-Pass"
            name="Section 4 Pass"
            stack="section-4"
            color="#722F37"
          />
          <Series
            valueField="section-4-Fail"
            name="section 4 Fail"
            stack="section-4"
            color="#CBC3E3"
          />
  
          {/* <ValueAxis>
            <Title text="Populations, millions" />
          </ValueAxis> */}
          {/* <Legend
            position="inside"
            columnCount={4}
            //customizeItems={customizeItems}
            horizontalAlignment="right"
          >
            <Border visible={true} />
          </Legend> */}
          {/* <Export enabled={true} /> */}
          <Tooltip enabled={true} />
        </Chart>
      );
    }
  
  // function customizeItems(items) {
  //   const sortedItems = [];
  //   var stackIndex = 0;
  //   items.forEach((item) => {
  //     if (item.series.stack === "section1") {
  //       stackIndex = 0;
  //     } else if (item.series.stack === "section2") {
  //       stackIndex = 1;
  //     } else if (item.series.stack === "section3") {
  //       stackIndex = 2;
  //     } else if (item.series.stack === "section4") {
  //       stackIndex = 3;
  //     }
  
  //     // const startIndex = item.series.stack === "section1" ? 0 : 3;
  //     sortedItems.splice(stackIndex, 0, item);
  //   });
  //   return sortedItems;
  // }
  
  const mapStateToProps = state => ({
    subjSectAnalysis: state.auth.subjSectAnalysis
});

export default connect(mapStateToProps, null)(SecWisePerfamanceChart);

import React, { Component, useState } from 'react';
import "./sidebar.css"; 
import styled from 'styled-components';
import { Link } from '@material-ui/core';
import * as RiIcons from 'react-icons/ri';
// import { Redirect } from 'react-router-dom';
import SubSemSubmenu from "./SubSemSubmenu";

const SidebarLink = styled(Link)`
  display: flex;
  color: white;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  list-style: none;
  height: 60px;
  text-decoration: none;
  font-size: 18px;
  &:hover {
    background: #252831;
    border-left: 4px solid #632ce4;
    cursor: pointer;
  }
`;

const SidebarLabel = styled.span`
  margin-left: 16px;
`;


const SidebarLinkreg = styled(Link)`
  display: flex;
  color: white;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  list-style: none;
  height: 60px;
  text-decoration: none;
  font-size: 18px;
  margin-left:20px;
  &:hover {
    background: #252831;
    border-left: 4px solid #63ffe4;
    cursor: pointer;
    color:white;
  }
`;

const SidebarLabelreg = styled.span`
  margin-left: 26px;
`;


const SidebarLinksem = styled(Link)`
  display: flex;
  color: white;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  list-style: none;
  height: 60px;
  text-decoration: none;
  font-size: 18px;
  margin-left:40px;
  &:hover {
    background: #296959;
    border-left: 4px solid #632ce4;
    cursor: pointer;
    color:white;
  }
`;

const SidebarLabelsem = styled.span`
  margin-left: 46px;
`;

const SidebarLabeltt = styled.span`
  margin-left: 66px;
`;

const DropdownLink = styled(Link)`
  background: #414757;
  height: 60px;
  padding-left: 3rem;
  display: flex;
  align-items: center;
  text-decoration: none;
  color: #f5f5f5;
  font-size: 18px;
  &:hover {
    background: #632ce4;
    cursor: pointer;
  } 
`;


const DropdownLinktt = styled(Link)`
  background: #e0d5d5;
  height: 60px;
  padding-left: 3rem;
  display: flex;
  margin-left:20px;
  align-items: center;
  text-decoration: none;
  color: black;
  font-size: 18px;
  &:hover {
    background: 632ce4;
    cursor: pointer;
    color:black;
  }
`;








const SemSubmenu = ({item}) => {
  const [Semid, setSemid] = useState();


  const [subnava1, setSubnava1] = useState(false);

  const showSubnava1 = () => setSubnava1(!subnava1);

  const get = (id) =>{
    console.log(id);
  }



  return (
      <>
      <SidebarLinksem to={item.path} onClick={item.sem && showSubnava1}>
          <div>
          <SidebarLabelsem>{item.name}</SidebarLabelsem>
          </div>
          <div>
          {item.sem && subnava1
              ? <RiIcons.RiArrowUpSFill />
              : item.name
              ? <RiIcons.RiArrowDownSFill />
              : null}
          </div>
      </SidebarLinksem>
      {subnava1 &&
          item.sem.map((item, index) => {
          return (
              <SubSemSubmenu item={item} key={index}/>
          );
          })}
      </>
  );
}


const SubSubmenu = ({item}) => {
  const [subnava1, setSubnava1] = useState(false);

  const showSubnava1 = () => setSubnava1(!subnava1);

  return (
      <>
      <SidebarLinkreg to={item.path} onClick={item.data && showSubnava1}>
          <div>
          <SidebarLabelreg>{item.title}</SidebarLabelreg>
          </div>
          <div>
          {item.data && subnava1
              ? <RiIcons.RiArrowUpSFill />
              : item.title
              ? <RiIcons.RiArrowDownSFill />
              : null}
          </div>
      </SidebarLinkreg>
      {subnava1 &&
          item.data.map((item, index) => {
          return (
              // <DropdownLink to={item.id} key={index}>
              // <SidebarLabel>{item.name}</SidebarLabel>
              // </DropdownLink>

              <SemSubmenu item={item} key={index}/>

          );
          })}
      </>
  );
}



const Submenu = ({item}) => {
    const [subnav, setSubnav] = useState(false);

    const showSubnav = () => setSubnav(!subnav);

    return (
        <>
        <SidebarLink to={item.path} onClick={item.reg && showSubnav}>
            <div>
            <SidebarLabel>{item.name}</SidebarLabel>
            </div>
            <div>
            {item.reg && subnav
                ? <RiIcons.RiArrowUpSFill />
                : item.name
                ? <RiIcons.RiArrowDownSFill />
                : null}
            </div>
        </SidebarLink>
        {subnav &&
            item.reg.map((item, index) => {
            return (
                // <DropdownLink to={item.id} key={index}>
                // <SidebarLabel>{item.title}</SidebarLabel>
                // </DropdownLink>
                <SubSubmenu item={item} key={index}/>
                
                  // <div className="sidebarMenu">  
                  // <SidebarLabel>{item1.title}</SidebarLabel>
                  //   {item1.data.map((value2,index2) => {
                  //       return <SubSubmenu item={value2} key={index2}/>;
                  //   })}
                // </div>
            );
            })}
        </>
    );
}


class Sidebar extends Component{

    constructor(props) {
        super(props);
        this.state = {
          batch: []
        };
      }

    setdataintoDAta = data => {
        this.setState({batch: data});
        // console.log(this.state.batch)
    
      }
    


    componentDidMount(){
        fetch( `${process.env.REACT_APP_API_URL}/test`,{
                method: "GET",
            }).then(resp => resp.json())
            // .then(resp => console.log(resp))
            .then(res => this.setdataintoDAta(res))
            .catch(error => console.log(error))
      };

    


    
    
    render(){
        return (
            <div className={this.props.tog ? 'sidebar' : "sidebar d-none" }> 
                <div className="sidebarWrapper">
                    <div className="sidebarMenu">
                            
                                {this.state.batch.map((value,index) => {
                                    return <Submenu item={value} key={index}/>;
                                })}
                    </div>
                </div>
            </div>
        );
    }
    
    }
export default Sidebar;

import React, { Component, useState } from 'react';
import "./sidebar.css"; 
import styled from 'styled-components';
import { Link } from '@material-ui/core';
import * as RiIcons from 'react-icons/ri';
import { fetchSemData, fetchSubjData ,fetchSubjSectAnalysys} from '../../actions/visua';
import { connect } from 'react-redux';
import { useNavigate } from "react-router-dom";


const SidebarLinksem = styled(Link)`
display: flex;
color: white;
justify-content: space-between;
align-items: center;
padding: 20px;
list-style: none;
height: 60px;
text-decoration: none;
font-size: 18px;
margin-left:40px;
z-index:500;
text-decoration:none;
&:hover {
  background: #252831;
  border-left: 4px solid #632ce4;
  cursor: pointer;
  color:white;
}
`;

const SidebarLabelsem = styled.span`
margin-left: 46px;
z-index:111500;
`;




const SidebarLabeltt = styled.span`
margin-left: 66px;
`;


const DropdownLinktt = styled(Link)`
background: #e0d5d5;
height: 60px;
padding-left: 3rem;
display: flex;
margin-left:20px;
align-items: center;
text-decoration: none;
color: black;
font-size: 18px;
z-index:10000;
&:hover {
  background: white;
  cursor: pointer;
  color:black;
}
`;

const SubSemSubmenu = ({item, fetchSemData,fetchSubjData,fetchSubjSectAnalysys}) => {

  const [subnava1, setSubnava1] = useState(false);
  let history = useNavigate();

  const showSubnava1 = () => setSubnava1(!subnava1);

  
    const get = async (id) =>{
      fetchSemData(id).then(()=>{
        if (window.location.pathname !== "/analysis"){
          history("/analysis");
        }
      }).catch(()=>{
        if (window.location.pathname === "/analysis"){
          history("/");
        }
      } 
      );
      // fetchSubjData(id);
      // fetchSubjSectAnalysys(id);
      // await new Promise(resolve => setTimeout(resolve, 3000));
      // await wait(2000);
      // history('/analysis');
      // console.log(window.location.pathname);
      

      if (window.location.pathname !== "/analysis"){
        history("/analysis");
      }
      // if ()
    }
    
  
  
    return (
        <>
        <SidebarLinksem onClick={item.name && showSubnava1}>
            <div>
            <SidebarLabelsem>{item.name} Semester</SidebarLabelsem>
            </div>
            <div>
          {item.name && subnava1
              ? <RiIcons.RiArrowUpSFill />
              : item.name
              ? <RiIcons.RiArrowDownSFill />
              : null}
          </div>
        </SidebarLinksem>
        {subnava1 &&
          <p onClick={get(item.id)}></p>
          }
        
        </>
    );
  };
  



  export default connect(null, {fetchSemData,fetchSubjData,fetchSubjSectAnalysys})(SubSemSubmenu);
  
  import React, { useEffect } from 'react';
import "./topbar.css";
// import { Language, NotificationsNone, Settings } from '@material-ui/icons';
import { connect } from 'react-redux';
import { Link, Navigate } from 'react-router-dom';
import { logout } from '../../actions/auth';
import { checkAuthenticated } from '../../actions/auth';


const Topbar = ({ logout, isAuthenticated, checkAuthenticated }) => {


    useEffect(() => {
        checkAuthenticated();
    }, []);

    if (isAuthenticated === false) {
        // const nav= useNavigate();
        // return nav("/login");
        return <Navigate to="/login" />
    }
    return (
        <div className="topbar">
            {/* <div className="topbarWrapper">
                <div className="topLeft">
                    <span className="logo">
                        Student Result Analysis
                    </span>
                </div>
                <div className="topRight">

                    <Link className="tt topbarIconsContainer2" to="/" >Home</Link>

                    <Link className="tt topbarIconsContainer2" to="/backdata" >Upload Supply Result</Link>

                    <Link className="tt topbarIconsContainer2" to="/upload" >Upload New Sem Result</Link>

                    <Link className="tt topbarIconsContainer2" to="/student">Student Upload</Link>

                    <Link className="tt topbarIconsContainer1" to="#!" onClick={logout}>Logout</Link>

                    <img src="https://st3.depositphotos.com/15648834/17930/v/600/depositphotos_179308454-stock-illustration-unknown-person-silhouette-glasses-profile.jpg"
                        alt="" className='topAvatar' />
                </div>
            </div> */}

            <nav class="navbar navbar-expand-lg position-sticky">
                <div class="container-fluid">
                    <a class="navbar-brand" href="#"> <span className="logo">
                        Student Result Analysis
                    </span></a>
                    <button class="navbar-toggler " type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                        <ul class="navbar-nav me-auto mb-2 mb-lg-0">

                        </ul>
                        <form class="d-flex">
                            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                                <li class="nav-item">
                                    <Link className="tt topbarIconsContainer2 btn btn-outline-primary" to="/" >Home</Link>
                                </li>
                                <li class="nav-item">
                                    <Link className="tt topbarIconsContainer2 btn btn-outline-primary" to="/backdata" >Upload Supply Result</Link>
                                </li>
                                <li class="nav-item">
                                    <Link className="tt topbarIconsContainer2 btn btn-outline-primary" to="/upload" >Upload New Sem Result</Link>
                                </li>
                                <li class="nav-item">
                                    <Link className="tt topbarIconsContainer2 btn btn-outline-success" to="/student">Student Upload</Link>
                                </li>
                                <li class="nav-item">
                                    <Link className="tt topbarIconsContainer1 btn btn-outline-danger" to="#!" onClick={logout}>Logout</Link>
                                </li> 
                                <img src="https://st3.depositphotos.com/15648834/17930/v/600/depositphotos_179308454-stock-illustration-unknown-person-silhouette-glasses-profile.jpg"
                        alt="" className='topAvatar' />
                            </ul>
                        </form>
                    </div>
                </div>
            </nav>
        </div>
    );
}



const mapsStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated
})

export default connect(mapsStateToProps, { logout, checkAuthenticated })(Topbar);
import React from 'react'
// import "./widgetlg.css"
//import Button from 'react-bootstrap/Button';
import { useState } from "react";
import { connect } from 'react-redux';



// import btns from "./semsbtn.json"
const  ToppersData = ({subjSectAnalysisdata,toppersData}) => {
    // const getdata = JSON.parse(localStorage.getItem("subjSectAnalysis"));
    const getdata = toppersData;
    // console.log(getdata);
    // console.log(toppersData);
    // const [section, setsection] = useState(JSON.parse(localStorage.getItem("subjSectAnalysis")).eachSectionTopData.allSection);
    const [section, setsection] = useState(subjSectAnalysisdata.eachSectionTopData.allSection);
    // console.log(section);
    // console.log(subjSectAnalysisdata);
    // console.log(section);
    const [sec, setsec] = useState("allSection");



    // const data = getdata.semtopData;
    var sectionData = getdata.onlysections;
    // var data2 = eachsection[section];
    // console.log(sectionData);


    const check = (e) =>{
        // setsection(`${e}`);
        // data2 = eachsection[section];
        setsection(getdata[`${e}`]);
        setsec(e);
    }

    return (
        <div className=''>
            <div className="text-center">
                <h4 className='p-2 rounded'>Section - <strong className='mx-2'> {sec}</strong> Data</h4>
            </div>
            <table className="table table-hover">
                <thead>
                    <tr>
                    <th scope="col">#</th>
                    <th scope="col">Roll number</th>
                    <th scope="col">Name</th>
                    <th scope="col">Sec</th>
                    <th scope="col">SCGPA</th>
                    </tr>
                </thead>
                <tbody>

                    {section.map((value,index)=>{
                        return(
                            // {"roll":i.roll.roll,"name":i.roll.name,"sect":i.roll.section,"SCGPA":i.SCGPA
                            <tr key={index}>
                                <td>{index+1}</td>
                                <td>{value.roll}</td>
                                <td>{value.name}</td>
                                <td>{value.sect}</td>
                                <td>{value.SCGPA}</td>
                            </tr>
                        )
                    })}
                </tbody>
            </table>
            <div className="d-flex justify-content-between">
                <p  onClick={() => check("allSection")} className="btn btn-primary">ALL</p>
                {sectionData.map((value,index) => {
                    return (
                        <p key={index} onClick={() =>check(value)} className="btn btn-primary">section-{value}</p>
                    )
                })}
            </div>
        </div>
    )
}
 

const mapStateToProps = state => ({
    subjSectAnalysisdata: state.auth.subjSectAnalysis,
    toppersData:state.auth.toppersData
});


export default connect(mapStateToProps,null)(ToppersData);
import { Visibility } from '@material-ui/icons'
import React from 'react'
import "./widgetsm.css"
import btns from "./semsbtn.json"
export default function WidgetSm() {
    
    //  btns =[{"name":"sem-1"},{"name":"sem-2"}];
    const s=btns.data;
    return (
        <div className='widgetSm'>
            <span className="widgetSmTitle"> 
            New Join Members
            </span>
                <ul className="widgetSmList">
                    <li className='widgetSmListItem'>
                        <img src="https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500" 
                        alt="" className='widgetSmImg' />
                        <div className="widgetSmUser">
                            <span className="widgetSmUsername">Anna keller</span>
                            <span className="widgetSmUserTitle">Software Engineer</span>
                        </div>
                        <button className="widgetSmButton">
                            <Visibility className='widgetSmIcon' />
                            Display
                        </button>
                    </li>
                    <li className='widgetSmListItem'>
                        <img src="https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500" 
                        alt="" className='widgetSmImg' />
                        <div className="widgetSmUser">
                            <span className="widgetSmUsername">Anna keller</span>
                            <span className="widgetSmUserTitle">Software Engineer</span>
                        </div>
                        <button className="widgetSmButton">
                            <Visibility className='widgetSmIcon' />
                            Display
                        </button>
                    </li>
                    <li className='widgetSmListItem'>
                        <img src="https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500" 
                        alt="" className='widgetSmImg' />
                        <div className="widgetSmUser">
                            <span className="widgetSmUsername">Anna keller</span>
                            <span className="widgetSmUserTitle">Software Engineer</span>
                        </div>
                        <button className="widgetSmButton">
                            <Visibility className='widgetSmIcon' />
                            Display
                        </button>
                    </li>
                    <li className='widgetSmListItem'>
                        <img src="https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500" 
                        alt="" className='widgetSmImg' />
                        <div className="widgetSmUser">
                            <span className="widgetSmUsername">Anna keller</span>
                            <span className="widgetSmUserTitle">Software Engineer</span>
                        </div>
                        <button className="widgetSmButton">
                            <Visibility className='widgetSmIcon' />
                            Display
                        </button>
                    </li>
                    <li className='widgetSmListItem'>
                        <img src="https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500" 
                        alt="" className='widgetSmImg' />
                        <div className="widgetSmUser">
                            <span className="widgetSmUsername">Anna keller</span>
                            <span className="widgetSmUserTitle">Software Engineer</span>
                        </div>
                        <button className="widgetSmButton">
                            <Visibility className='widgetSmIcon' />
                            Display
                        </button>
                    </li>
                </ul>
                 <div>
                {s.map(function(d, idx){
                    return (<button key={idx}>{d.name}</button>)
                })}
             </div>
        </div>
    )
}

import React, { useState } from 'react';
import { connect } from 'react-redux';
import { postAddBatch } from '../../actions/visua';
import 'react-toastify/dist/ReactToastify.css';

const AddBatch = ({adminData,postAddBatch}) => {

    
    const regs = adminData.data.reg;

    const [formdata,setFormData] = useState({
		batch:"",
        reg:"",
	});
	
    const onChange = e => setFormData({ ...formdata, [e.target.name]: e.target.value});

	const {reg,batch} = formdata;

    const onSubmit = (e) =>{
		e.preventDefault();
        console.log("batch:"+batch);
        console.log("reg:"+reg);
		const data  = new FormData();
        data.append('batch', batch);
        data.append('reg', reg);
		postAddBatch(data);
		// console.log(b)
	}



    return (
        <div className='h-100'>
            <div className="d-flex justify-content-center">
                <form className='text-center my-5' onSubmit={(e) => onSubmit(e)} >
                    <p className='fw-bolder fs-2 my-2'>ADD BATCH Details</p>
                    <br />
                    <br />
                    <select className='form-control' name='reg' onChange={(e) => onChange(e)}>
                        {regs.map((value,index) =>{
                            return (
                                <option value={value.id}>{value.name} - {value.year}</option>
                            )
                        })}
                    </select>
                    <br/>
                    <input type="text" name="batch" placeholder='Enter Batch Name' onChange={(e) => onChange(e)} className='form-control'  />
                    <button type='submit' className='btn btn-secondary mt-4'>Submit</button>
                </form>
            </div>
            {/* <ToastContainer/> */}
        </div>
    )

}

const mapStateToProps = state => ({
    adminData: state.auth.adminData,
});



export default connect(mapStateToProps,{postAddBatch})(AddBatch);


import React, { useState } from 'react';
import { connect } from 'react-redux';
import { postAddBranch } from '../../actions/visua';
import Alert from "../../components/alert/Alert";

const AddBranch = ({postAddBranch}) => {
    const [formdata,setFormData] = useState({
		branch:"",
	});
	const [alert,setAlert] = useState('');
    const onChange = e => setFormData({ ...formdata, [e.target.name]: e.target.value});

	const {branch} = formdata;

    const onSubmit = (e) =>{
		e.preventDefault();
        console.log(branch);
		const data  = new FormData();
        var payload={};
        data.append('branch', branch);
		// postAddBranch(data);
		// console.log(b)
        postAddBranch(data).then((res)=>{
            console.log("[AddBranch]"+JSON.stringify(JSON.parse(localStorage.getItem("addbranch"))));
            console.log("[AddBranch2]"+JSON.parse(localStorage.getItem("addbranch")).code);
            payload=JSON.parse(localStorage.getItem("addbranch"));
            
            // if(JSON.parse(localStorage.getItem("addbrach")).msg === "Error"){
            setAlert(<Alert type={payload.msg.toLowerCase()} msg={payload.message.toLowerCase()} bb={payload.code} onclick={setAlert} />)
            
        }).catch( (err) =>{
            
            console.log(err);
        }
        );
	}

    return (
        <div className='h-100'>
            <div className="d-flex justify-content-center">
                <form className='text-center my-5' onSubmit={(e) => onSubmit(e)} >
                    <p className='fw-bolder fs-2 my-2'>ADD Branch</p>
                    <br />
                    {alert}
                    <br />
                    <input type="text" name="branch" placeholder='Enter Branch Name' onChange={(e) => onChange(e)}  className='form-control'  />
                    <button type='submit' className='btn btn-secondary mt-4'>Submit</button>
                </form>
            </div>
        </div>
    )
}

export default connect(null,{postAddBranch})(AddBranch);


import React,{useEffect, useState} from 'react';
import Topbar from "../../components/topbar/Topbar";
import Sidebar from "../../components/sidebar/Sidebar";
import Home from "../home/Home";
import { connect } from "react-redux";
import "./dashboard.css";
import { checkAuthenticated, load_user } from "../../actions/auth";
import {fetchSemData,fetchSubjSectAnalysys,fetchRegulationData,postRegulationData,postFetchData} from "../../actions/visua";
import FetchMainPage from '../home/FetchMainPage';
import AddDataMainPage from './AddDataMainPage';
// import Navbar from '../../components/navbar/Navbar';
// import DashboardNav from '../../components/navbar/DashboardNav';
const AddDataDashboard = ({checkAuthenticated,load_user}) => {

    useEffect(() => {
        checkAuthenticated();
        load_user();
        // props.fetchSemData();
    }, []);
    const [sidebar, setsidebar] = useState(true);


    return (
        <div>
            <Topbar />
            <div className="container-1">
                <Sidebar tog={sidebar}/>
                {/* <Home/> */}
                <AddDataMainPage   tog={setsidebar} sidebar={sidebar} />
                                
                
            </div>
        </div>
    );
}



const mapsStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated,
    RegulationData: state.auth.RegulationData,
})
export default connect(mapsStateToProps, {checkAuthenticated,load_user})(AddDataDashboard);


import React, { useState } from 'react';
// import "./student.css";
import { connect } from "react-redux";
import { fetchdatafun2 } from "../../actions/visua";
import { Link } from 'react-router-dom';



const AddDataMainPage = ({ fetchdatafun2, pagestoShow, tog, sidebar, pp }) => {


    const [formData, setFormData] = useState({
        key: '',
    });
    const [ver, setver] = useState(false);
    const [error, seterror] = useState(false);


    const onChange = e => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    }
    const { key } = formData;

    const onSubmit = (event) => {
        event.preventDefault();
        if (key === "onlyadmins") {
            setver(true);
            seterror(false);
        } else {
            setver(false);
            seterror(true);
        }
    }

    const tabs = () => {
        return <>
            <div className="h-100 mx-3">
                {/* <Tabs
                            defaultActiveKey="profile"
                            id="uncontrolled-tab-example"
                            className="mb-3"
                            >
                            <Tab eventKey="home" title="Branch">
                                <AddBranch/>
                            </Tab>
                            <Tab eventKey="profile" title="Regulation">
                                <AddReg/>
                            </Tab>
                            <Tab eventKey="contact" title="Batch">
                                <AddBatch />
                            </Tab>
                    </Tabs> */}
                {pagestoShow}

            </div>
        </>

    }


    const tt = () => {
        tog(!sidebar);
    }

    const secret = () => {
        return <>
            <div className="text-center my-2">
                <h3 className='card-title'>Add Data Page</h3>
            </div>

            <div className="mt-4 mx-4 d-flex justify-content-center">
                {error ?
                    <div class="alert alert-warning alert-dismissible d-flex align-items-center fade w-75 show" role="alert">
                        <strong>Wrong Password  ..!</strong>
                        Please enter the correct password to access the Admin Page
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                    : ""
                }
            </div>
            <div className="mt-4 mx-4 d-flex justify-content-center">
                <form class="row g-3" onSubmit={(e) => onSubmit(e)} >
                    <div class="col-auto">
                        <input type="password" class="form-control" onChange={(e) => onChange(e)} name="key" disabled={ver} placeholder="Enter Secret Key" />
                    </div>
                    <div class="col-auto">
                        <button type="submit" class={ver ? "btn btn-success mb-3 px-5" : "btn btn-success mb-3 px-5 "} disabled={ver}>{ver ? "Verfied" : "Verify"}</button>
                    </div>
                </form>
            </div>
        </>
    }



    return (
        <div className='home main-container mh-100'>
            <div className="mx-3 mt-2 d-flex justify-content-between">
                <div className="" onClick={() => tt()}>
                    <button class="navbar-toggler navbar-light bg-light px-2 py-1 rounded" type="button">
                        <span class="navbar-toggler-icon"></span>
                    </button> <span className='fw-light text-secondary mx-2'>Toggle Side bar</span>
                </div>
                <div className="mx-3 ">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><Link to={"/"}>Admin</Link></li>
                        <li class="breadcrumb-item active" aria-current="page">{pp}</li>
                    </ol>
                </div>
            </div>
            <div className="ss h-100">
                <div className="d-flex justify-content-center">
                    <div className="card w-100 bg-white my-2">

                        {ver ? "" : secret()}


                        {ver ? tabs() : ""}

                    </div>
                </div>
            </div>
        </div>
    )
}



const mapStateToProps = state => ({
    fetchdata1: state.auth.fetchdata1,
});

export default connect(mapStateToProps, { fetchdatafun2 })(AddDataMainPage);

// export default StudentMainPage;

import React, { useState } from "react";
import "./dashboard.css";
import {  connect } from "react-redux";
import {postAddReg} from "../../actions/visua";
import Alert from "../../components/alert/Alert";

const AddReg = ({ postAddReg }) => {
	const [inputList, setInputList] = useState([{ grade: "", value: "" }]);
	const [formdata,setFormData] = useState({
		reg:"",
		year:""
	});
	const [alert,setAlert] = useState('');
    const onChange = e => setFormData({ ...formdata, [e.target.name]: e.target.value});

	const {reg,year} = formdata;

	// handle input change
	const handleInputChange = (e, index) => {
		const { name, value } = e.target;
		const list = [...inputList];
		list[index][name] = value;
		setInputList(list);
	};

	// handle click event of the Remove button
	const handleRemoveClick = index => {
		const list = [...inputList];
		list.splice(index, 1);
		setInputList(list);
	};

	// handle click event of the Add button
	const handleAddClick = () => {
		setInputList([...inputList, { grade: "", value: "" }]);
	};
	var payload={};
	const onSubmit = (e) =>{
		e.preventDefault();
		console.log(inputList);
		console.log(reg,year);
		const data  = new FormData();
		// let gg = {data:inputList};
		// console.log(gg);
        data.append('reg', reg);
        data.append('year',year);
		data.append('grade',JSON.stringify(inputList));

		postAddReg(data).then((res)=>{
            console.log("[AddReg]"+JSON.stringify(JSON.parse(localStorage.getItem("addreg"))));
            console.log("[AddReg]"+JSON.parse(localStorage.getItem("addreg")).code);
            payload=JSON.parse(localStorage.getItem("addreg"));
            
            // if(JSON.parse(localStorage.getItem("addbrach")).msg === "Error"){
            setAlert(<Alert type={payload.msg.toLowerCase()} msg={payload.message.toLowerCase()} bb={payload.code} onclick={setAlert} />)
            
        }).catch( (err) =>{
            
            console.log(err);
        }
        );
		// console.log(b)
	}
  

	return (
		<div className='h-100'>
			<div className="d-flex justify-content-center text-center">
				<form className='text-center my-2' onSubmit={(e) => onSubmit(e)} >
					<div className="w-100 d-flex justify-content-center">
						<div className="">
							<p className='fw-bolder fs-2 my-2'>ADD New Regulation</p>
							<br />
							{alert}
							<br />
							<input type="text" name="reg" required placeholder='Regulation Name' onChange={(e) => onChange(e)} className='form-control my-3' />
							<input type="text" name="year" required placeholder='year' onChange={(e) => onChange(e)} className='form-control mb-4' />
						</div>
					</div>
     
					<div className="d-flex justify-content-center">
						<div className="">
							
						{inputList.map((x, i) => {
							return (
								<div key={i}>



									<div className="my-2 w-100 px-2 d-flex justify-content-center ">
										<div className="d-flex justify-content-center w-75">
											<div className="d-flex w-60 grades pl-4">
												<input type="text" required placeholder={x.grade?x.grade : "Grade"} className='rounded-start grade1' name="grade"  onChange={e => handleInputChange(e, i)} />
												<input type="text" required placeholder={x.value? x.value : "value"} name="value" className=' rounded-end grade1'  onChange={e => handleInputChange(e, i)} />
											</div>

											<div className="mx-2">
												{inputList.length !== 1 && <button className='btn btn-danger' onClick={() => handleRemoveClick(i)}>Delete</button>}
											</div>
											<div className="mx-2 ">
												{inputList.length - 1 === i && <button className='btn btn-primary ' onClick={handleAddClick}>Add</button>}
											</div>

										</div>

									</div>

								</div>

							);
						})}
						</div>
					</div>

					<div className="mt-3">
						<button className="btn btn-success w-50 form-control">Submit</button>
					</div>
				</form>
			</div>
		</div>
	);
}



export default connect(null,{postAddReg})(AddReg);
import React, { useState } from 'react';
import { connect } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { deleteBatch, editBatch } from "../../actions/visua";




const EditBatch = ({ adminData, deleteBatch, adminDltResponse, editBatch, adminEditResponse }) => {
    const batches = adminData.data.batch;

    const regs = adminData.data.reg;

    const [delData, setdelData] = useState({
        id: "",
        name: "",
        reg: "",
        regid:"",
    });

    const [formdata, setFormData] = useState({
        name: "",
        reg: "",
        regid:"",
    })
    const { name, reg,regid } = formdata;
    const onChange = e => setFormData({ ...formdata, [e.target.name]: e.target.value });

    const [err, seterr] = useState({
        del: false,
        msg: ""
    });

    let history = useNavigate();


    const edit = (value) => {
        setdelData(value);
        setFormData({ name: value.name, reg: value.reg,regid: value.regid });
    }

    const delte = () => {
        const data = new FormData();
        data.append('batch', delData.id);
        deleteBatch(data).then(
            () => {
                if (adminDltResponse.batch.del === "error") {
                    seterr(adminDltResponse.batch);
                }
                else if (adminDltResponse.batch.del === "success") {
                    history("/");
                }
            }
        );
    }

    const editConfirm = () => {
        const data = new FormData();
        data.append('id', delData.id);
        data.append('name', name);
        data.append('reg', regid);
        // console.log(name,reg,delData);
        editBatch(data).then(
            () => {
                if (adminEditResponse.batch.del === "error") {
                    seterr(adminEditResponse.batch);
                } else if (adminEditResponse.batch.del === "success") {
                    history("/");
                }
            }
        )

        // console.log(err);
        // console.log(name);
    }

    const delfun = (value) => {
        setdelData(value);
    }

    return (
        <div className="d-flex justify-content-center">
            <div className='text-center my-5 w-100' >
                <p className='fw-bolder fs-2 my-2'>Edit  Batch Details</p>
                <div className=" d-flex justify-content-center w-100 text-center mb-4">

                    {err.del === "error" ?
                        <div class="alert alert-warning alert-dismissible d-flex align-items-center fade w-75 show" role="alert">
                            <strong>Alert  ..!</strong>
                            {err.msg}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                        : ""
                    }


                    <div class="alert alert-danger d-flex align-items-center w-75" role="alert">
                        <div>
                            <h4 class="alert-heading">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
                                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                                </svg>Warning!</h4>
                            <p>Deleting any of these important data will cause permanent loss of all the data,
                                Once deleted cannot be undone so please be carefull and think before Deleting any of the Batch from the list.
                                All the Batch related data will get deleted.</p>
                            <hr />
                            <p class="mb-0">Deleted Data cannot be recovered....!!. Please confirm before deleting</p>
                        </div>

                    </div>
                </div>
                {/* <div className="d-flex justify-content-around">
                        <div className=""></div>
                    </div> */}


                {/* DELETE MODAL */}

                <div class="modal fade" id="exampleModal" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered ">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">Please Confirm before Deleting</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body text-muted">
                                <span className='fs-5 fw-bold'> {delData.name}</span> Batch will get permamnently deleted and all the data related to this {delData.name}  Batch
                                along with students and all semesters will get deleted. Are you Sure?
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" onClick={() => delte()}>Confirm</button>
                            </div>
                        </div>
                    </div>
                </div>
                {/* DELETE MODAL */}

                {/* EDIT MODAL */}
                <div class="modal fade" id="editModel" aria-labelledby="editModelLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered ">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="editModelLabel">Edit Branch</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form>

                                    <label for="recipient-name" class="col-form-label">Batch:</label>
                                    <div class="mb-3 d-flex justify-content-center">
                                        <div className="">
                                            <select className='form-control' name='reg' onChange={(e) => onChange(e)} >
                                                {delData.reg ?
                                                    <option value={delData.regid} selected>{delData.reg}</option> : ""}
                                            
                                                {regs.map((value, index) => {
                                                    return (
                                                        <option value={value.id}>{value.name} - {value.year}</option>
                                                    )
                                                })}
                                            </select>
                                            <br />
                                            <input type="text" class="form-control w-50 mx-5" onChange={(e) => onChange(e)} name='name' id="recipient-name" value={name} />
                                        </div>
                                    </div>
                                </form>

                                <button type="button" class="btn btn-primary mx-2" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" onClick={() => editConfirm()}>Confirm</button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* EDIT MODAL */}


                {/* <div className="d-flex justify-content-around">
                        <div className=""></div>
                    </div> */}
                <div className="">
                    <table className="table table-hover">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Batch Name</th>
                                <th scope="col">Regulation</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody>

                            {batches.map((value, index) => {
                                return (
                                    <tr key={index}>
                                        <th scope="row">{index + 1}</th>
                                        <td>{value.name}</td>
                                        <td>{value.reg}</td>
                                        <td className='d-flex justify-content-center'>
                                            <button className='btn btn-success mx-2' onClick={() => edit(value)} data-bs-toggle="modal" data-bs-target="#editModel">EDIT</button>
                                            <button className='btn btn-danger' onClick={() => delfun(value)} data-bs-toggle="modal" data-bs-target="#exampleModal">Delete</button>
                                        </td>
                                    </tr>
                                )
                            })}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    )
}



const mapStateToProps = state => ({
    adminData: state.auth.adminData,
    adminDltResponse: state.auth.adminDltResponse,
    adminEditResponse: state.auth.adminEditResponse,
});






export default connect(mapStateToProps, { deleteBatch, editBatch })(EditBatch);


import React, { useState } from 'react';
import { connect } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { deleteBranch, editBranch } from "../../actions/visua";


const EditBranch = ({ adminData, deleteBranch, adminDltResponse, editBranch, adminEditResponse }) => {

    const branchs = adminData.data.branch;
    const [delData, setdelData] = useState({
        id: "",
        name: "",
    });

    const [formdata, setFormData] = useState({
        name: "",
    })
    const { name } = formdata;
    const onChange = e => setFormData({ ...formdata, [e.target.name]: e.target.value });

    const [err, seterr] = useState({
        del: false,
        msg: ""
    });

    let history = useNavigate();


    const edit = (value) => {
        setdelData(value);
        setFormData({ name: value.name });
    }

    const delte = () => {
        const data = new FormData();
        data.append('branch', delData.id);
        deleteBranch(data).then(
            () => {
                if (adminDltResponse.branch.del === "error") {
                    seterr(adminDltResponse.branch);
                }
                else if (adminDltResponse.branch.del === "success") {
                    history("/");
                }
            }
        );
    }

    const editConfirm = () => {
        const data = new FormData();
        data.append('id', delData.id);
        data.append('name', name);
        editBranch(data).then(
            () => {
                if (adminEditResponse.branch.del === "error") {
                    seterr(adminEditResponse.branch);
                } else if (adminEditResponse === "success") {
                    history("/");
                }
            }
        )

        console.log(err);
        // console.log(name);
    }

    const delfun = (value) => {
        setdelData(value);
    }

    return (
        <div className="d-flex justify-content-center">
            <div className='text-center my-5 w-100' >
                <p className='fw-bolder fs-2 mt-2 '>Edit  Batch Details</p>
                <div className=" d-flex justify-content-center w-100 text-center mb-4">

                    {err.del === "error" ?
                        <div class="alert alert-warning alert-dismissible d-flex align-items-center fade w-75 show" role="alert">
                            <strong>Alert  ..!</strong>
                            {err.msg}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                        : ""
                    }


                    <div class="alert alert-danger d-flex align-items-center w-75" role="alert">
                        <div>
                            <h4 class="alert-heading">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
                                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                                </svg>Warning!</h4>
                            <p>Deleting any of these important data will cause permanent loss of all the data,
                                Once deleted cannot be undone so please be carefull and think before Deleting any of the Branches from the list.
                                All the Branch related data will get deleted.</p>
                            <hr />
                            <p class="mb-0">Deleted Data cannot be recovered....!!. Please confirm before deleting</p>
                        </div>

                    </div>
                </div>
                {/* <div className="d-flex justify-content-around">
                        <div className=""></div>
                    </div> */}


                {/* DELETE MODAL */}

                <div class="modal fade" id="exampleModal" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered ">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">Please Confirm before Deleting</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body text-muted">
                                <span className='fs-5 fw-bold'>{delData.name} </span> branch will get permamnently deleted and all the data related to this {delData.name} branch
                                along with students and all batches will get deleted. Are you Sure?
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" onClick={() => delte()}>Confirm</button>
                            </div>
                        </div>
                    </div>
                </div>
                {/* DELETE MODAL */}



                {/* EDIT MODAL */}
                <div class="modal fade" id="editModel" aria-labelledby="editModelLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered ">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="editModelLabel">Edit Branch</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form>

                                    <label for="recipient-name" class="col-form-label">Branch:</label>
                                    <div class="mb-3 d-flex justify-content-center">
                                        <input type="text" class="form-control w-50" onChange={(e) => onChange(e)} name='name' id="recipient-name" value={name} />
                                    </div>
                                </form>

                                <button type="button" class="btn btn-primary mx-2" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" onClick={() => editConfirm()}>Confirm</button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* EDIT MODAL */}
                <div className="d-flex justify-content-center">
                    <table className="table table-hover" style={{ width: "85%" }}>
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Name</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            {branchs.map((value, index) => {
                                return (

                                    <tr key={index}>
                                        <th scope="row">{index + 1}</th>
                                        <td>{value.name}</td>
                                        <td className='d-flex justify-content-center'>
                                            <button type='button' className='btn btn-success mx-2' onClick={() => edit(value)} data-bs-toggle="modal" data-bs-target="#editModel">EDIT</button>
                                            <button type='button' className='btn btn-danger' onClick={() => delfun(value)} data-bs-toggle="modal" data-bs-target="#exampleModal">Delete</button>
                                        </td>
                                    </tr>
                                )
                            })}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    )
}


const mapStateToProps = state => ({
    adminData: state.auth.adminData,
    adminDltResponse: state.auth.adminDltResponse,
    adminEditResponse: state.auth.adminEditResponse,
});



export default connect(mapStateToProps, { deleteBranch, editBranch })(EditBranch);


import React, { useState } from 'react';
import { connect } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { editRegulation, deleteRegulation } from "../../actions/visua";

const EditReg = ({ adminData, deleteRegulation, editRegulation, adminDltResponse, adminEditResponse }) => {

    const regs = adminData.data.reg;
    const [delData, setdelData] = useState({
        id: "",
        name: "",
        year: "",
        grades: ""
    })

    // const {id,name,year,grades} = delData;
    const [formdata, setFormData] = useState({
        name: "",
        year: "",
    });

    const { name, year } = formdata;

    const onChange = e => setFormData({ ...formdata, [e.target.name]: e.target.value });

    const [err, seterr] = useState({
        del: false,
        msg: ""
    });

    let history = useNavigate();


    const edit = (value) => {
        setdelData(value);
        // console.log(value);
        setInputList(value.grades);
        setFormData({
            name: value.name,
            year: value.year,
        })
        // setFormData({name:value.name});
    }

    const delte = () => {
        const data = new FormData();
        data.append('reg', delData.id);
        // console.log(delData)
        deleteRegulation(data).then(
            () => {
                if (adminDltResponse.reg.del === "error") {
                    seterr(adminDltResponse.reg);
                }
                else if (adminDltResponse.reg.del === "success") {
                    history("/");
                }
            }
        );
    }

    const editConfirm = () => {
        const data = new FormData();
        data.append('id', delData.id);
        data.append('name', name);
        data.append('year', year);
        data.append('grade', JSON.stringify(inputList));
        editRegulation(data).then(
            () => {
                if (adminEditResponse.reg.del === "error") {
                    seterr(adminEditResponse.reg);
                } else if (adminEditResponse.reg.del === "success") {
                    history("/");
                }
            }
        )
        // console.log(name);
    }

    const delfun = (value) => {
        setdelData(value);
    }


    const [inputList, setInputList] = useState([{ grade: "", value: "" }]);

    // const onChange = e => setFormData({ ...formdata, [e.target.name]: e.target.value});


    // // handle input change
    const handleInputChange = (e, index) => {
        const { name, value } = e.target;
        const list = [...inputList];
        list[index][name] = value;
        setInputList(list);
    };

    // handle click event of the Remove button
    const handleRemoveClick = index => {
        const list = [...inputList];
        list.splice(index, 1);
        setInputList(list);
    };

    // handle click event of the Add button
    const handleAddClick = () => {
        setInputList([...inputList, { grade: "", value: "" }]);
    };
    var payload = {};
    const onSubmit = (e) => {
        e.preventDefault();
        const data = new FormData();
        // let gg = {data:inputList};
        // console.log(gg);
        data.append('reg', name);
        data.append('year', year);
        data.append('grade', JSON.stringify(inputList));

        // postAddReg(data).then((res)=>{
        //     console.log("[AddReg]"+JSON.stringify(JSON.parse(localStorage.getItem("addreg"))));
        //     console.log("[AddReg]"+JSON.parse(localStorage.getItem("addreg")).code);
        //     payload=JSON.parse(localStorage.getItem("addreg"));

        //     // if(JSON.parse(localStorage.getItem("addbrach")).msg === "Error"){
        //     setAlert(<Alert type={payload.msg.toLowerCase()} msg={payload.message.toLowerCase()} bb={payload.code} onclick={setAlert} />)

        // }).catch( (err) =>{

        //     console.log(err);
        // }
        // );
        // console.log(b)
    }


    return (
        <div className="d-flex justify-content-center">
            <div className='text-center my-5 w-100' >
                <p className='fw-bolder fs-2 mt-2'>Edit  Reg Details</p>
                <div className=" d-flex justify-content-center w-100 text-center mb-4">
                    {err.del === "error" ?
                        <div class="alert alert-warning alert-dismissible d-flex align-items-center fade w-75 show" role="alert">
                            <strong>Alert  ..!</strong>
                            {err.msg}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                        : ""
                    }
                    <div class="alert alert-danger d-flex align-items-center w-75" role="alert">
                        <div>
                            <h4 class="alert-heading">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
                                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                                </svg>Warning!</h4>
                            <p>Deleting any of these important data will cause permanent loss of all the data,
                                Once deleted cannot be undone so please be carefull and think before Deleting any of the Branches from the list.
                                All the Branch related data will get deleted.</p>
                            <hr />
                            <p class="mb-0">Deleted Data cannot be recovered....!!. Please confirm before deleting</p>
                        </div>

                    </div>
                </div>

                {/* DELETE MODAL */}

                <div class="modal fade" id="exampleModal" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered ">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">Please Confirm before Deleting</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body text-muted">
                                <span className='fs-5 fw-bold'>{delData.name} </span> Regulation will get permamnently deleted and all the data related to this {delData.name} Regulation
                                along with students and all batches will get deleted. Are you Sure?
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" onClick={() => delte()}>Confirm</button>
                            </div>
                        </div>
                    </div>
                </div>
                {/* DELETE MODAL */}



                {/* EDIT MODAL */}
                <div class="modal fade" id="editModel" aria-labelledby="editModelLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered ">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="editModelLabel">Edit Branch</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form className='text-center my-2' >
                                    <div className="w-100 d-flex justify-content-center">
                                        <div className="">
                                            <input type="text" name="name" required placeholder='Regulation Name' onChange={(e) => onChange(e)} value={name} className='form-control my-3' />
                                            <input type="text" name="year" required placeholder='year' onChange={(e) => onChange(e)} value={year} className='form-control mb-4' />
                                        </div>
                                    </div>

                                    <div className="d-flex justify-content-center">
                                        <div className="">

                                            {inputList.map((x, i) => {
                                                return (
                                                    <div key={i}>



                                                        <div className="my-2 w-100 px-2 d-flex justify-content-center ">
                                                            <div className="d-flex justify-content-center w-75">
                                                                <div className="d-flex w-60 grades pl-4">
                                                                    <input type="text" required placeholder={x.grade ? x.grade : "Grade"} value={x.grade} className='rounded-start grade1' name="grade" onChange={e => handleInputChange(e, i)} />
                                                                    <input type="text" required placeholder={x.value ? x.value : "value"} value={x.value} name="value" className=' rounded-end grade1' onChange={e => handleInputChange(e, i)} />
                                                                </div>

                                                                <div className="mx-2">
                                                                    {inputList.length !== 1 && <button className='btn btn-danger' onClick={() => handleRemoveClick(i)}>Delete</button>}
                                                                </div>
                                                                <div className="mx-2 ">
                                                                    {inputList.length - 1 === i && <button className='btn btn-primary ' onClick={handleAddClick}>Add</button>}
                                                                </div>

                                                            </div>

                                                        </div>

                                                    </div>

                                                );
                                            })}
                                        </div>
                                    </div>
                                </form>

                                <button type="button" class="btn btn-primary mx-2" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" onClick={() => editConfirm()}>Confirm</button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* EDIT MODAL */}

                {/* <div className="d-flex justify-content-around">
                        <div className=""></div>
                    </div> */}
                <div className="d-flex justify-content-center">
                    <table className="table table-hover" style={{ width: "85%" }}>
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Name</th>
                                <th scope="col">Year</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody>

                            {regs.map((value, index) => {
                                return (
                                    <tr key={index}>
                                        <th scope="row">{index+1}</th>
                                        <td>{value.name}</td>
                                        <td>{value.year}</td>
                                        <td className='d-flex justify-content-center'>
                                            <button className='btn btn-success mx-2' data-bs-toggle="modal" onClick={() => edit(value)} data-bs-target="#editModel">EDIT</button>
                                            <button className='btn btn-danger' data-bs-toggle="modal" onClick={() => delfun(value)} data-bs-target="#exampleModal">Delete</button>
                                        </td>
                                    </tr>
                                )
                            })}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    )
}


const mapStateToProps = state => ({
    adminData: state.auth.adminData,
    adminDltResponse: state.auth.adminDltResponse,
    adminEditResponse: state.auth.adminEditResponse,
});


export default connect(mapStateToProps, { deleteRegulation, editRegulation })(EditReg);


import React, { useState } from 'react';
import { connect } from 'react-redux';
import { fetchdatafun2, fetchdatafun3, postFilterData, viewSemDetails } from "../../actions/visua";
import 'react-toastify/dist/ReactToastify.css';

const EditSem = ({ adminData, fetchdata1, fetchdata2, fetchdata3, filteredData, fetchdatafun2, fetchdatafun3, postFilterData, viewSemDetails, viewSemDetail }) => {


    const branchData = adminData.data.branch;
    const regData = adminData.data.reg;
    const batchData = fetchdata2["batch"];
    const sectData = fetchdata3["section"];
    // const semData = fetchdata3["sems"];
    const regs = adminData.data.reg;


    const [semData,setSemData] = useState(false);

    
    const [showTable, setshowTable] = useState(false);



    const [formData, setFormData] = useState({
        branch: '',
        reg: '',
        batch: '',
        sems: '',
        cgpa: '',
        backlog: '',
        sect: '',
    });


    const [alert, setAlert] = useState('');
    const { branch, reg, batch, sems, cgpa, backlog, sect } = formData;


    const onChange = e => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
        setSemData(false);
        console.log(semData);
    }

    const onChangeReg = e => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
        fetchdatafun2(e.target.value);
        setSemData(false);
        console.log(semData);
    }

    const onChangeBatch = e => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
        setSemData(false);
        console.log(semData);
        // console.log(branch,reg,batch);
        // console.log(e.target.value,e.target.name);
        // fetchdatafun3(branch, reg, e.target.value);
        // console.log(branchData,regData,batchData);
    }
    const SemSub = () =>{
        console.log(branch, reg, batch);
        console.log(semData);
        fetchdatafun3(branch, reg, batch).then(()=>{
            setSemData(fetchdata3["sems"]);
            console.log(semData);
        })
        
        
    }
    console.log(semData);


    const onChangeMul = e => {
        let sems = Array.from(e.target.selectedOptions, option => option.value);
        // console.log(sems);
        // console.log(e.target.selectedOptions);
        setFormData({ ...formData, [e.target.name]: sems });
    }


    const onSubmit = (event) => {
        event.preventDefault();

        // console.log(branch,reg,batch,sems,cgpa,backlog,sectData);

        // setshowTable(true);

        const data = new FormData();
        data.append('reg', reg);
        data.append('branch', branch);
        data.append('batch', batch);
        data.append('sems', sems);
        data.append('cgpa', cgpa);
        data.append('backlog', backlog);
        data.append('sect', sect);

        console.log(reg, branch, batch, sems, cgpa, backlog, sect)
        postFilterData(data).then(() => {

            setshowTable(true)
        }
        )

    }







    const [delData, setdelData] = useState({
        id: "",
        name: "",
    });

    const [view, setView] = useState({
        id: "",
        name: "",
    })
    const { id, name } = view;

    const [err, seterr] = useState({
        del: false,
        msg: ""
    });

    const [table, settable] = useState({
        isdata: false,
        data: {}
    });


    // let history = useNavigate();


    const edit = (value) => {
        setdelData(value);
        // setFormData({ name: value.name, reg: value.reg });
        console.log(value);

        const data = new FormData();
        data.append('id', value.id);
        viewSemDetails(data).then(
            () => {
                console.log(viewSemDetail.data);
                if (viewSemDetail.data.msg === "success") {
                    // console.log(viewSemDetail.data.data);
                    settable({
                        isdata: true,
                        data: viewSemDetail.data.data
                    })
                }
            }
        ).catch(e => {
            console.log(e);
        });
    }

    const delte = () => {
        const data = new FormData();
        data.append('batch', delData.id);
        // deleteBatch(data).then(
        //     () => {
        //         if (adminDltResponse.batch.del === "error") {
        //             seterr(adminDltResponse.batch);
        //         }
        //         else if (adminDltResponse.batch.del === "success") {
        //             history("/");
        //         }
        //     }
        // );
    }

    const editConfirm = () => {
        const data = new FormData();
        data.append('id', delData.id);
        data.append('name', name);
        data.append('reg', reg);
        // editBatch(data).then(
        //     () => {
        //         if (adminEditResponse.batch.del === "error") {
        //             seterr(adminEditResponse.batch);
        //         } else if (adminEditResponse.batch.del === "success") {
        //             history("/");
        //         }
        //     }
        // )
    }

    const delfun = (value) => {
        setdelData(value);
    }



    return (
        <div className='h-100'>
            <div className="">
                <form className='text-center my-5' onSubmit={(e) => onSubmit(e)} >
                    <p className='fw-bolder fs-2 my-2'>EDIT SEMESTER</p>

                    {/* DELETE MODAL */}

                    <div class="modal fade" id="exampleModal" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered ">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="exampleModalLabel">Please Confirm before Deleting</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body text-muted">
                                    <span className='fs-5 fw-bold'> {delData.name}</span> Semester will get permamnently deleted and all the data related to this {delData.name}  Semester
                                    will get deleted. Are you Sure?
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" onClick={() => delte()}>Confirm</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    {/* DELETE MODAL */}

                    {/* EDIT MODAL */}
                    <div class="modal fade" id="editModel" aria-labelledby="editModelLabel" aria-hidden="true">
                        <div class="modal-dialog  modal-dialog-scrollable modal-xl">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="editModelLabel">View Semester Details</h5>
                                    <button type="button" onClick={() => { settable({ isdata: false, data: {} }) }} class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">

                                    <p class=" my-4 fw-bold fs-3">Semester Details :</p>
                                    {
                                        table.isdata ?
                                            table.data.map((sub, index) => {
                                                return (
                                                    <div class="mb-3 mx-4" key={index}>
                                                        <div className="">
                                                            <div className="fw-normal fs-4 text-start">
                                                                Subject Name : {sub.name}   <br />
                                                                Code : {sub.code}
                                                            </div>
                                                            <table className="table table-hover" style={{ width: "95%" }}>
                                                                <thead>
                                                                    <tr>
                                                                        <th scope="col">#</th>
                                                                        <th scope="col">Roll</th>
                                                                        <th scope="col">Student Name</th>
                                                                        <th scope="col">Attendance</th>
                                                                        <th scope="col">Credit</th>
                                                                        <th scope="col">Grade</th>
                                                                        <th scope="col">CGPA</th>
                                                                        <th scope="col">Result</th>
                                                                        <th scope="col">Action</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    {sub.data.map((value, index2) => {
                                                                        return (
                                                                            <tr>
                                                                                <th scope="row">{index2 + 1}</th>
                                                                                <td>{value.roll}</td>
                                                                                <td>{value.name}</td>
                                                                                <td>{value.attendance}</td>
                                                                                <td>{value.credit}</td>
                                                                                <td>{value.grade}</td>
                                                                                <td>{value.cgpa}</td>
                                                                                <td>{value.result ? "FAIL" : "PASS"}</td>
                                                                                <td className='d-flex justify-content-center'>
                                                                                    <button type='button' className='btn btn-primary mx-2' >View</button>
                                                                                    <button type='button' className='btn btn-danger'>Delete</button>
                                                                                </td>
                                                                            </tr>
                                                                        )
                                                                    })}
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                    </div>
                                                )
                                            })
                                            : "Loading Data"
                                    }
                                    {/* 
                                    <button type="button" class="btn btn-primary mx-2" data-bs-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" onClick={() => editConfirm()}>Confirm</button> */}
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* END EDIT MODAL */}


                    <div className=" w-100 my-4 text-center">
                        <form onSubmit={onSubmit}>
                            <div className="mx-4">
                                <div className="d-flex align-items-center justify-content-center w-100 mx-4 my-4">
                                    <div className="w-50 d-flex align-items-center">
                                        <h5 >Branch: </h5>
                                        <select name="branch" className="form-control mx-2 w-75" value={branch} onChange={e => onChange(e)} required>
                                            <option value="-">Select</option>
                                            {branchData ?
                                                branchData.map((value, index) => {
                                                    return <option value={value.id} key={index}>{value.name}</option>
                                                })
                                                :
                                                <option value="-">No Data Available</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div className="d-flex align-items-center justify-content-center w-100 mx-4 my-4">
                                    <div className="w-50 d-flex align-items-center">
                                        <h5 >Regulation: </h5>
                                        <select name="reg" className="form-control mx-2 w-75" value={reg} onChange={e => onChangeReg(e)} required>
                                            <option value="-">Select</option>
                                            {regData ?
                                                regData.map((value, index) => {
                                                    return <option value={value.id} key={index}>{value.name}</option>
                                                })
                                                :
                                                <option value="-">No Data Available</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div className="d-flex align-items-center justify-content-center w-100 mx-4 my-4">
                                    <div className="w-50 d-flex align-items-center">
                                        <h5 >Batch: </h5>
                                        <select name="batch" className="form-control mx-2 w-75" value={batch} onChange={e => onChangeBatch(e)} required>
                                            <option value="-">Select</option>
                                            {batchData ?
                                                batchData.map((value, index) => {
                                                    return <option value={value.id} key={index}>{value.name}</option>
                                                })
                                                :
                                                <option value="-">No Data Available</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div className="">
                                    <button type="button" onClick={SemSub} className='btn btn-primary'> Submit </button>
                                </div>
                            </div>
                            <div className="mt-5 mx-5 text fs-4 fw-bolder">
                                List of semester Available in the above Batch details Selected
                            </div>
                            {semData ?
                                <div className="d-flex justify-content-center">
                                    <table className="table table-hover" style={{ width: "85%" }}>
                                        <thead>
                                            <tr>
                                                <th scope="col">#</th>
                                                <th scope="col">Semesters Name</th>
                                                <th scope="col">Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {semData.map((value, index) => {
                                                return (

                                                    <tr key={index}>
                                                        {value.id !== "all" ?
                                                            <>
                                                                <th scope="row">{index}</th>
                                                                <td>{value.name} - Semester</td>
                                                                <td className='d-flex justify-content-center'>
                                                                    <button type='button' className='btn btn-primary mx-2' onClick={() => edit(value)} data-bs-toggle="modal" data-bs-target="#editModel">View</button>
                                                                    <button type='button' className='btn btn-danger' onClick={() => delfun(value)} data-bs-toggle="modal" data-bs-target="#exampleModal">Delete</button>
                                                                </td>
                                                            </>
                                                            :
                                                            ""
                                                        }

                                                    </tr>
                                                )
                                            })
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                : ""
                            }
                        </form>
                    </div>


                </form>
            </div>
            {/* <ToastContainer/> */}
        </div>
    )

}

const mapStateToProps = state => ({
    adminData: state.auth.adminData,
    fetchdata2: state.auth.fetchdata2,
    fetchdata3: state.auth.fetchdata3,
    filteredData: state.auth.filteredData,
    viewSemDetail: state.auth.viewSemDetail,
});



export default connect(mapStateToProps, { fetchdatafun2, fetchdatafun3, postFilterData, viewSemDetails })(EditSem);


import React, { useEffect, useState } from 'react';
import { connect } from 'react-redux';
import { checkAuthenticated, load_user } from '../../actions/auth';
import { getAllAdminData,fetchdata1 } from '../../actions/visua';
import Sidebar from '../../components/sidebar/Sidebar';
import StudentSideBar from '../../components/sidebar/StudentSideBar';
import Topbar from '../../components/topbar/Topbar';
import AddBatch from '../AddData/AddBatch';
import AddBranch from '../AddData/AddBranch';
import AddDataMainPage from '../AddData/AddDataMainPage';
import AddReg from '../AddData/AddReg';
import EditBatch from '../AddData/EditBatch';
import EditBranch from '../AddData/EditBranch';
import EditReg from '../AddData/EditReg';
import EditSem from '../AddData/EditSem';

const AdminDashboard = ({isAuthenticated,checkAuthenticated,load_user,getAllAdminData}) => {
 

    useEffect(() => {
        checkAuthenticated();
        load_user();
        getAllAdminData();
    }, []);

    const [page,setPage] = useState("addBranch");

    const pages = {"addBranch":<AddBranch/>,"addBatch":<AddBatch/>,"addReg":<AddReg/>,"editBranch":<EditBranch/>,"editReg":<EditReg/>,"editBatch":<EditBatch/>,"editSem":<EditSem/>}
    
    const [sidebar, setsidebar] = useState(true);

  return (
    <div>
        <Topbar />
        <div className="container-1">
            <StudentSideBar tog={sidebar} selected={setPage} fetchdata1={fetchdata1}/>
            {/* <Home/> */}
            <AddDataMainPage   tog={setsidebar} sidebar={sidebar} pagestoShow={pages[page]} pp={page} />
                            
            
        </div>

    </div>
  )
}

const mapsStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated
})


export default connect(mapsStateToProps,{checkAuthenticated,load_user,getAllAdminData})(AdminDashboard);


import React, {useState} from 'react';
import { Link, Navigate } from 'react-router-dom';
import {connect} from "react-redux";
import { verify } from '../../actions/auth';
import "./loginTEST.css"

const Activate = ({verify, match}) => {
    const [verified, setVerified] = useState(false);
    const verify_account = e => {
        const uid = match.params.uid;
        const token = match.params.token;
        verify(uid,token);
        setVerified(true);
        
    }

    if (verified){
        // const nav = useNavigate();
        // nav("/")
        return <Navigate to="/" />
    }
    return (
        <div>
            <section className="pt-5 pb-5 mt-0 align-items-center d-flex bg-dark ll" >
                <div className="container-fluid">
                <div className="row  justify-content-center align-items-center d-flex-row text-center h-100">
                    <div className="col-12 col-md-4 col-lg-3   h-50 ">
                    <div className="card shadow">
                        <div className="card-body mx-auto">
                        <h4 className="card-title mt-3 text-center">Verify Your Account: </h4>
                        <br /><br />
                        <button
                            onClick={verify_account}
                            style={{marginTop: '50px'}}
                            type='button'
                            className='btn btn-primary'
                        >Verify</button>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </section>
        </div>
    );
}





export default connect(null, {verify})(Activate);

import React, {useState} from 'react';
import { Link, Redirect } from 'react-router-dom';
import {connect} from "react-redux";
import { login } from '../../actions/auth';
import "../../../node_modules/bootstrap/dist/css/bootstrap.min.css";

const Login = ({login, isAuthenticated}) => {
    const [formData, setFormData] = useState({
        email:'',
        password:''
    });

    const {email, password} = formData;
    
    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value});


    const onSubmit = e => {
        e.preventDefault();
        login(email,password);
    }

    if (isAuthenticated){
        return <Redirect to="/" />
    }

    return (
        <div className="container mt-5">
            <h1>Sign In</h1>
            <p>Sign into your Account</p>
            <form onSubmit={e => onSubmit(e)}>
                <div className="form-group">
                    <input type="email" 
                    className='form-control' placeholder='Email' name='email'
                    value={email}
                    
                    onChange={e => onChange(e)}
                    required
                    />
                    <input type="password" 
                    className='form-control' placeholder='Password' name='password'
                    value={password}
                    minLength='6'
                    
                    onChange={e => onChange(e)}
                    required
                    />
                </div>

                <button className='btn btn-primary' type='submit'>Login</button>
            </form>
            <p className="mt-3">
                Dont have an account? <Link to="/signup" >Sign Up</Link>
            </p>
            <p className='mt-3'>
                Forgot your Password? <Link to="/reset-password">Reset Password</Link>
            </p>
        </div>
    );
}


const mapStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated
});




export default connect(mapStateToProps, {login})(Login);

import React, {useState} from 'react';
import { Link, Navigate, useNavigate } from 'react-router-dom';
import {connect} from "react-redux";
import { signup } from '../../actions/auth';
import "./loginTEST.css"

const Signup = ({signup, isAuthenticated}) => {
    const [accountCreated, setAccountCreated] = useState(false);
    const [formData, setFormData] = useState({
        name:'',
        first_name: '',
        last_name:'',
        email:'',
        password:'',
        re_password:'',

    });

    const {email, password, first_name, last_name, name, re_password} = formData;
    
    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value});


    const onSubmit = e => {
        e.preventDefault();
        if(password === re_password){
            signup( name,first_name, last_name,email, password, re_password);
            setAccountCreated(true);
        }
    }

    if (isAuthenticated){
        // const nav= useNavigate();
        // nav("/");
        return <Navigate to="/" />
    }
    if (accountCreated){
        return <Navigate to="/login" />
    }

    return (
        <div>
            <section className="pt-5 pb-5 mt-0 align-items-center d-flex bg-dark ll" >
                <div className="container-fluid">
                <div className="row  justify-content-center align-items-center d-flex-row text-center h-100">
                    <div className="col-12 col-md-4 col-lg-3   h-50 ">
                    <div className="card shadow">
                        <div className="card-body mx-auto">
                        <h4 className="card-title mt-3 text-center">Sign Up </h4>
                        <br /><br />
                        <form onSubmit={e => onSubmit(e)}>
                            <div className="form-group input-group mb-4">
                                <input type="text" 
                                    className='form-control' placeholder='UserName' name='name'
                                    value={name}
                                    
                                    onChange={e => onChange(e)}
                                    required
                                />
                            </div>
                            <div className="form-group input-group mb-4">
                                <input type="text" 
                                    className='form-control' placeholder='First Name' name='first_name'
                                    value={first_name}
                                    
                                    onChange={e => onChange(e)}
                                    required
                                />
                            </div>
                            <div className="form-group input-group mb-4">
                                <input type="text" 
                                    className='form-control' placeholder='Last Name' name='last_name'
                                    value={last_name}
                                    
                                    onChange={e => onChange(e)}
                                    required
                                />
                            </div>
                            <div className="form-group input-group mb-4">
                                <input type="email" 
                                    className='form-control' placeholder='Email' name='email'
                                    value={email}
                                    
                                    onChange={e => onChange(e)}
                                    required
                                />
                            </div>
                            <div className="form-group input-group">
                                <input type="password" 
                                    className='form-control' placeholder='Password' name='password'
                                    value={password}
                                    minLength='6'
                                    
                                    onChange={e => onChange(e)}
                                    required
                                />
                            </div>
                            <div className="form-group input-group">
                                <input type="password" 
                                    className='form-control' placeholder='Confirm Password' name='re_password'
                                    value={re_password}
                                    minLength='6'
                                    
                                    onChange={e => onChange(e)}
                                    required
                                />
                            </div>
                            <div className="form-group">
                            <button type="submit" className="btn btn-primary btn-block px-5 mt-3 mb-2">Sign Up</button>
                            </div>
                            <p className="text-center">Already have an account?
                            <Link to="/login">Login</Link>
                            </p>
                        </form>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </section>
        </div>
    );
}



const mapStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated
});



export default connect(mapStateToProps, {signup})(Signup);

import React,{useEffect, useState} from 'react';
import Topbar from "../../components/topbar/Topbar";
import Sidebar from "../../components/sidebar/Sidebar";
import { connect } from "react-redux";
import "./dashboard.css";
import { checkAuthenticated, load_user } from "../../actions/auth";
import {fetchSemData,fetchSubjSectAnalysys} from "../../actions/visua";
import AnalysisHome from '../home/AnalysisHome';
const AnalysisDashboard = (props) => {
    
    const [sidebar, setsidebar] = useState(true);
    console.log(window.location.href);
    console.log(window.location.pathname);


    useEffect(() => {
        props.checkAuthenticated();
        props.load_user();
        // props.fetchSemData();
    }, []);
    return (
        <div>
            <Topbar />
            <div className="container-1">

            <Sidebar tog={sidebar}/>
            <AnalysisHome tog={setsidebar} sidebar={sidebar}/>
            {props.children}
            
            </div>
        </div>
    );
}



const mapsStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated
})
export default connect(mapsStateToProps, {checkAuthenticated, load_user, fetchSemData,fetchSubjSectAnalysys })(AnalysisDashboard);


import React,{useEffect, useState} from 'react';
import Topbar from "../../components/topbar/Topbar";
import Sidebar from "../../components/sidebar/Sidebar";
import Home from "../home/Home";
import { connect } from "react-redux";
import "./dashboard.css";
import { checkAuthenticated, load_user } from "../../actions/auth";
import {fetchSemData,fetchSubjSectAnalysys} from "../../actions/visua";
// import Navbar from '../../components/navbar/Navbar';
// import DashboardNav from '../../components/navbar/DashboardNav';
const Dashboard = (props) => {

    const [sidebar, setsidebar] = useState(true);
    console.log(window.location.href);
    console.log(window.location.pathname);


    useEffect(() => {
        props.checkAuthenticated();
        props.load_user();
        // props.fetchSemData();
    }, []);
    return (
        <div>
            <Topbar />
            <div className="container-1">

            <Sidebar tog={sidebar}/>
            <Home tog={setsidebar} sidebar={sidebar} />
            {/* {props.children} */}
            
            </div>
        </div>
    );
}



const mapsStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated
})
export default connect(mapsStateToProps, {checkAuthenticated, load_user, fetchSemData,fetchSubjSectAnalysys })(Dashboard);


import React,{useEffect, useState} from 'react';
import Topbar from "../../components/topbar/Topbar";
import Sidebar from "../../components/sidebar/Sidebar";
import Home from "../home/Home";
import { connect } from "react-redux";
import "./dashboard.css";
import { checkAuthenticated, load_user } from "../../actions/auth";
import {fetchSemData,fetchSubjSectAnalysys,fetchRegulationData,postRegulationData,postFetchData} from "../../actions/visua";
import FetchMainPage from '../home/FetchMainPage';
// import Navbar from '../../components/navbar/Navbar';
// import DashboardNav from '../../components/navbar/DashboardNav';
const FetchDataDashboard = (props) => {

    
    const [sidebar, setsidebar] = useState(true); 

    useEffect(() => {
        props.checkAuthenticated();
        props.load_user();
        // props.fetchRegulationData();
        // props.fetchSemData();
    }, []);

    // console.log(props.RegulationData);   
    return (
        <div>
            <Topbar />
            <div className="container-1">
                <Sidebar tog={sidebar}/>
                {/* <Home/> */}
                <FetchMainPage tog={setsidebar} sidebar={sidebar} regData={props.RegulationData} fetchRegulationData={props.fetchRegulationData} 
                                postRegulationData={props.postRegulationData} checkFetchSem={props.checkFetchSem}
                                postFetchData={props.postFetchData} 
                                />
                                
                {props.children}
                
            </div>
        </div>
    );
}



const mapsStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated,
    RegulationData: state.auth.RegulationData,
    checkFetchSem: state.auth.checkFetchSem,
})
export default connect(mapsStateToProps, {checkAuthenticated, load_user, fetchSemData,fetchSubjSectAnalysys,fetchRegulationData,postRegulationData,postFetchData })(FetchDataDashboard);

import React,{useEffect, useState} from 'react';
import Topbar from "../../components/topbar/Topbar";
import Sidebar from "../../components/sidebar/Sidebar";
import Home from "../home/Home";
import { connect } from "react-redux";
import "./dashboard.css";
import { checkAuthenticated, load_user } from "../../actions/auth";
import {fetchSemData,fetchSubjSectAnalysys} from "../../actions/visua";
import FilterMainPage from '../home/FilterMainPage';
// import Navbar from '../../components/navbar/Navbar';
// import DashboardNav from '../../components/navbar/DashboardNav';
const FilterDashboard = (props) => {

    
    const [sidebar, setsidebar] = useState(true);

    useEffect(() => {
        props.checkAuthenticated();
        props.load_user();
        // props.fetchSemData();
    }, []);

    return (
        <div>
            <Topbar />
            <div className="container-1">

            <Sidebar tog={sidebar}/>
            {/* <Home/> */}
            <FilterMainPage  tog={setsidebar} sidebar={sidebar}/>
            {props.children}
            
            </div>
        </div>
    );
}



const mapsStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated
})
export default connect(mapsStateToProps, {checkAuthenticated, load_user, fetchSemData,fetchSubjSectAnalysys })(FilterDashboard);

import React,{useEffect, useState} from 'react';
import Topbar from "../../components/topbar/Topbar";
import Sidebar from "../../components/sidebar/Sidebar";
import Home from "../home/Home";
import { connect } from "react-redux";
import "./dashboard.css";
import { checkAuthenticated, load_user } from "../../actions/auth";
import {fetchSemData,fetchSubjSectAnalysys} from "../../actions/visua";
import AnalysisHome from '../home/AnalysisHome';
import { checkAuthenticated, load_user } from "../../actions/auth";
import {fetchSemData,fetchSubjSectAnalysys,fetchRegulationData,postRegulationData,postFetchData,fetchSemData,fetchSubjSectAnalysys} from "../../actions/visua";
import FilterMainPage from '../home/FilterMainPage';
import StudentMainPage from '../home/StudentMainPage';
// import Navbar from '../../components/navbar/Navbar';
// import DashboardNav from '../../components/navbar/DashboardNav';
const MainDashboard = (props) => {

    const [sidebar, setsidebar] = useState(true);


    useEffect(() => {
        props.checkAuthenticated();
        props.load_user();
        // props.fetchSemData();
    }, []);


    const main = () =>{
        if(window.location.pathname === "/"){
            return <Home tog={setsidebar} sidebar={sidebar} />
        }
        else if(window.location.pathname === "/analysis"){
            return <AnalysisHome tog={setsidebar} sidebar={sidebar}/>
        }
        else if(window.location.pathname === "/fetch"){
            return <FetchMainPage regData={props.RegulationData} fetchRegulationData={props.fetchRegulationData} 
                        postRegulationData={props.postRegulationData} checkFetchSem={props.checkFetchSem}
                        postFetchData={props.postFetchData} 
                    />
        }
        else if(window.location.pathname === "/filter"){
            return <FilterMainPage  />
        }
        else if(window.location.pathname === "/studentReport"){
            return <StudentMainPage />
        }
        else if(window.location.pathname === "/studentReport/:roll"){
            
        }
    }


    return (
        <div>
            <Topbar />
            <div className="container-1">

            <Sidebar tog={sidebar}/>
            <Home tog={setsidebar} sidebar={sidebar} />
            {/* {props.children} */}
            
            </div>
        </div>
    );
}



const mapsStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated,
    RegulationData: state.auth.RegulationData,
    checkFetchSem: state.auth.checkFetchSem,
})


export default connect(mapsStateToProps, {checkAuthenticated, load_user, fetchSemData,fetchSubjSectAnalysys,fetchRegulationData,postRegulationData,postFetchData  })(MainDashboard);



import React,{useEffect, useState} from 'react';
import Topbar from "../../components/topbar/Topbar";
import Sidebar from "../../components/sidebar/Sidebar";
import Home from "../home/Home";
import { connect } from "react-redux";
import "./dashboard.css";
import { checkAuthenticated, load_user } from "../../actions/auth";
import {fetchSemData,fetchSubjSectAnalysys} from "../../actions/visua";
// import StudentHome from '../home/StudentHome';
import StudentMainPage from '../home/StudentMainPage';
// import Navbar from '../../components/navbar/Navbar';
// import DashboardNav from '../../components/navbar/DashboardNav';
const StudentMainDashboard = (props) => {

    
    const [sidebar, setsidebar] = useState(true);

    useEffect(() => {
        props.checkAuthenticated();
        props.load_user();
        // props.fetchSemData();
    }, []);


    return (
        <div>
            <Topbar />
            <div className="container-1">
                <Sidebar tog={sidebar}/>

                <StudentMainPage tog={setsidebar} sidebar={sidebar} />
                {props.children}
                
            </div>
        </div>
    );
}



const mapsStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated
})
export default connect(mapsStateToProps, {checkAuthenticated, load_user, fetchSemData,fetchSubjSectAnalysys })(StudentMainDashboard);

import React,{useEffect, useState} from 'react';
import Topbar from "../../components/topbar/Topbar";
import Sidebar from "../../components/sidebar/Sidebar";
import Home from "../home/Home";
import { connect } from "react-redux";
import "./dashboard.css";
import { checkAuthenticated, load_user } from "../../actions/auth";
import {fetchSemData,fetchSubjSectAnalysys} from "../../actions/visua";
import StudentHome from '../home/StudentHome';
// import Navbar from '../../components/navbar/Navbar';
// import DashboardNav from '../../components/navbar/DashboardNav';
const StudentReportDashboard = (props) => {

    
    const [sidebar, setsidebar] = useState(true);

    useEffect(() => {
        props.checkAuthenticated();
        props.load_user();
        // props.fetchSemData();
    }, []);


    return (
        <div>
            <Topbar />
            <div className="container-1">
                <Sidebar tog={sidebar}/>
                {/* <Home/> */}

                <StudentHome tog={setsidebar} sidebar={sidebar} />
                {props.children}
                
            </div>
        </div>
    );
}



const mapsStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated
})
export default connect(mapsStateToProps, {checkAuthenticated, load_user, fetchSemData,fetchSubjSectAnalysys })(StudentReportDashboard);


import {connect} from "react-redux";
import { GetBackData, backupload } from '../../../actions/auth';
import React , {useState, Fragment} from 'react';
import { Navigate } from "react-router-dom";

const BackSem = (props) => {

    const [imagefile,setimagefile] = useState();
    const [formData, setFormData] = useState({
        reg:'',
        branch:'',
        batch:'',
        sem:''
    });

    const {sem,reg,branch,batch} = formData
    
    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value});

    const onSubmit = e => {
        e.preventDefault();
        const data  = new FormData();
        data.append('sem',sem);
        data.append('reg', reg);
        data.append('branch',branch);
        data.append('batch',batch);
        data.append('file',imagefile);
        props.backupload(data);
        <Navigate to="/" />
        // const nav = useNavigate();
        // nav("/");
    }
    
    const regdata = () =>{
        if (props.backdata){
            if (props.backdata.reg)
            {
            return <Fragment>
                {props.backdata.reg.map((value, index) => {
                    return  <option value={value.id} key={index}>{value.title}</option>;  
                })}
            </Fragment>
            }
        }
        else{
            return <Fragment>
                <option value="">none</option>
            </Fragment>
        }
    }

    const branchdata = () =>{
        if (props.backdata){
            if (props.backdata.branch)
            {
            return <Fragment>
                {props.backdata.branch.map((value, index) => {
                    return  <option value={value.id} key={index}>{value.name}</option>;  
                })}
            </Fragment>
            }
        }
        else{
            return <Fragment>
                <option value="">none</option>
            </Fragment>
        }
    }
    const batchdata = () =>{
        if (props.backdata){
            if (props.backdata.batch)
            {
            return <Fragment>
                {props.backdata.batch.map((value, index) => {
                    return  <option value={value.id} key={index}>{value.name} of batch {value.reg}</option>;  
                })}
            </Fragment>
            }
        }
        else{
            return <Fragment>
                <option value="">none</option>
            </Fragment>
        }
    }

    const semdata = () =>{
        if (props.backdata){
            if (props.backdata.sem)
            {
            return <Fragment>
                {props.backdata.sem.map((value, index) => {
                    return  <option value={value.id} key={index}>{value.name} - Batch: {value.batch} - Branch: {value.branch}</option>;  
                })}
            </Fragment>
            }
        }
        else{
            return <Fragment>
                <option value="">none</option>
            </Fragment>
        }
    }

    
    return (
        <div>
            <section className="pt-5 pb-5 mt-0 align-items-center d-flex bg-dark ll" >
                <div className="container-fluid">
                <div className="row  justify-content-center align-items-center d-flex-row text-center h-100">
                    <div className="col-12 col-md-4 col-lg-4   h-50 ">
                    <div className="card shadow">
                        <div className="card-body mx-auto">
                        <h4 className="card-title mt-3 text-center">Upload Semester Back-LOG/ Supply Data: </h4>
                        <br />
                        <form  className='text-start' onSubmit={e => onSubmit(e)}>
                            <div className="form-group mb-4">
                                <label htmlFor="reg">Select Regulation</label>
                                <select name="reg" id='reg' onChange={e => onChange(e)} className="form-control">
                                    <option value=""> ---    ----</option>
                                    {regdata()}
                                </select>
                            </div>
                            <div className="form-group mb-4">
                                <label htmlFor="branch">Select Branch</label>
                                <select name="branch" id='branch' onChange={e => onChange(e)} className="form-control">
                                    <option value=""> ----  ----</option>
                                    {branchdata()}
                                </select>
                            </div>
                            <div className="form-group mb-4">
                                <label htmlFor="batch">Select Batch</label>
                                <select name="batch" id='batch' onChange={e => onChange(e)} className="form-control">
                                        <option value="">----    ----</option>
                                        {batchdata()}
                                </select>
                            </div>
                            <div className="form-group  mb-4">
                                <label htmlFor="sem">Semester Name</label>
                                <select name="sem" id='sem' onChange={e => onChange(e)} className="form-control">
                                        <option value="">----    ----</option>
                                        {semdata()}
                                </select>
                            </div>
                            <div className="form-group mb-4">
                                <label htmlFor="file">Upload Pre-formatted Excel File</label>
                                <input type="file" name="file" id="file" onChange={(evt) => setimagefile(evt.target.files[0])}  className='form-control'/>
                            </div>
                            <div className="form-group d-flex justify-content-center">
                            <button type="submit" className="btn btn-primary btn-block px-5 mt-3 mb-2">Upload</button>
                            </div>
                        </form>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </section>
        </div>
    );
}


const mapStateToProps = state => ({
    backdata: state.auth.backdata
});



export default connect(mapStateToProps, { GetBackData, backupload })(BackSem);


import {connect} from "react-redux";
import { GetUploadData, semupload } from '../../../actions/auth';
import { fetchdatafun2 } from '../../../actions/visua';
import React , {useState, Fragment} from 'react';
import { Navigate } from "react-router-dom";



const Sem = (props) => {

    const [imagefile,setimagefile] = useState();
    const [formData, setFormData] = useState({
        name:'',
        reg:'',
        branch:'',
        batch:'',
    });



    const {name,reg,branch,batch} = formData
    
    // const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value});

    const onChange = e => {
        setFormData({ ...formData, [e.target.name]: e.target.value});
    }

    const onChangeReg = e =>{
        setFormData({ ...formData, [e.target.name]: e.target.value});
        props.fetchdatafun2(e.target.value);
    }

    const onChangeBatch = e =>{
        setFormData({ ...formData, [e.target.name]: e.target.value});
        // console.log(branch,reg,batch);
        // console.log(e.target.value,e.target.name);
        // fetchdatafun3(branch,reg,e.target.value);
        // console.log(branchData,regData,batchData);
    }

    const onSubmit = e => {
        e.preventDefault();
        const data  = new FormData();
        data.append('name',name);
        data.append('reg', reg);
        data.append('branch',branch);
        data.append('batch',batch);
        data.append('file',imagefile);
        props.semupload(data);
        // const nav = useNavigate();
        // nav("/");
        <Navigate to="/" />
        name="";
        reg="";
        branch="";
        batch="";

    }

    
    const batchData = props.fetchdata2["batch"];
    
    const regdata = () =>{
        if (props.updata){
            if (props.updata.reg)
            {
            return <Fragment>
                {props.updata.reg.map((value, index) => {
                    return  <option value={value.id} key={index}>{value.title}</option>;  
                })}
            </Fragment>
            }
        }
        else{
            return <Fragment>
                <option value="">none</option>
            </Fragment>
        }
    }

    const branchdata = () =>{
        if (props.updata){
            if (props.updata.branch)
            {
            return <Fragment>
                {props.updata.branch.map((value, index) => {
                    return  <option value={value.id} key={index}>{value.name}</option>;  
                })}
            </Fragment>
            }
        }
        else{
            return <Fragment>
                <option value="">none</option>
            </Fragment>
        }
    }
    const batchdata = () =>{
        if (props.updata){
            if (props.updata.batch)
            {
            return <Fragment>
                {props.updata.batch.map((value, index) => {
                    return  <option value={value.id} key={index}>{value.name} of batch {value.reg}</option>;  
                })}
            </Fragment>
            }
        }
        else{
            return <Fragment>
                <option value="">none</option>
            </Fragment>
        }
    }

    
    return (
        <div>
            <section className="pt-5 pb-5 mt-0 align-items-center d-flex bg-dark ll" >
                <div className="container-fluid">
                <div className="row  justify-content-center align-items-center d-flex-row text-center h-100">
                    <div className="col-12 col-md-4 col-lg-4   h-50 ">
                    <div className="card shadow">
                        <div className="card-body mx-auto">
                        <h4 className="card-title mt-3 text-center">Upload Semester Data: </h4>
                        <br />
                        <form  className='text-start' onSubmit={e => onSubmit(e)}>
                            <div className="form-group  mb-4">
                                <label htmlFor="name">Semester Name</label>
                                {/* <input type="text" 
                                    className='form-control' id='name' onChange={e => onChange(e)} placeholder='Enter Semester Name' name='name'
                                    required
                                /> */}

                                <select name="name" id='name' onChange={e => onChange(e)} className="form-control" required>
                                    <option value="1">I Semester</option>
                                    <option value="2">II Semester</option>
                                    <option value="3">III Semester</option>
                                    <option value="4">IV Semester</option>
                                    <option value="5">V Semester</option>
                                    <option value="6">VI Semester</option>
                                    <option value="7">VII Semester</option>
                                    <option value="8">VIII Semester</option>
                                </select>
                                
                            </div>
                            <div className="form-group mb-4">
                                <label htmlFor="reg">Select Regulation</label>
                                <select name="reg" id='reg' onChange={e => onChangeReg(e)} className="form-control">
                                    <option value=""> ---    ----</option>
                                    {regdata()}
                                    {/* { regData ?
                                        regData.map((value,index)=>{
                                            return <option value={value.id} key={index}>{value.name}</option>
                                        })
                                        :
                                        <option value="-">No Data Available</option>
                                    } */}
                                </select>
                            </div>
                            <div className="form-group mb-4">
                                <label htmlFor="branch">Select Branch</label>
                                <select name="branch" id='branch' onChange={e => onChange(e)} className="form-control">
                                    <option value=""> ----  ----</option>
                                    {branchdata()}
                                </select>
                            </div>
                            <div className="form-group mb-4">
                                <label htmlFor="batch">Select Batch</label>
                                <select name="batch" id='batch' onChange={e => onChangeBatch(e)} className="form-control">
                                        <option value="">----    ----</option>
                                        {/* {batchdata()} */}
                                        { batchData ?
                                            batchData.map((value,index)=>{
                                                return <option value={value.id} key={index}>{value.name}</option>
                                            })
                                            :
                                            <option value="-">No Data Available</option>
                                        }
                                </select>
                            </div>
                            <div className="form-group mb-4">
                                <label htmlFor="file">Upload Pre-formatted Excel File</label>
                                <input type="file" name="file" id="file" onChange={(evt) => setimagefile(evt.target.files[0])}  className='form-control'/>
                            </div>
                            <div className="form-group d-flex justify-content-center">
                            <button type="submit" className="btn btn-primary btn-block px-5 mt-3 mb-2">Upload</button>
                            </div>
                        </form>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </section>
        </div>
    );
}


const mapStateToProps = state => ({
    updata: state.auth.updata,
    // fetchdata1: state.auth.fetchdata1,
    fetchdata2: state.auth.fetchdata2,
});



export default connect(mapStateToProps, { GetUploadData, semupload, fetchdatafun2 })(Sem);


import {connect} from "react-redux";
import { GetBackData, studentup } from '../../../actions/auth';
import React , {useState, Fragment} from 'react';
import { Navigate } from "react-router-dom";

const StudentUp = (props) => {

    const [imagefile,setimagefile] = useState();
    const [formData, setFormData] = useState({
        reg:'',
        branch:'',
        batch:'',
    });

    

    const {reg,branch,batch} = formData
    
    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value});

    const onSubmit = e => {
        e.preventDefault();
        const data  = new FormData();
        data.append('reg', reg);
        data.append('branch',branch);
        data.append('batch',batch);
        data.append('file',imagefile);
        props.studentup(data);
        // const nav = useNavigate();
        // nav("/");
        <Navigate to="/" />
    }
    
    const regdata = () =>{
        if (props.backdata){
            if (props.backdata.reg)
            {
            return <Fragment>
                {props.backdata.reg.map((value, index) => {
                    return  <option value={value.id} key={index}>{value.title}</option>;  
                })}
            </Fragment>
            }
        }
        else{
            return <Fragment>
                <option value="">none</option>
            </Fragment>
        }
    }

    const branchdata = () =>{
        if (props.backdata){
            if (props.backdata.branch)
            {
            return <Fragment>
                {props.backdata.branch.map((value, index) => {
                    return  <option value={value.id} key={index}>{value.name}</option>;  
                })}
            </Fragment>
            }
        }
        else{
            return <Fragment>
                <option value="">none</option>
            </Fragment>
        }
    }
    const batchdata = () =>{
        if (props.backdata){
            if (props.backdata.batch)
            {
            return <Fragment>
                {props.backdata.batch.map((value, index) => {
                    return  <option value={value.id} key={index}>{value.name} of batch {value.reg}</option>;  
                })}
            </Fragment>
            }
        }
        else{
            return <Fragment>
                <option value="">none</option>
            </Fragment>
        }
    }

    
    return (
        <div>
            <section className="pt-5 pb-5 mt-0 align-items-center d-flex bg-dark ll" >
                <div className="container-fluid">
                <div className="row  justify-content-center align-items-center d-flex-row text-center h-100">
                    <div className="col-12 col-md-4 col-lg-4   h-50 ">
                    <div className="card shadow">
                        <div className="card-body mx-auto">
                        <h4 className="card-title mt-3 text-center">Upload Semester Back-LOG/ Supply Data: </h4>
                        <br />
                        <form  className='text-start' onSubmit={e => onSubmit(e)}>
                            <div className="form-group mb-4">
                                <label htmlFor="reg">Select Regulation</label>
                                <select name="reg" id='reg' onChange={e => onChange(e)} className="form-control">
                                    <option value=""> ---    ----</option>
                                    {regdata()}
                                </select>
                            </div>
                            <div className="form-group mb-4">
                                <label htmlFor="branch">Select Branch</label>
                                <select name="branch" id='branch' onChange={e => onChange(e)} className="form-control">
                                    <option value=""> ----  ----</option>
                                    {branchdata()}
                                </select>
                            </div>
                            <div className="form-group mb-4">
                                <label htmlFor="batch">Select Batch</label>
                                <select name="batch" id='batch' onChange={e => onChange(e)} className="form-control">
                                        <option value="">----    ----</option>
                                        {batchdata()}
                                </select>
                            </div>
                            <div className="form-group mb-4">
                                <label htmlFor="file">Upload Pre-formatted Excel File</label>
                                <input type="file" name="file" id="file" onChange={(evt) => setimagefile(evt.target.files[0])}  className='form-control'/>
                            </div>
                            <div className="form-group d-flex justify-content-center">
                            <button type="submit" className="btn btn-primary btn-block px-5 mt-3 mb-2">Upload</button>
                            </div>
                        </form>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </section>
        </div>
    );
}


const mapStateToProps = state => ({
    backdata: state.auth.backdata
});



export default connect(mapStateToProps, { GetBackData, studentup })(StudentUp);

import React, {useEffect} from 'react';
import Topbar from "../../components/topbar/Topbar";
// import "./upload.css";
import { connect } from "react-redux";
import { GetBackData } from '../../actions/auth';
import BackSem from './semdata/BackSem';
const BackUpSem = (props) => {

    useEffect(() => {
        props.GetBackData();
    }, []);
    
   
    return (
        <div>
            <Topbar />
            <div className="">
            <BackSem data={props.backdata}/>
            {props.children}
            </div>
        </div>
    );
}

const mapStateToProps = state => ({
    backdata: state.auth.backdata
});

export default connect(mapStateToProps, { GetBackData })(BackUpSem);

import React, {useEffect} from 'react';
import Topbar from "../../components/topbar/Topbar";
// import "./upload.css";
import { connect } from "react-redux";
import { GetBackData } from '../../actions/auth';
import StudentUp from './semdata/StudentUp';
const Student = (props) => {

    useEffect(() => {
        props.GetBackData();
    }, []);
    
   
    return (
        <div>
            <Topbar />
            <div className="">
            <StudentUp data={props.backdata}/>
            {props.children}
            </div>
        </div>
    );
}

const mapStateToProps = state => ({
    backdata: state.auth.backdata
});

export default connect(mapStateToProps, { GetBackData })(Student);

import React, {useEffect} from 'react';
import Topbar from "../../components/topbar/Topbar";
// import "./upload.css";
import { connect } from "react-redux";
import { GetUploadData } from '../../actions/auth';
import Sem from './semdata/Sem';
const UploadSem = (props) => {

    useEffect(() => {
        props.GetUploadData();
    }, []);
    
   
    return (
        <div>
            <Topbar />
            <div className="">
            <Sem data={props.updata}/>
            {props.children}
            </div>
        </div>
    );
}

const mapStateToProps = state => ({
    updata: state.auth.updata
});

export default connect(mapStateToProps, { GetUploadData })(UploadSem);

import React, { Fragment, useState } from 'react';
import FeaturedInfo from '../../components/featuredinfo/FeaturedInfo';
import "./home.css";
import SecWisePerfamanceChart from '../../components/SecWisePerfamanceChart/SecWisePerfamanceChart';
import { connect } from "react-redux";
import {fetchSemData,fetchRegulationData} from "../../actions/visua"
import Combo from '../../components/chart/Combo';
// import { Link } from 'react-router-dom';
import { Link, Navigate, useNavigate } from "react-router-dom";
import ErrorBoundary from "../error/ErrorBoundary";
import { FcDownload } from 'react-icons/fc';




const AnalysisHome = (props) => {
    let history = useNavigate();

    const tt = ()=>{
        props.tog(!props.sidebar);
        setfirst(!first);
    }


    const [first, setfirst] = useState(true);

    const cgpa = () =>{
        if (props.semVisData){
            if(props.semVisData.CGPA){
                return props.semVisData.CGPA
            }else{
                return {0:0,1:0,2:0,3:0,4:0}
            }
        }else{
            return {0:0,1:0,2:0,3:0,4:0}
        }
    }
    const back = () =>{
        if (props.semVisData){
            if(props.semVisData.Back_data){
                return props.semVisData.Back_data
            }else{
                return {0:0,1:0,2:0,3:0,4:0}
            }
        }else{
            return {0:0,1:0,2:0,3:0,4:0}
        }
    }

    const show = (fdata,cgpa_data,back_data) =>{
        if(props.semVisData){
            return <Fragment>
                    <FeaturedInfo data={fdata}/>
                    <Combo cgpa_data={cgpa_data} back_data={back_data}/>
                    <br /><br /><br /><br />
                    <ErrorBoundary>
                        <SecWisePerfamanceChart/>
                    </ErrorBoundary>
                </Fragment>
        }
        else{
            // history.push("/");
            // <Navigate to="/"/>  
            history("/");

            return <Fragment>
                        <ErrorBoundary>
                            <div className="container">
                                Couldn't Fetch Data Some thing Went Wrong ... !!
                            </div>
                        </ErrorBoundary>
                    </Fragment>
        }
    }

    const bread = () =>{
        if (props.semDetails){
            return <Fragment>
                        <li class="breadcrumb-item">{props.semDetails.branch}</li>
                        <li class="breadcrumb-item">{props.semDetails.reg}</li>
                        <li class="breadcrumb-item">{props.semDetails.batch}</li>
                        <li class="breadcrumb-item active" aria-current="page">{props.semDetails.name} Semester Analysis</li>
                    </Fragment>
        }
    }

    const print = ()=>{
        window.print()
    }

    return ( 
        <div className={first ? 'home' : 'home2'}>
            <div className="mx-3 my-3 d-flex justify-content-between">
                <div className="">
                    <button onClick={tt} class="navbar-toggler navbar-light bg-light px-2 py-1 rounded" type="button">
                        <span class="navbar-toggler-icon"></span>
                    </button> <span className='fw-light text-secondary mx-2'>Toggle Side bar</span>
                </div>
                {/* <p onClick={print} className="px-2 py-2  border" >download </p> */}

                <p onClick={print} class="btn btn-outline-dark" data-bs-toggle="tooltip" data-bs-placement="top" title="Select Layout as LandScape"><FcDownload/> Download </p>
                <div className="mx-3 ">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><Link to={"/"}>Home</Link></li>
                        {bread()}
                    </ol>
                </div>
            </div>
            {/* <FeaturedInfo data={props.semVisData}/>
            <Combo cgpa_data={cgpa()} back_data={back()} /> */}
            {/* <Combo */}
            {/* <Chart data={userData} title="User Analytics" grid datakey="Active User" /> */}
            {/* <div className="homeWidgets">
                <WidgetSm />
                <WidgetLg /> 
            </div> */}
            <ErrorBoundary>
                {show(props.semVisData,cgpa(),back())}
            </ErrorBoundary>
            {/* <div className="container-fluid d-flex justify-content-center mt-5">
                hi
            </div> */}

            {/* {show()} */}

        </div>
    );
}

const mapStateToProps = state => ({
    semVisData: state.auth.semVisData,
    semDetails:state.auth.semDetails
});

export default connect(mapStateToProps, { fetchSemData,fetchRegulationData })(AnalysisHome);

import React, { Component } from "react";
import { Link, NavLink } from "react-router-dom";
import Selected, { Select } from '../../components/FetchSelectCompos/select';




class FetchMainPage extends Component {
    constructor(props){ 
        super(props) 

    // console.log(this.props.regData);
    // console.log(this.props);

    this.state = {
        source: {
            reg: JSON.parse(localStorage.getItem('regulationData')).regData,
            batch:JSON.parse(localStorage.getItem('regulationData')).batchData,
            // reg:this.props.regData.regData,
            // batch:this.props.regData.batchData,
            sem: []
        },
        reg: [],
        batch: [],
        sem: [],

        regs:"",
        batchs:"",
        sems:"",
        branchs:"",
        alert:"",
        

        sourceMap: {
            reg: 0,
            batch: 1,
            sem: 2
        }
        };

        this.handleInputChange = this.handleInputChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
    }



    handleSubmit(event) {
        event.preventDefault();
        // console.log(this.state);
        this.props.postRegulationData(this.state.branchs,this.state.batchs,this.state.sems).then(()=>{
            
            // console.log(JSON.parse(localStorage.getItem('checkFetchSem')));
            this.setState({
                ["alert"]:<div className={`alert alert-${JSON.parse(localStorage.getItem("checkFetchSem")).code} alert-dismissible fade show d-flex justify-content-between`} role="alert">
                            <div className="">
                                <strong>{JSON.parse(localStorage.getItem("checkFetchSem")).code === "danger"? "Error " : JSON.parse(localStorage.getItem("checkFetchSem")).code } ..!!!</strong> {JSON.parse(localStorage.getItem("checkFetchSem")).msg}
                             </div>
                             <NavLink to={"/"} type="button" className="rounded p-2 bg-danger text-white close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                             </NavLink>
                         </div>
            })

            if (JSON.parse(localStorage.getItem("checkFetchSem")).code === "success"){
                this.props.postFetchData(this.state.branchs,this.state.batchs,this.state.sems);
            }
            // setTimeout(,5000);
            
        });
        
      }
    
    handleInputChange2 = (name,value)=> {
        // event.preventDefault();

        // console.log(e.target.name);
        // const target = event.target;
        this.setState({
            [name]: value,
        });

        // console.log(this.state);
    }

    handleInputChange(event) {
        event.preventDefault();
        const target = event.target;
        this.setState({
          [target.name]: target.value,
        });
      }
    
    componentDidMount = () => {
        // console.log("inside component")
        // this.props.fetchRegulationData().then(() =>
        //     this.setState({
        //         ["source"]:{
        //             ["reg"]:this.props.regData.regData,
        //             ["batch"]:this.props.regData.batchData,
        //         }
        //     })
        // )
        // console.log(this.state);
        // fetch( `${process.env.REACT_APP_API_URL}/get_fetch_data`,{
        //     method: "GET",
        // }).then(resp => resp.json())
        // // .then(resp => console.log(resp))
        // .then(res => this.setdataintoDAta(res))
        // .catch(error => console.log(error))

        const { reg } = this.state.source;
        this.setState({
            reg
        });

        
        // console.log(this.props.regData);

        
        // this.setData();

        // this.setState({
        //     source:{
        //         reg:this.props.regData.regData,
        //         batch:this.props.regData.batchData,
        //     }
        // });
    };

    handleChange = params => ev => {
        const target = ev.currentTarget;
        const { value } = target;
        const { current, next,name } = params;
        this.setNewValues({ value, current, next });
        this.handleInputChange2(name,value);
        // console.log(target,value);
    };

    setNewValues = ({ value, current, next }) => {
        const { source } = this.state;
        const data = source[next];

        if (data) {
            this.setState({
                [next]: data.filter(el => el[current] === Number(value))
            });
        }

        this.clearValues(next);
    };

    clearValues = next => {
        const { sourceMap } = this.state;
        const nextkey = sourceMap[next];

        Object.entries(sourceMap)
            .filter(([_, value]) => value > nextkey)
            .forEach(([key]) => {
                this.setState({
                    [key]: []
                });
            });
    };

    onSubmit = params => e =>{
        e.preventDefault();
        console.log(this.state.sourceMap);
    }

    tt = ()=>{
        this.props.tog(!this.props.sidebar);
    }

  
    render() {
        const { reg, batch, sem,alert } = this.state;
        // console.log(this.props.regData);
        return (
            <div className='home  main-container'>
                <div className="mx-3 my-3 d-flex justify-content-between">
                    <div className="" onClick={() => this.tt()}>
                        <button   class="navbar-toggler navbar-light bg-light px-2 py-1 rounded" type="button">
                            <span class="navbar-toggler-icon"></span>
                        </button> <span className='fw-light text-secondary mx-2'>Toggle Side bar</span>
                    </div>
                    <div className="mx-3 ">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><Link to={"/"}>Home</Link></li>
                            <li class="breadcrumb-item active" aria-current="page">Fetch Semester Result</li>
                        </ol>
                    </div>
                </div>
                <div className="ss h-100">
                    <div className="d-flex justify-content-center cardd">
                        <div className="card w-100 bg-white p-4">
                            <div className="text-center my-3">
                                <h3 className='card-title'>Fetch Student  Results Data Section</h3>
                                <hr style={{width:430,color:"rgb(45, 43, 43)"}}/>
                            </div>
                            <div className="w-100">
                                {this.state.alert}
                            </div>
                            <div className="d-flex justify-content-center text-center">
                                <form className='w-50'  onSubmit={this.handleSubmit}>
                                    <div className="form-group my-3 row">
                                        <label htmlFor="branch" className="col-sm-4 col-form-label">Branch</label>
                                        <div className="col-sm-8">
                                            <select name="branchs" onChange={this.handleInputChange}  className="form-control w-75" id="">
                                                <option value="">Select Value</option>
                                                <option value="CSE">CSE</option>
                                                <option value="ECE">ECE</option>
                                                <option value="EEE">EEE</option>
                                                <option value="CIVIL">CIVIL</option>
                                                <option value="IT">IT</option>
                                                <option value="MECH">MECH</option>
                                                <option value="CHEM">CHEM</option>
                                                <option value="CSD">CSD</option>
                                                <option value="CSAIML">CS-AI-ML</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div className="form-group my-3 row">
                                        <label htmlFor="regulation" className="col-sm-4 col-form-label">Regulation</label>
                                        <div className="col-sm-8">
                                            <Selected
                                                data={reg}
                                                action={this.handleChange}
                                                current="reg"
                                                next="batch"
                                                name="regs"
                                            />
                                        </div>
                                    </div>
                                    <div className="form-group my-3 row">
                                        <label htmlFor="batch" className="col-sm-4 col-form-label">Batch</label>
                                        <div className="col-sm-8">
                                            <Selected
                                                data={batch}
                                                action={this.handleChange}
                                                current="batch"
                                                next="sem"
                                                name="batchs"
                                            />
                                        </div>
                                    </div>
                                    <div className="form-group my-3 row">
                                        <label htmlFor="sem" className="col-sm-4 col-form-label">Semester</label>
                                        <div className="col-sm-8">
                                            {/* <Selected data={sem} /> */}
                                            <select name="sems" onChange={this.handleInputChange} className="form-control w-75">
                                                <option value="0">Select Value</option>
                                                <option value="1">I - Semester</option>
                                                <option value="2">II - Semester</option>
                                                <option value="3">III - Semester</option>
                                                <option value="4">IV - Semester</option>
                                                <option value="5">V - Semester</option>
                                                <option value="6">VI - Semester</option>
                                                <option value="7">VII - Semester</option>
                                                <option value="8">VIII - Semester</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div className="form-group my-3 row">
                                        <div className="col-sm-10 d-flex justify-content-center">
                                            {/* <Selected data={sem} /> */}
                                            <input type="checkbox" name="ok" className="col-sm-2 form-group" onChange={this.handleInputChange} />
                                            <label  className="">Are you sure to fetch ?   </label>
                                            
                                        </div>
                                    </div>

                                    <div className="form-group">
                                        <button type='submit' className="btn btn-primary w-50">Submit</button>
                                    </div>
                                </form>
                            </div>
                            <div className="text-center mt-3">
                                <h6 className='card-subtitle card-subtitle mb-2 text-muted'>Please follow the hierarchy while selecting the dropdown menus to ensure you get the correct data</h6>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}

export default FetchMainPage;
import React ,{useState}from 'react';
import "./student.css";
import {  connect } from "react-redux";
import {fetchdatafun2,fetchdatafun3,postFilterData} from "../../actions/visua";
import { Link } from 'react-router-dom';


const FilterMainPage = ({fetchdata1, fetchdata2,fetchdata3,filteredData,fetchdatafun2,fetchdatafun3,postFilterData,tog,sidebar}) => {

    const branchData = fetchdata1["branch"];
    const regData = fetchdata1["regulation"];
    const batchData = fetchdata2["batch"];
    const sectData = fetchdata3["section"];
    const semData = fetchdata3["sems"];
    
    const tt = ()=>{
        tog(!sidebar); 
    }

    const [showTable, setshowTable] = useState(false);

    const table = () =>{
        return <div className={showTable ? "text-center w-100 mt-5" : "text-center w-100 mt-5  d-none"}>
                    <hr className='w-100'/>
                    <div className="d-flex justify-content-end mx-5">
                        <button className='btn btn-danger' onClick={() => setshowTable(false)}>X</button>
                    </div>
                    <h3 className='text-center my-5 fw-bold fs-1'>Generated Data is-</h3>
                    <div className="my-4 mx-5">
                    <table className="table table-hover">
                        <thead>
                            <tr className='bg-dark text-white'>
                            <th scope="col">#</th>
                            <th scope="col">Roll</th>
                            <th scope="col">Name</th>
                            <th scope="col">Email</th>
                            <th scope="col">Section</th>
                            <th scope="col">Details</th>
                            </tr>
                        </thead>
                        <tbody>
                            {filteredData.data.map((value,index)=>{
                                return <tr key={index}>
                                            <th>{index+1}</th>
                                            <td>{value.roll}</td>
                                            <td>{value.name}</td>
                                            <td>{value.email}</td>
                                            <td>{value.sect}</td>
                                            <td className="text-center card-subtitle">{value.sem.map((value,inde) =>{
                                                return <div className='my-2 d-flex justify-content-between'>
                                                            <div className="">
                                                                SEM : {value.sem},
                                                            </div>  
                                                            <div className="">
                                                                SCGPA : {value.scgpa} ,
                                                            </div>
                                                            <div className="">
                                                                Backlogs : {value.backlogs}
                                                            </div> <br />
                                                        </div>
                                            })}</td>
                                        </tr>
                            })}
                            {/* <tr>
                                <th scope="row">1</th>
                                <td>Mark</td>
                                <td>Otto</td>
                                <td>@mdo</td>
                            </tr> */}
                        </tbody>
                        </table>
                    </div>
                </div>
    }

    const [formData, setFormData] = useState({
        branch:'',
        reg:'',
        batch:'',
        sems:'',
        cgpa:'',
        backlog:'',
        sect:'',
    });
    
    const [alert, setAlert] = useState('');
    const {branch,reg,batch,sems,cgpa,backlog,sect} = formData;


    const onChange = e => {
        setFormData({ ...formData, [e.target.name]: e.target.value});
    }

    const onChangeReg = e =>{
        setFormData({ ...formData, [e.target.name]: e.target.value});
        fetchdatafun2(e.target.value);
    }

    const onChangeBatch = e =>{
        setFormData({ ...formData, [e.target.name]: e.target.value});
        // console.log(branch,reg,batch);
        // console.log(e.target.value,e.target.name);
        fetchdatafun3(branch,reg,e.target.value);
        // console.log(branchData,regData,batchData);
    }

    const onChangeMul = e =>{
        let sems = Array.from(e.target.selectedOptions, option => option.value);
        // console.log(sems);
        // console.log(e.target.selectedOptions);
        setFormData({...formData,[e.target.name]: sems});
    }


    const onSubmit = (event) =>{
        event.preventDefault();

        // console.log(branch,reg,batch,sems,cgpa,backlog,sectData);

        // setshowTable(true);

        const data  = new FormData();
        data.append('reg', reg);
        data.append('branch',branch);
        data.append('batch',batch);
        data.append('sems',sems);
        data.append('cgpa',cgpa);
        data.append('backlog',backlog);
        data.append('sect',sect);

        console.log(reg,branch,batch,sems,cgpa,backlog,sect)
        postFilterData(data).then(() => {
            
            setshowTable(true)
        }
        )
        console.log(filteredData);

        // branch,reg,batch,sems,cgpa,backlog,sect
        

        


        // let path= `/studentReport/${roll}`;
        // checkStudentDetails(roll).then(() => {
        //     setAlert(<div className={`alert alert-${JSON.parse(localStorage.getItem("checkRoll")).code} alert-dismissible fade show d-flex justify-content-between`} role="alert">
        //                     <div className="" >
        //                         <strong>Alert ...!!</strong> {JSON.parse(localStorage.getItem("checkRoll")).msg}
        //                      </div>
        //                      <button type="button" onClick={() => {setAlert('')}} className="rounded p-2 bg-danger text-white close" data-dismiss="alert" aria-label="Close">
        //                         <span aria-hidden="true">&times;</span>
        //                      </button>
        //                  </div>)
        //      if (JSON.parse(localStorage.getItem("checkRoll")).code === "success"){
        //             setAlert(<div className={`alert alert-success alert-dismissible fade show d-flex justify-content-between`} role="alert">
        //                         <div className="" >
        //                             <strong>Success .. !! </strong> Fetching Student Details. You will be redirected in few second please wait....
        //                         </div>
        //                         <button type="button" onClick={() => {setAlert('')}} className="rounded p-2 bg-danger text-white close" data-dismiss="alert" aria-label="Close">
        //                             <span aria-hidden="true">&times;</span>
        //                         </button>
        //                     </div>);
        //             getStudentDetails(roll).then(
        //                 history(path));
        //             localStorage.setItem('studentRoll',roll);
                        
        //         }   
        // });
    }



  return (
            <div className='home  main-container'>
                <div className="mx-3 my-3 d-flex justify-content-between">
                    <div className="" onClick={tt}>
                        <button   class="navbar-toggler navbar-light bg-light px-2 py-1 rounded" type="button">
                            <span class="navbar-toggler-icon"></span>
                        </button> <span className='fw-light text-secondary mx-2'>Toggle Side bar</span>
                    </div>
                    <div className="mx-3 ">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><Link to={"/"}>Home</Link></li>
                            <li class="breadcrumb-item active" aria-current="page">Filter Students</li>
                        </ol>
                    </div>
                </div>
                <div className="ss h-100">
                    <div className="d-flex justify-content-center">
                        <div className="card w-100 bg-white p-4 my-2">
                            <div className="text-center my-2">
                                <h3 className='card-title'>Filter Students and Generate Data</h3>
                            </div>
                                <hr  className='w-100'/>
                            {alert}
                            <div className=" w-100 my-4 text-center">
                                <form onSubmit={onSubmit}>
                                    <div className="d-flex justify-content-around mx-4">
                                        <div className="d-flex align-items-center w-100 mx-4">
                                            <h5 >Branch: </h5>
                                            <select name="branch" className="form-control mx-2" value={branch}  onChange={e => onChange(e)} required>
                                                <option value="-">Select</option>
                                                { branchData ?
                                                    branchData.map((value,index)=>{
                                                        return <option value={value.id} key={index}>{value.name}</option>
                                                    })
                                                    :
                                                    <option value="-">No Data Available</option>
                                                }
                                            </select>
                                        </div>
                                        <div className="d-flex align-items-center w-100 mx-4">
                                            <h5 >Regulation: </h5>
                                            <select name="reg" className="form-control mx-2" value={reg} onChange={e => onChangeReg(e)} required>
                                                <option value="-">Select</option>
                                                { regData ?
                                                    regData.map((value,index)=>{
                                                        return <option value={value.id} key={index}>{value.name}</option>
                                                    })
                                                    :
                                                    <option value="-">No Data Available</option>
                                                }
                                            </select>
                                        </div>
                                        <div className="d-flex align-items-center w-100 mx-4">
                                            <h5 >Batch: </h5>
                                            <select name="batch" className="form-control mx-2" value={batch}  onChange={e => onChangeBatch(e)}  required>
                                                <option value="-">Select</option>
                                                { batchData ?
                                                    batchData.map((value,index)=>{
                                                        return <option value={value.id} key={index}>{value.name}</option>
                                                    })
                                                    :
                                                    <option value="-">No Data Available</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    <div className="d-flex justify-content-around mx-4 my-5">
                                        <div className="d-flex align-items-center w-100 mx-4">
                                            <h5 >Section: </h5>
                                            <select name="sect" className="form-control mx-2" value={sect} onChange={e => onChange(e)} required>
                                                <option value="-">Select</option>
                                                { sectData ?
                                                    sectData.map((value,index)=>{
                                                        return <option value={value} key={index}>{value}</option>
                                                    })
                                                    :
                                                    <option value="-">No Data Available</option>
                                                }
                                            </select>
                                        </div>
                                        <div className="d-flex align-items-center w-100 mx-4">
                                            <h5 >Backlogs: </h5>
                                            <select name="backlog" className="form-control mx-2" value={backlog} onChange={e => onChange(e)} required>
                                                <option value="-">Select</option>
                                                <option value="clear">All Clear</option>
                                                <option value="1">1 Backlog</option>
                                                <option value="2">2 Backlogs</option>
                                                <option value="3">3 Backlogs</option>
                                                <option value="4">4 Backlogs</option>
                                                <option value="5">Backlogs {"  > "} 4</option>
                                                <option value="all">All Backlogs</option>
                                            </select>
                                        </div>
                                        <div className="d-flex align-items-center w-100 mx-4">
                                            <h5 >CGPA: </h5>
                                            <select name="cgpa" className="form-control mx-2" value={cgpa} onChange={e => onChange(e)} required>
                                                <option value="-">Select</option>
                                                <option value="all" >All CGPA</option>
                                                <option value="9">CGPA  {"  >  "}  9</option>
                                                <option value="8">CGPA  {"  >  "}  8</option>
                                                <option value="7">CGPA  {"  >  "}  7</option>
                                                <option value="6">CGPA  {"  >  "}  6</option>
                                                <option value="5">CGPA  {"  >  "}  5</option>
                                                <option value="4">CGPA  {"  <  "}  5</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div className="d-flex mx-4 justify-content-center w-100 my-5 w-50">
                                        <div className="d-flex align-items-center w-50 mx-4">
                                            <h5 >Semester: </h5>
                                            <select name="sems" className="form-control mx-2" multiple  onChange={e => onChangeMul(e)}  required>
                                                { semData ?
                                                    semData.map((value,index)=>{
                                                        return <option value={value.id} key={index}>{value.name} - Semester</option>
                                                    })
                                                    :
                                                    <option value="-">No Data Available</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    <div className="d-flex justify-content-center text-center w-100 align-items-center mx-4">
                                        <button type='submit'className='btn-primary btn form-control w-25'>submit</button>
                                    </div>
                                </form>
                            </div>

                            {showTable ? table() : ""}
                            
                        </div>
                    </div>
                </div>
            </div>
        )
}



const mapStateToProps = state => ({
    fetchdata1: state.auth.fetchdata1,
    fetchdata2: state.auth.fetchdata2,
    fetchdata3: state.auth.fetchdata3,
    filteredData: state.auth.filteredData,
});

export default connect(mapStateToProps,{fetchdatafun2,fetchdatafun3,postFilterData})(FilterMainPage);

// export default StudentMainPage;

import React, { Fragment } from 'react';
import "./home.css";
import { connect } from "react-redux";
import { fetchSemData, fetchRegulationData, fetchdata1 } from "../../actions/visua"
import { Link } from 'react-router-dom';
import ErrorBoundary from "../error/ErrorBoundary";
// import Sidebar from '../../components/sidebar/Sidebar';
const Home = (props) => {

    const tt = ()=>{
        props.tog(!props.sidebar); 
    }



    return (
        <div className='home main-container'>
            <div className="mx-3 my-3 d-flex justify-content-between">
                <div className="" onClick={tt}>
                    <button   class="navbar-toggler navbar-light bg-light px-2 py-1 rounded" type="button">
                        <span class="navbar-toggler-icon"></span>
                    </button> <span className='fw-light text-secondary mx-2'>Toggle Side bar</span>
                </div>
                <div className="mx-3 ">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><Link to={"/"}>Home</Link></li>
                        <li class="breadcrumb-item active" aria-current="page">Data</li>
                    </ol>
                </div>
            </div>
            <ErrorBoundary>
                <Fragment>
                    <div className="">
                        <div className="container">
                            <div className="jumbotron ff">
                                <h1 className="display-4">Select The Semester </h1>
                                <p className="lead">You are seeing this page because you have not selected  any Semester View the analysis.</p>
                                <hr className="my-4" />
                                <p>Please Select the Semester from the Sidebar in the left side of this page where you can see Hierarchy ,
                                    Select Branch then  select  Regulation then Batch then Semester  .</p>
                                <div className="d-flex justify-content-start">
                                    <p className="lead mx-5">
                                        <Link className="btn btn-primary btn-lg" to="/upload" role="button">Upload New Data</Link>
                                    </p>
                                    <p className="lead">
                                        <Link className="btn btn-info btn-lg" to="/fetch" onClick={props.fetchRegulationData} role="button">Fetch New Data</Link>
                                    </p>
                                    <p className="lead mx-5">
                                        <Link className="btn btn-secondary btn-lg" to="/filter" onClick={props.fetchdata1} role="button">Filter and Generate Data</Link>
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div className="container">
                            <div className="jumbotron text-white ff2">
                                <h1 className="display-6">Complete Student Analysis </h1>
                                <p className="lead">Here you can see the student Result Analysis for all the semesters</p>
                                <hr className="my-4" />
                                <p>Please Enter the roll Number of the Student
                                    Select Branch then  select  Regulation then Batch then Semester</p>
                                <div className="d-flex">
                                    <p className="lead">
                                        <Link className="btn text-center bb btn-lg" to="/studentReport" onClick={props.fetchRegulationData} role="button">Student Report Analysis</Link>
                                    </p>
                                    <p className="lead mx-4">
                                        <Link className="btn btn-danger  btn-lg" to="/addData" role="button">Add Data</Link>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </Fragment>
            </ErrorBoundary>
            {/* <div className="container-fluid d-flex justify-content-center mt-5">
                hi
            </div> */}

            {/* {show()} */}



        </div>
    );
}

const mapStateToProps = state => ({
    semVisData: state.auth.semVisData
});

export default connect(mapStateToProps, { fetchSemData, fetchRegulationData, fetchdata1 })(Home);

import React, { Fragment, useEffect } from 'react';
import "./home.css";
import { connect } from "react-redux";
import SemWiseBacklogAnalysis from '../../components/chart/SemWiseBacklogAnalysis'
import SemWisePerformanceAnalysis from '../../components/chart/SemWisePerformanceAnalysis';
import Grade_all_sem from '../../components/chart/Grade_all_sem';
import Backlog from '../../components/Backlog_analysis/Backlog';
import ErrorBoundary from "../error/ErrorBoundary";
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import { useState } from 'react';
// import { useHistory } from 'react-router-dom';
import {getStudentDetails, semWiseBacklogData} from "../../actions/visua";
import { Link } from 'react-router-dom';

// import Student from '../forms/Student';
const StudentHome = ({studentdetails,getStudentDetails,tog,sidebar,semWiseBacklogData}) => {

    const [details, setdetails] = useState(studentdetails.details);
    const tt = ()=>{
        tog(!sidebar); 
    }

    useEffect(() => {
      getStudentDetails(localStorage.getItem("studentRoll")).then(() => {
        if (JSON.parse(localStorage.getItem("studentdetails")).roll !== null || studentdetails.roll === null){
            setdetails(JSON.parse(localStorage.getItem("studentdetails")).details)
            semWiseBacklogData(localStorage.getItem("studentRoll"))
        }
        })
    }, [])
    

    const ok = "https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava3.webp";
    const sutdentProfile= `http://123.108.200.174/img/photos/${studentdetails.roll}.JPG`;

    return (
        <div className='home  main-container'>
            <div className="mx-3 my-3 d-flex justify-content-between">
                <div className="" onClick={tt}>
                    <button   class="navbar-toggler navbar-light bg-light px-2 py-1 rounded" type="button">
                        <span class="navbar-toggler-icon"></span>
                    </button> <span className='fw-light text-secondary mx-2'>Toggle Side bar</span>
                </div>
                <div className="mx-3 ">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><Link to={"/"}>Home</Link></li>
                        <li class="breadcrumb-item active" aria-current="page">Student Analysis</li>
                    </ol>
                </div>
            </div>
            <Fragment>
                <div className="ss h-100">


                    <div className=" py-2">

                        <div className="row">
                            <div className="col-lg-4">
                                <div className="card mb-4">
                                    <div className="card-body text-center">
                                        <img src={sutdentProfile} alt="avatar"
                                            onError={(e) => (e.target.onerror = null, e.target.src = ok)}
                                            className="rounded-circle img-fluid" width={150} />

                                        <h5 className="my-3">{details.name}</h5>
                                        <p className="text-muted mb-1">B Tech</p>
                                        <p className="text-muted mb-1">{details.branch}, Section - {details.section}</p>

                                        <p className="text-muted mb-4">{details.roll}</p>
                                    </div>
                                </div>
                            </div>
                            <div className="col-lg-8">
                                <div className="card p-4 h-100">
                                    <div className="card-body">
                                        <div className="row my-3">
                                            <div className="col-sm-3">
                                                <p className="mb-0">Full Name</p>
                                            </div>
                                            <div className="col-sm-9">
                                                <p className="text-muted mb-0">{details.name}</p>
                                            </div>
                                        </div>
                                        <hr width={600} />
                                        <div className="row my-3">
                                            <div className="col-sm-3">
                                                <p className="mb-0">Email</p>
                                            </div>
                                            <div className="col-sm-9">
                                                <p className="text-muted mb-0">{details.email}</p>
                                            </div>
                                        </div>
                                        <hr width={600} />
                                        <div className="row my-3">
                                            <div className="col-sm-3">
                                                <p className="mb-0">Phone</p>
                                            </div>
                                            <div className="col-sm-9">
                                                <p className="text-muted mb-0">{details.mobile}</p>
                                            </div>
                                        </div>
                                        <hr width={600} />
                                        <div className="row my-3">
                                            <div className="col-sm-3">
                                                <p className="mb-0">DOB</p>
                                            </div>
                                            <div className="col-sm-9">
                                                <p className="text-muted mb-0">{details.dob}</p>
                                            </div>
                                        </div>
                                        <hr width={600} />
                                        <div className="row my-3">
                                            <div className="col-sm-3">
                                                <p className="mb-0">Father Name </p>
                                            </div>
                                            <div className="col-sm-9">
                                                <p className="text-muted mb-0">{details.father}</p>
                                            </div>
                                        </div>
                                        <hr width={600} />
                                        <div className="row my-3">
                                            <div className="col-sm-3">
                                                <p className="mb-0">Aadhar</p>
                                            </div>
                                            <div className="col-sm-9">
                                                <p className="text-muted mb-0">{details.aadhar}</p>
                                            </div>
                                        </div>
                                        <hr width={600} />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div className='component-cards my-4'>
                        <Row>
                            <Col>
                                <div className="component">
                                    <ErrorBoundary >
                                        <SemWiseBacklogAnalysis />
                                    </ErrorBoundary>
                                </div>
                            </Col>
                            <Col>
                                <div className="component">
                                    <ErrorBoundary>
                                        <SemWisePerformanceAnalysis />
                                    </ErrorBoundary>
                                </div>
                            </Col>
                        </Row>
                        <br />
                        <br />
                        <Row>
                            <Col>
                                <div className="component">
                                    <ErrorBoundary>
                                        <Grade_all_sem />
                                    </ErrorBoundary>
                                </div>

                            </Col>
                            <Col>
                                <div className="component">
                                    <ErrorBoundary>
                                        <Backlog />
                                    </ErrorBoundary>
                                </div>

                            </Col>
                        </Row>



                    </div>
                </div>

            </Fragment>
        </div>
    );
}

const mapStateToProps = state => ({
    studentdetails: state.auth.studentdetails
});

export default connect(mapStateToProps,{getStudentDetails,semWiseBacklogData})(StudentHome);

// export default StudentHome;

import React ,{useState}from 'react';
import { Link, useNavigate } from "react-router-dom";
// import "./home.css";
import "./student.css";
import { connect } from "react-redux";
import {checkStudentDetails,getStudentDetails} from "../../actions/visua";


const StudentMainPage = ({checkStudentDetails,getStudentDetails,tog,sidebar}) => {

    const tt = ()=>{
        tog(!sidebar); 
    }

    const [formData, setFormData] = useState({
        roll:'',
    });
    
    const [alert, setAlert] = useState('');
    let history = useNavigate();
    const {roll} = formData;


    const onChange = e => {
        setFormData({ ...formData, [e.target.name]: e.target.value});
        setAlert("");
    }


    const onSubmit = () =>{
        let path= `/studentReport/${roll}`;
        checkStudentDetails(roll).then(() => {
            setAlert(<div className={`alert alert-${JSON.parse(localStorage.getItem("checkRoll")).code} alert-dismissible fade show d-flex justify-content-between`} role="alert">
                            <div className="" >
                                <strong>Alert ...!!</strong> {JSON.parse(localStorage.getItem("checkRoll")).msg}
                             </div>
                             <button type="button" onClick={() => {setAlert('')}} className="rounded p-2 bg-danger text-white close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                             </button>
                         </div>)
             if (JSON.parse(localStorage.getItem("checkRoll")).code === "success"){
                    setAlert(<div className={`alert alert-success alert-dismissible fade show d-flex justify-content-between`} role="alert">
                                <div className="" >
                                    <strong>Success .. !! </strong> Fetching Student Details. You will be redirected in few second please wait....
                                </div>
                                <button type="button" onClick={() => {setAlert('')}} className="rounded p-2 bg-danger text-white close" data-dismiss="alert" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>);
                    getStudentDetails(roll).then(
                        history(path));
                    localStorage.setItem('studentRoll',roll);
                        
                }   
        });
    }



  return (
            <div className='home main-container'>
                <div className="mx-3 my-3 d-flex justify-content-between">
                <div className="" onClick={tt}>
                    <button   class="navbar-toggler navbar-light bg-light px-2 py-1 rounded" type="button">
                        <span class="navbar-toggler-icon"></span>
                    </button> <span className='fw-light text-secondary mx-2'>Toggle Side bar</span>
                </div>
                <div className="mx-3 ">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><Link to={"/"}>Home</Link></li>
                        <li class="breadcrumb-item active" aria-current="page">Student Analysis</li>
                    </ol>
                </div>
            </div>
                <div className="ss h-100">
                    <div className="d-flex justify-content-center cardd">
                        <div className="card w-75 bg-white p-4 my-5">
                            <div className="text-center my-2">
                                <h3 className='card-title'>Student Results Report Analysis Section</h3>
                                <hr />
                            </div>
                            {alert}
                            <div className="d-flex justify-content-center my-2 text-center">
                                <form>
                                    <div className="">
                                        <input type="text" name="roll" className='form-control my-4' onChange={e => onChange(e)} placeholder='rollnumber' />
                                        <button type='button' onClick={onSubmit} className='btn'>Generate</button>
                                    </div>
                                </form>
                            </div>
                            <div className="text-center mt-5">
                                <h6 className='card-subtitle card-subtitle mb-2'>Please enter the student roll number to generate Results report Analysis</h6>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        )
}



// const mapStateToProps = state => ({
//     semVisData: state.auth.semVisData
// });

export default connect(null,{checkStudentDetails,getStudentDetails})(StudentMainPage);

// export default StudentMainPage;

/* eslint-disable import/no-anonymous-default-export */
import {
    LOGIN_SUCCESS,
    LOGIN_FAIL,
    USER_LOADED_SUCCESS,
    USER_LOADED_FAIL,
    AUTHENTICATED_SUCCESS,
    AUTHENTICATED_FAIL,
    LOGOUT,
    PASSWORD_RESET_FAIL,
    PASSWORD_RESET_SUCCESS,
    PASSWORD_RESET_CONFIRM_FAIL,
    PASSWORD_RESET_CONFIRM_SUCCESS,
    SIGNUP_SUCCESS,
    SIGNUP_FAIL,
    ACTIVATION_SUCCESS,
    ACTIVATION_FAIL,
    GET_UP_DATA_SUCCESS,
    GET_UP_DATA_FAIL,
    GET_BACK_DATA_FAIL,
    GET_BACK_DATA_SUCCESS,
    FETCH_VIS_DATA_SUCCESS,
    FETCH_VIS_DATA_FAIL,
    FETCH_SUBJ_DATA_SUCCESS,
    FETCH_SUBJ_DATA_FAIL,
    FETCH_SUBJ_SECT_DATA_FAIL,
    FETCH_SUBJ_SECT_DATA_SUCCESS,
    FETCH_REGULATION_DATA_FAIL,
    FETCH_REGULATION_DATA_SUCCESS,
    CHECK_FETCH_DATA_SUCCESS,
    CHECK_FETCH_DATA_FAIL,
    CHECK_STUDENT_ROLL_FAIL,
    CHECK_STUDENT_ROLL_SUCCESS,
    GET_STUDENT_DETAILS_SUCCESS,
    GET_STUDENT_DETAILS_FAIL,
    SAVEID,
    GET_FETCH_DATA_1_SUCCESS,
    GET_FETCH_DATA_1_FAIL,
    GET_FETCH_DATA_2_SUCCESS,
    GET_FETCH_DATA_2_FAIL,
    GET_FETCH_DATA_3_FAIL,
    GET_FETCH_DATA_3_SUCCESS,
    POST_FILTER_DATA_SUCCESS,
    POST_FILTER_DATA_FAIL,
    POST_ADD_REG_SUCCESS,
    POST_ADD_REG_FAIL,
    POST_ADD_BRANCH_SUCCESS,
    POST_ADD_BRANCH_FAIL,
    GET_SEM_WISE_BACKLOG_ANALYSIS_SUCCESS,
    GET_SEM_WISE_BACKLOG_ANALYSIS_FAIL,
    GET_ALL_ADMIN_DATA_FAIL,
    GET_ALL_ADMIN_DATA_SUCCESS,
    POST_DELETE_BRANCH_FAIL,
    POST_DELETE_BRANCH_SUCCESS,
    POST_DELETE_REG_SUCCESS,
    POST_DELETE_REG_FAIL,
    POST_DELETE_BATCH_SUCCESS,
    POST_DELETE_BATCH_FAIL,
    POST_EDIT_BRANCH_SUCCESS,
    POST_EDIT_BRANCH_FAIL,
    POST_EDIT_REG_SUCCESS,
    POST_EDIT_REG_FAIL,
    POST_EDIT_BATCH_SUCCESS,
    POST_EDIT_BATCH_FAIL,
    POST_VIEW_SEMESTER_SUCCESS,
    POST_VIEW_SEMESTER_FAIL,
} from '../actions/types';

const initialState = {
    access: localStorage.getItem('access'),
    refresh: localStorage.getItem('refresh'),
    isAuthenticated: null,
    user: null,
    updata: null,
    backdata: null,
    semVisData: null,
    semAnalysisData:null,
    subjVisData: null,
    subjSectAnalysis: null,
    semDetails: { "name": "error", "reg": "error", "branch": "error", "batch": "error" },
    semId: null,
    RegulationData: { regData: [], batchData: [], branchData: [] },
    checkFetchSem: { "code": "not", "msg": "none" },
    failPercentageSection: [0, 0, 0, 0],
    toppersData: { 1: [], 2: [], 3: [], 4: [], "allSection": [], "onlysections": [] },
    checkRoll: { "code": "warning", "msg": "something went Wrong .. couldn't  process the request" },
    studentdetails: {
        "cgpas": [null, null, null, null, null, null, null, null], "roll": null,
        "details": { "name": null, "email": null, "mobile": null, "dob": null, "father": null, "aadhar": null, "address": null, "roll": null, "section": null, "branch": null }
    },
    fetchdata1: { "branch": [], "regulation": [], "status": false },
    fetchdata2: { "batch": [], "status": false },
    fetchdata3: { "section": [], "sems": [], "status": false },
    filteredData: {},
    logfail: false,
    semWiseBacklogData: { "allBacklogs": [0, 0, 0, 0, 0, 0, 0, 0], "clearedBacklogs": [0, 0, 0, 0, 0, 0, 0, 0] },
    adminData: { "msg": "", "data": { "branch": [], "reg": [], "batch": [] } },
    adminDltResponse: { "branch": { "del": "success", "msg": "success" }, "batch": { "del": "success", "msg": "success" }, "reg": { "del": "success", "msg": "success" } },
    adminEditResponse: { "branch": { "del": "success", "msg": "success" }, "batch": { "del": "success", "msg": "success" }, "reg": { "del": "success", "msg": "success" } },
    viewSemDetail:{"data":{"msg":"Error","code":"danger","message":"Some thing went wrong....!!!!!!!"}},
    semFailList: {"code":false,"data":null},

};

export default function (state = initialState, action) {
    const { type, payload } = action;

    switch (type) {
        case AUTHENTICATED_SUCCESS:
            return {
                ...state,
                isAuthenticated: true,
            }

        case LOGIN_SUCCESS:
            localStorage.setItem('access', payload.access);
            localStorage.setItem('refresh', payload.refresh);
            localStorage.setItem("logfail", JSON.stringify(false));
            return {
                ...state,
                isAuthenticated: true,
                access: payload.access,
                refresh: payload.refresh,
                logfail: false,
            }
        case GET_UP_DATA_SUCCESS:
            // console.log(state.updata)
            return {
                ...state,
                updata: payload.updata
            }
        case GET_BACK_DATA_SUCCESS:
            // console.log(state.updata)
            return {
                ...state,
                backdata: payload.updata
            }
        case GET_UP_DATA_FAIL:
            return {
                ...state,
                updata: null
            }
        case GET_BACK_DATA_FAIL:
            return {
                ...state,
                backdata: null
            }
        
        case FETCH_REGULATION_DATA_SUCCESS:
            localStorage.setItem('regulationData', JSON.stringify(payload.data));
            return {
                ...state,
                RegulationData: payload.data
            }
        case FETCH_REGULATION_DATA_FAIL:
            localStorage.setItem('regulationData', JSON.stringify({ regData: [], batchData: [], branchData: [] }));
            return {
                ...state,
                RegulationData: { regData: [], batchData: [], branchData: [] },
            }
        case CHECK_FETCH_DATA_SUCCESS:
            localStorage.setItem('checkFetchSem', JSON.stringify(payload));
            return {
                ...state,
                checkFetchSem: payload,
            }
        case CHECK_FETCH_DATA_FAIL:
            localStorage.setItem("checkFetchSem", JSON.stringify({ "code": "not", "msg": "none" }));
            return {
                ...state,
                checkFetchSem: { "code": "not", "msg": "none" },
            }
        case CHECK_STUDENT_ROLL_SUCCESS:
            localStorage.setItem("checkRoll", JSON.stringify(payload));
            return {
                ...state,
                checkRoll: payload,
            }
        case CHECK_STUDENT_ROLL_FAIL:
            localStorage.setItem("checkRoll", JSON.stringify({ "code": "warning", "msg": "something went Wrong .. couldn't  process the request" }));
            return {
                ...state,
                checkRoll: { "code": "warning", "msg": "something went Wrong .. couldn't  process the request" },
            }


        case GET_STUDENT_DETAILS_SUCCESS:
            localStorage.setItem("studentdetails", JSON.stringify(payload));
            return {
                ...state,
                studentdetails: payload,
            }
        case GET_STUDENT_DETAILS_FAIL:
            localStorage.setItem("studentdetails", JSON.stringify({ "cgpas": [null, null, null, null, null, null, null, null], "roll": null, "details": { "name": null, "email": null, "mobile": null, "dob": null, "father": null, "aadhar": null, "address": null, "roll": null, "section": null, "branch": null } }));
            return {
                ...state,
                studentdetails: { "cgpas": [null, null, null, null, null, null, null, null], "roll": null, "details": { "name": null, "email": null, "mobile": null, "dob": null, "father": null, "aadhar": null, "address": null, "roll": null, "section": null, "branch": null } },
            }


        case SAVEID:
            localStorage.setItem('semId', payload);
            return {
                ...state,
                semId: payload,
            }

        //   -------------------------     FETCH BRANCH AND REGULATIONS    ---------------------------

        case GET_FETCH_DATA_1_SUCCESS:
            localStorage.setItem("branchdata", JSON.stringify(payload));
            // console.log(payload)
            return {
                ...state,
                fetchdata1: payload,
            }

        case GET_FETCH_DATA_1_FAIL:
            localStorage.removeItem("branchdata");
            return {
                ...state,
                fetchdata1: { "branch": [], "regulation": [], "status": false },
            }


        case GET_SEM_WISE_BACKLOG_ANALYSIS_SUCCESS:
            localStorage.setItem("semWiseBacklogData", JSON.stringify(payload));
            // console.log(payload)
            return {
                ...state,
                semWiseBacklogData: payload,
            }

        case GET_SEM_WISE_BACKLOG_ANALYSIS_FAIL:
            localStorage.removeItem("semWiseBacklogData");
            return {
                ...state,
                semWiseBacklogData: { "allBacklogs": [0, 0, 0, 0, 0, 0, 0, 0], "clearedBacklogs": [0, 0, 0, 0, 0, 0, 0, 0] },
            }


        case GET_FETCH_DATA_2_SUCCESS:
            localStorage.setItem("regFetchData", JSON.stringify(payload));
            // console.log(payload)
            return {
                ...state,
                fetchdata2: payload,
            }

        case GET_FETCH_DATA_2_FAIL:
            localStorage.removeItem("regFetchData");
            return {
                ...state,
                fetchdata2: { "batch": [], "status": false },
            }

        case GET_FETCH_DATA_3_SUCCESS:
            localStorage.setItem("sectSemData", JSON.stringify(payload));
            // console.log(payload);
            return {
                ...state,
                fetchdata3: payload,
            }

        case GET_FETCH_DATA_3_FAIL:
            localStorage.removeItem("sectSemData");
            return {
                ...state,
                fetchdata3: { "section": [], "sems": [], "status": false },
            }
        case POST_FILTER_DATA_SUCCESS:
            localStorage.setItem("filteredData", JSON.stringify(payload));
            console.log(payload);
            return {
                ...state,
                filteredData: payload
            }
        case POST_FILTER_DATA_FAIL:
            localStorage.removeItem("filteredData");
            // console.log(payload);
            return {
                ...state,
                filteredData: {}
            }
        case POST_ADD_REG_SUCCESS:
            localStorage.setItem("addreg", JSON.stringify(payload));
            return {
                ...state,
                addreg: payload
            }
        case POST_ADD_REG_FAIL:
            localStorage.setItem("addreg", JSON.stringify(payload));
            return {
                ...state,
                addreg: payload
            }
        case POST_ADD_BRANCH_SUCCESS:
            localStorage.setItem("addbranch", JSON.stringify(payload));
            return {
                ...state,
                addbranch: payload
            }
        case POST_ADD_BRANCH_FAIL:
            localStorage.setItem("addbranch", JSON.stringify(payload));
            return {
                ...state,
                addbranch: payload
            }


        //  The below code belongs to ADMIN DASHBOARD
        case GET_ALL_ADMIN_DATA_SUCCESS:
            localStorage.setItem("adminData", JSON.stringify(payload));
            return {
                ...state,
                adminData: payload,
            }
        case GET_ALL_ADMIN_DATA_FAIL:
            localStorage.setItem("adminData", JSON.stringify(payload));
            return {
                ...state,
                adminData: { "msg": "fail", "data": { "branch": [], "reg": [], "batch": [] } },
            }
        case POST_DELETE_BRANCH_SUCCESS:
            return {
                ...state,
                adminDltResponse: { "branch": payload, "batch": { "del": "success", "msg": "success" }, "reg": { "del": "success", "msg": "success" } },

            }
        case POST_DELETE_BRANCH_FAIL:
            return {
                ...state,
                adminDltResponse: { "branch": { "del": "success", "msg": "success" }, "batch": { "del": "success", "msg": "success" }, "reg": { "del": "success", "msg": "success" } },
            }
        case POST_DELETE_REG_SUCCESS:
            return {
                ...state,
                adminDltResponse: { "branch": { "del": "success", "msg": "success" }, "batch": { "del": "success", "msg": "success" }, "reg": payload },

            }
        case POST_DELETE_REG_FAIL:
            return {
                ...state,
                adminDltResponse: { "branch": { "del": "success", "msg": "success" }, "batch": { "del": "success", "msg": "success" }, "reg": { "del": "success", "msg": "success" } },
            }
        case POST_DELETE_BATCH_SUCCESS:
            return {
                ...state,
                adminDltResponse: { "branch": { "del": "success", "msg": "success" }, "batch": payload, "reg": { "del": "success", "msg": "success" } },

            }
        case POST_DELETE_BATCH_FAIL:
            return {
                ...state,
                adminDltResponse: { "branch": { "del": "success", "msg": "success" }, "batch": { "del": "success", "msg": "success" }, "reg": { "del": "success", "msg": "success" } },
            }

        case POST_EDIT_BRANCH_SUCCESS:
            return {
                ...state,
                adminEditResponse: { "branch": payload, "batch": { "del": "success", "msg": "success" }, "reg": { "del": "success", "msg": "success" } },
            }
        case POST_EDIT_BRANCH_FAIL:
            return {
                ...state,
                adminEditResponse: { "branch": { "del": "success", "msg": "success" }, "batch": { "del": "success", "msg": "success" }, "reg": { "del": "success", "msg": "success" } },
            }
        case POST_EDIT_REG_SUCCESS:
            return {
                ...state,
                adminEditResponse: { "branch": { "del": "success", "msg": "success" }, "batch": { "del": "success", "msg": "success" }, "reg": payload },
            }
        case POST_EDIT_REG_FAIL:
            return {
                ...state,
                adminEditResponse: { "branch": { "del": "success", "msg": "success" }, "batch": { "del": "success", "msg": "success" }, "reg": { "del": "success", "msg": "success" } },
            }
        case POST_EDIT_BATCH_SUCCESS:
            return {
                ...state,
                adminEditResponse: { "branch": { "del": "success", "msg": "success" }, "batch": payload, "reg": { "del": "success", "msg": "success" } },
            }
        case POST_EDIT_BATCH_FAIL:
            return {
                ...state,
                adminEditResponse: { "branch": { "del": "success", "msg": "success" }, "batch": { "del": "success", "msg": "success" }, "reg": { "del": "success", "msg": "success" } },
            }

        //  The above cases are for ADMIN DASHBOARD




        //  VIEW SEMESTER DETAILS

        case POST_VIEW_SEMESTER_SUCCESS:
            console.log(payload);
            return{
                ...state,
                viewSemDetail:{"data":payload},
            }
        case POST_VIEW_SEMESTER_FAIL:
            return{
                ...state,
                viewSemDetail:{"data":{"msg":"error","message":"Some thing went wrong....!!!!!!!"}},
            }

        

        case SIGNUP_SUCCESS:
            return {
                ...state,
                isAuthenticated: false
            }
        case FETCH_VIS_DATA_SUCCESS:
            return {
                ...state,
                semVisData: payload.semAnalysis.sem_performance,
                semDetails: payload.semAnalysis.details,
                semFailList: {"code":true,"data":payload.semAnalysis.failedStudents},
                semAnalysisData:{"msg":true,"data":payload},
                subjSectAnalysis: payload.subjData.data,
                failPercentageSection: payload.subjData.data.failPercentageSection,
                toppersData: payload.subjData.data.eachSectionTopData,
                subjVisData: payload.sectData.data,
            }
        case FETCH_VIS_DATA_FAIL:
            return {
                ...state,
                semVisData: {"msg":false,"data":null},
                semDetails: { "name": "error", "reg": "error", "branch": "error", "batch": "error" },
                semFailList: {"code":false,"data":null},
                semAnalysisData:{"msg":false,"data":payload},
                subjSectAnalysis: null,
                failPercentageSection: [0, 0, 0, 0],
                toppersData: { 1: [], 2: [], 3: [], 4: [], "allSection": [], "onlysections": [] },
                subjVisData: null,
            }
        case FETCH_SUBJ_SECT_DATA_SUCCESS:
            localStorage.setItem('subjSectAnalysis', JSON.stringify(payload.data));
            // console.log(payload.data.failPercentageSection);
            return {
                ...state,
                subjSectAnalysis: payload.data,
                failPercentageSection: payload.data.failPercentageSection,
                toppersData: payload.data.eachSectionTopData
            }
        case FETCH_SUBJ_SECT_DATA_FAIL:
            localStorage.removeItem('subjSectAnalysis');
            return {
                ...state,
                subjSectAnalysis: null,
                failPercentageSection: [0, 0, 0, 0],
                toppersData: { 1: [], 2: [], 3: [], 4: [], "allSection": [], "onlysections": [] }
            }
        case FETCH_SUBJ_DATA_SUCCESS:
            return {
                ...state,
                subjVisData: payload.data
            }
        case FETCH_SUBJ_DATA_FAIL:
            return {
                ...state,
                subjVisData: null,
            }
        case USER_LOADED_SUCCESS:
            return {
                ...state,
                user: payload
            }
        case AUTHENTICATED_FAIL:
            return {
                ...state,
                isAuthenticated: false,
            }

        case USER_LOADED_FAIL:
            return {
                ...state,
                user: null
            }
        case LOGIN_FAIL:
            localStorage.setItem("logfail", JSON.stringify(true));
            return {
                ...state,
                logfail: true,
            }
        case SIGNUP_FAIL:
        case LOGOUT:
            localStorage.removeItem('access');
            localStorage.removeItem('refresh');
            return {
                ...state,
                access: null,
                refresh: null,
                isAuthenticated: false,
                user: null
            }
        // case PASSWORD_RESET_SUCCESS:
        // case PASSWORD_RESET_FAIL:
        // case PASSWORD_RESET_CONFIRM_SUCCESS:
        // case PASSWORD_RESET_CONFIRM_FAIL:
        // case ACTIVATION_SUCCESS:
        // case ACTIVATION_FAIL:
        //     return {
        //         ...state
        //     }

        case PASSWORD_RESET_SUCCESS:
        case PASSWORD_RESET_FAIL:
        case PASSWORD_RESET_CONFIRM_SUCCESS:
        case PASSWORD_RESET_CONFIRM_FAIL:
        case ACTIVATION_SUCCESS:
        case ACTIVATION_FAIL:
        default:
            return state
    }
};



import "./app.css";
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Dashboard from "./pages/dashboard/Dashboard";
// import Login from "./pages/auth/Login";
// import NavBarExample from "./components/navbar/Navbar";
import { Provider } from 'react-redux';
import store from './store';
// import Logintest from "./pages/auth/LoginTest";
import Loginpage from "./pages/auth/LoginPage";
import Signup from "./pages/auth/Signup";
import ResetPassword from "./pages/auth/ResetPassword";
import ResetPasswordConfirm from "./pages/auth/ResetPasswordConfirm";
import Activate from "./pages/auth/Activate";
import UploadSem from "./pages/forms/UploadSem";
import BackUpSem from "./pages/forms/BackUpSem";
import Student from "./pages/forms/Student";
import StudentReportDashboard from "./pages/dashboard/StudentReportDashboard";
// import StudentHome from "./pages/home/StudentHome";
import StudentMainDashboard from "./pages/dashboard/StudentMainDashboard";
import FetchDataDashboard from "./pages/dashboard/FetchDataDashboard";
import AnalysisDashboard from "./pages/dashboard/AnalysisDashboard";
import FilterDashboard from "./pages/dashboard/FilterDashboard";
import AddDataDashboard from "./pages/AddData/AddDataDashboard";
import AdminDashboard from "./pages/Admin/AdminDashboard";
function App() {
  return (
    <div className="App">
    <Provider store={store}>
        <Router>
                <Routes>
                    <Route exact path='/' element={<Dashboard/>} />
                    <Route exact path='/analysis' element={<AnalysisDashboard/>} />
                    <Route path="/login"  element={<Loginpage/>}/>
                    <Route exact path='/signup' element={<Signup/>} />
                    <Route path="/reset-password"  element={<ResetPassword/>}/>
                    <Route path="/password/reset/confirm/:uid/:token"  element={<ResetPasswordConfirm/>}/>
                    <Route exact path='/activate/:uid/:token' element={<Activate/>} />
                    <Route exact path='/upload' element={<UploadSem/>} />
                    <Route exact path='/backdata' element={<BackUpSem/>} />
                    <Route exact path='/student' element={<Student/>} />
                    <Route exact path='/studentReport' element={<StudentMainDashboard/>} />
                    <Route exact path='/studentReport/:roll' element={<StudentReportDashboard/>} />
                    <Route exact path='/fetch' element={<FetchDataDashboard/>} />
                    <Route exact path='/filter' element={<FilterDashboard/>} />
                    <Route exact path='/addData' element={<AdminDashboard/>} />
                </Routes>
        </Router>
    </Provider>
    </div>
  );
}


export default App;

from statistics import mode
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager

class UserAccountManager(BaseUserManager):
    
    def _create_user(self,email,password,first_name,last_name,**extra_fields):
        if not email:
            raise ValueError("Email must be provided")
        
        if not password:
            raise ValueError("Password is not provided")
        
        user  = self.model(
            email=self.normalize_email(email),
            first_name = first_name,
            last_name = last_name,
            **extra_fields
        )
        
        user.set_password(password)
        user.save()
        return user
        
        
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError('Users must have an email address')

        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)

        user.set_password(password)
        user.save()

        return user
    
    def create_superuser(self,email,password,first_name,last_name,**extra_fields):
        extra_fields.setdefault('is_staff',True)
        extra_fields.setdefault('is_active',True)
        extra_fields.setdefault('is_superuser',True)
        
        return self._create_user(email,password,first_name,last_name,**extra_fields)

class UserAccount(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(max_length=255, unique=True)
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=True)
    is_superuser = models.BooleanField(default=False)
    # mobile = models.CharField

    objects = UserAccountManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['first_name', 'last_name']

    def get_full_name(self):
        return self.first_name

    def get_short_name(self):
        return self.first_name
    
    def __str__(self):
        return self.email


from djoser.serializers import UserCreateSerializer
from django.contrib.auth import get_user_model
User = get_user_model()

class UserCreateSerializer(UserCreateSerializer):
    class Meta(UserCreateSerializer.Meta):
        model = User
        fields = ('id', 'email', 'first_name', 'last_name', 'password')


"""
Django settings for result project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import datetime
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'zxwpnkd-luwx6mc-47iq@eoz=_st2-x-m+2q@gi^bfw!)or6tx'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_extensions',
    'student',
    'rest_framework.authtoken',
    'djoser',
    'accounts',
    'corsheaders',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'result.urls'


SIMPLE_JWT = {

    #  'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=7),
    # 'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

}
# ROOT_URLCONF = 'auth_system.urls'
CORS_ALLOW_ALL_ORIGINS=True

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'result.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_HOST_USER = "mohammadfirozkhan609@gmail.com"
EMAIL_HOST_PASSWORD = "wdrunuovcyakshds"
EMAIL_USE_TLS = True



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', 
        'NAME': 'result',
        'USER': 'root',
        # 'PASSWORD': '52123500',
        # 'HOST': 'msivaji.in',    # Or an IP Address that your DB is hosted on
        'PASSWORD': '',
        'HOST': 'localhost',    # Or an IP Address that your DB is hosted on
        'PORT': '3306',
        'OPTIONS': {
        'sql_mode': 'traditional',
    }
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'



MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

DATA_UPLOAD_MAX_NUMBER_FIELDS = None


STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'build/static')
]

STATIC_ROOT = os.path.join(BASE_DIR,'static')


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES':[
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}
SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ('JWT',),
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}


DJOSER = {
    'LOGIN_FIELD': 'email',
    "USER_CREATE_PASSWORD_RETYPE":True,
    'USERNAME_CHANGED_EMAIL_CONFIRMATION':True,
    "PASSWORD_CHANGED_EMAIL_CONFIRMATION": True,
    "SEND_CONFIRMATION_EMAIL": True,
    "SET_USERNAME_RETYPE": True,
    "SET_PASSWORD_RETYPE": True,
    "PASSWORD_RESET_CONFIRM_URL":"password/reset/confirm/{uid}/{token}",
    "USERNAME_RESET_CONFIRM_URL":"email/reset/confirm/{uid}/{token}",
    "ACTIVATION_URL": 'activate/{uid}/{token}',
    "SEND_ACTIVATION_EMAIL": True,
    "SERIALIZERS":{
        'user_create': 'accounts.serializers.UserCreateSerializer',
        'user': 'accounts.serializers.UserCreateSerializer',
        'user_delete': 'djoser.serializers.UserDeleteSerializer',
    }
}



AUTH_USER_MODEL = 'accounts.UserAccount'
DATA_UPLOAD_MAX_NUMBER_FIELDS = None



from django.contrib import admin
from django.urls import path, include, re_path
from django.conf import settings
from django.views.generic import TemplateView
from django.conf.urls.static import static
urlpatterns = [
    path('admin/web', admin.site.urls),
    path('',include("student.urls")),
    path('auth/', include('djoser.urls')),
    path('auth/', include('djoser.urls.jwt')),
]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


urlpatterns += [re_path(r'^.*', TemplateView.as_view(template_name='index.html'))]


from django.db.models.fields import CharField
from django.http.response import HttpResponse
from student.add_to_DB import extract_name
from .sem_analysis import cgpa_analysis_fun, title_and_code
from student.models import *
import pandas as pd
import numpy as np




# def subj_analysis_one_more_sec(sem,batch,reg,branch,code,name, sect):
#     stud = Student.objects.all().filter(batch=batch,regulation=reg,branch=branch,section=sect)
#     rolls = [roll.roll for roll in stud ]
#     subs = Subjects.objects.all().filter(sem=sem,batch=batch,regulation=reg,branch=branch,code=code,name=name)
#     fail_count = 0
#     num_of_student = 0
#     pass_count = 0
#     for i in range(len(subs)):
#         sub = subs[i]
#         if sub.roll.roll in rolls:
#             if sub.fail == True:
#                 fail_count += 1
#             else:
#                 pass_count +=1
            
#             num_of_student +=1
#     return {"fail":fail_count,"total_student":num_of_student,"passed_student":pass_count}
    


def subj_analysis_one_more_sec(sem,batch,reg,branch,subs, sect):
    stud = Student.objects.all().filter(batch=batch,regulation=reg,branch=branch,section=sect)
    rolls = [roll.roll for roll in stud ]
    fail_count = 0
    num_of_student = 0
    pass_count = 0
    for i in range(len(subs)):
        sub = subs[i]
        if sub.roll.roll in rolls:
            if sub.fail == True:
                fail_count += 1
            else:
                pass_count +=1
            
            num_of_student +=1
    # pass_percentage = float(str((pass_count/num_of_student) * 100)[:4])
    pass_percentage= int(pass_count/num_of_student * 100)
    return {"fail":fail_count,"total_student":num_of_student,"passed_student":pass_count,"Pass_percentage":pass_percentage}
    

    
def get_sem_performance_analysis(sem):
    if Performance.objects.filter(sem=sem, regulation=sem.regulation,batch=sem.batch).exists():
        pers = Performance.objects.all().filter(sem=sem, regulation=sem.regulation,batch=sem.batch)
        fail_count = 0
        pass_count = 0
        register_count = 0
        cgpa = []
        no_of_back = []
        
        for per in pers:
            if per.passed == False:
                fail_count +=1
                no_of_back.append(per.no_of_backlog)
            else:
                pass_count +=1
            register_count +=1
            cgpa.append(per.SCGPA)
            
        back_data = {}
                
        for i in range(len(no_of_back)):
            if no_of_back[i] in back_data:
                back_data[no_of_back[i]] += 1
            else:
                back_data[no_of_back[i]] = 1
        data = {}
        data["CGPA"] = cgpa_analysis_fun(cgpa)
        data["Fail_count"] = fail_count
        data["Pass_count"] = pass_count
        data["Total_Registered"] = register_count
        data["Back_data"] = back_data
    
        return data

    return 0
            
            
        
        
        
        
        
# def get_subject_analysis_data_sec(sem,sect):
#     if Semester.objects.filter(id=sem.id).exists():
#         sem = Semester.objects.get(id=sem.id)
#         batch = sem.batch
#         reg = sem.regulation
#         branch = sem.branch
        
#         subjs = Subjects.objects.all().filter(sem=sem,batch=batch,regulation=reg,branch=branch)
#         subj_list = sem.subject.split(',')
#         title_code = title_and_code(subj_list)
#         code = title_code[0]
#         title = title_code[1]
#         data = {}
#         sem_data = {}
#         for i in range(len(code)):
#             d = subj_analysis_one_more_sec(sem,batch,reg,branch,code[i],title[i],sect)
#             data[code[i]] = {title[i]:d}
#         sem_data["Subjects"] = data
#         # per = get_sem_performance_analysis(sem)
#         # sem_data["Semester PerFormance"] = per
#     return sem_data

        
def get_subject_analysis_data_sec(sem,sect,subj):
    if Semester.objects.filter(id=sem.id).exists():
        sem = Semester.objects.get(id=sem.id)
        batch = sem.batch
        reg = sem.regulation
        branch = sem.branch
        # print(subj)
        title_code = extract_name(subj)
        if len(title_code) <2:
            return
        code = title_code[0]
        name = title_code[1]
        
        subjs = Subjects.objects.all().filter(sem=sem,batch=batch,regulation=reg,branch=branch,name=name,code=code)
        data = []
        tt = {}
        tt["subj"] = name
        tt["code"] = code
        tt["cc"] = subj
        
        for sec in sect.keys():
            temp = {}
            d = subj_analysis_one_more_sec(sem,batch,reg,branch,subjs,sec)
            temp["sect"] = sec
            temp["analysis"] = d
            data.append(temp)
        tt["data"] = data
        return tt
    return []


# def section_analysis(sect,reg,batch,branch,sem,students):
#     return get_subject_analysis_data_sec(sem,sect)


def section_analysis(subj,reg,batch,branch,sem,students,sect):
    return get_subject_analysis_data_sec(sem,sect,subj)









from ..models import Student, Subjects
from django.db.models import Count,Value,Case,When,F,DecimalField,Q,IntegerField


def get_pass_fail_count_of_each_subject(code,name,secs,sem,branch,batch):
    k = {}
    k["subject_name"] = name
    # print(code,name,secs,sem,branch,batch)
    for sec in secs:
        students = Student.objects.filter(batch=batch,branch=branch,section=sec)
        passCount = Subjects.objects.filter(roll__in=(students),code=code).aggregate(total=Count(Case(When(result__icontains="P",then=1),output_field=IntegerField())))
        failCount = Subjects.objects.filter(roll__in=(students),code=code).aggregate(total=Count(Case(When(result__icontains="F",then=1),output_field=IntegerField())))
        k[f"section-{sec}-Pass"] = passCount["total"]
        k[f"section-{sec}-Fail"] = failCount["total"]
        # l.append(msg)

    return k

def get_pass_fail_count_of_each_subject_for_table(code,name,secs,sem,branch,batch):
    k = {}
    k["subj"] = name
    k["code"] = code
    k["cc"] = name
    data = []

    
    

    for sec in secs:
        p = {}
        p["sect"] = sec
        ana = {}
        students = Student.objects.filter(batch=batch,branch=branch,section=sec)
        passCount = Subjects.objects.filter(roll__in=(students),code=code).aggregate(total=Count(Case(When(result__icontains="P",then=1),output_field=IntegerField())))
        failCount = Subjects.objects.filter(roll__in=(students),code=code).aggregate(total=Count(Case(When(result__icontains="F",then=1),output_field=IntegerField())))
        ana["passed_student"] = passCount["total"]
        ana["fail"] = failCount["total"]
        
        si = Subjects.objects.filter(roll__in=(students),code=code)[0]
        
        if si.subjtype == True:
            ana["total_student"] = len(Subjects.objects.filter(roll__in=(students),code=code))
        else:
            ana["total_student"] = len(list(students))
        ana["Pass_percentage"] = int((passCount["total"]-failCount["total"] )/ ana["total_student"] *100)
        p["analysis"] = ana
        data.append(p)
        # l.append(msg)
    k["data"] = data
    return k



        

from django.db.models.fields import CharField
from django.http.response import HttpResponse
from student.add_to_DB import extract_name
from student.models import *
import pandas as pd
import numpy as np
from .section_subj_analysis import get_pass_fail_count_of_each_subject_for_table,get_pass_fail_count_of_each_subject
from student.preprocesssing import get_section_list
from django.http.response import HttpResponse, JsonResponse
from django.db.models import Count,Value,Case,When,F,DecimalField,Q,IntegerField

def title_and_code(subj_list):
    titles = []
    code = []
    for sub in subj_list:
        d = extract_name(sub)
        titles.append(d[1])
        code.append(d[0])
    return [code, titles]


def subj_analysis_one_more(sem,batch,reg,branch,code,name):
    # print("inside    subj_analysis_one_more ")
    subs = Subjects.objects.all().filter(sem=sem,batch=batch,regulation=reg,branch=branch,code=code,name=name)
    fail_count = 0
    num_of_student = 0
    pass_count = 0
    for sub in subs:
        if sub.fail == True:
            fail_count += 1
        else:
            pass_count +=1
            
        num_of_student +=1
    return {"fail":fail_count,"total_student":num_of_student,"passed_student":pass_count}
    

def get_section_fail_perc(sem_id,secs):
    
    sem = Semester.objects.get(id=sem_id)
    batch  = Batch.objects.get(id=sem.batch.id)
    branch_obj = Branch.objects.get(id=sem.branch.id)
    failcount = []
    for sec in secs:
        students = Student.objects.filter(batch=batch,branch=branch_obj,section=sec)
        fCount = Subjects.objects.filter(roll__in=(students),sem=sem,branch=branch_obj,batch=batch).aggregate(total=Count(Case(When(result__icontains="F",then=1),output_field=IntegerField())))
        failcount.append(fCount["total"])
    
    data = []
    # print(failcount,sum(failcount))
    if sum(failcount) < 1:
        return failcount

    for i in failcount:
        data.append(int(i/sum(failcount)*100))
    # print(data)
    
    print("inside section fail", data)
    return data

    
def cgpa_analysis_fun(cgpa):
    cgpa_analysis = {"O":0,"A+":0, "A":0, "B+":0, "B":0,"C":0}
    cgpa_data = {"O":[],"A+":[], "A":[], "B+":[], "B":[],"C":[]}
    for i in range(len(cgpa)):
        data = {"roll":cgpa[i].roll.roll,"name":cgpa[i].roll.name, "grade":cgpa[i].SCGPA,"result":cgpa[i].passed,"backlog":cgpa[i].no_of_backlog}
        if cgpa[i].SCGPA > 9 :
            cgpa_analysis["O"] +=1
            cgpa_data["O"].append(data)
        elif cgpa[i].SCGPA > 8:
            cgpa_analysis["A+"] +=1
            cgpa_data["A+"].append(data)
        elif cgpa[i].SCGPA > 7:
            cgpa_analysis["A"] +=1
            cgpa_data["A"].append(data)
        elif cgpa[i].SCGPA > 6:
            cgpa_analysis["B+"] +=1
            cgpa_data["B+"].append(data)
        elif cgpa[i].SCGPA > 5:
            cgpa_analysis["B"] +=1
            cgpa_data["B"].append(data)
        elif cgpa[i].SCGPA > 4:
            cgpa_analysis["C"] +=1
            cgpa_data["C"].append(data)
    data = {"cgpa":cgpa_analysis,"list":cgpa_data}
    return data

def get_sem_performance_analysis(sem):
    if Performance.objects.filter(sem=sem, regulation=sem.regulation,batch=sem.batch).exists():
        pers = Performance.objects.all().filter(sem=sem, regulation=sem.regulation,batch=sem.batch)
        fail_count = 0
        pass_count = 0
        register_count = 0
        cgpa = []
        no_of_back = []
        
        for per in pers:
            if per.passed == False:
                fail_count +=1
                if per.no_of_backlog > 0:
                    no_of_back.append(per.no_of_backlog)
            else:
                pass_count +=1
            register_count +=1
            cgpa.append(per)
            
        back_data = {}
                
        for i in range(len(no_of_back)):
            if no_of_back[i] in back_data:
                back_data[no_of_back[i]] += 1
            else:
                back_data[no_of_back[i]] = 1
        data = {}
        data["CGPA"] = cgpa_analysis_fun(cgpa)
        data["Fail_count"] = fail_count
        data["Pass_count"] = pass_count
        data["Total_Registered"] = register_count
        data["Back_data"] = back_data
    
        return data

    return 0
            
            




def get_sect_data(sem_id):
    sem = Semester.objects.get(id=sem_id)
    # sem = convert_num_to_sem(sem)
    batch  = Batch.objects.get(id=sem.batch.id)
    branch_obj = Branch.objects.get(id=sem.branch.id)
    students = Student.objects.filter(batch=batch,branch=branch_obj)
    secs = []
    main_k = {}
    for i in students:
        if i.section not in main_k.keys() and  i.section != 10:
            k = {}
            k["name"] = i.section
            secs.append(k)
            main_k[i.section] = 1
    
    
    return {"data":secs}

# Toppers Data API for single semester

def get_topper_data(sem_id):
    sem = Semester.objects.get(id=sem_id)
    # sem = convert_num_to_sem(sem)
    batch  = Batch.objects.get(id=sem.batch.id)
    # branch_obj = Branch.objects.get(id=sem.branch.id)
    # students = Student.objects.filter(batch=batch,branch=branch_obj)
    performance =  Performance.objects.filter(batch=batch,regulation=sem.regulation,sem=sem).order_by('-SCGPA')
    k = 0
    data = []
    for i in performance:
        if k==10:
            break
        data.append({"roll":i.roll.roll,"name":i.roll.name,"sect":i.roll.section,"SCGPA":i.SCGPA})
        k+=1

    return data






# this function will return list of students with active backlog
def getBackStudentDetails(sem):
    sem = Semester.objects.get(id=sem.id)
    reg = Regulation.objects.get(id=sem.regulation.id)
    branch = Branch.objects.get(id=sem.branch.id)
    batch = Batch.objects.get(id=sem.batch.id)

    subjects = Subjects.objects.all().filter(sem=sem,batch=batch,regulation=reg,branch=branch,fail=True).order_by('roll')
    
    k = []

    for sub in subjects:
        # print(sub.id,sub.roll,sub.credit,sub.attendance,sub.grade,sub.cgpa,sub.fail,sub.name,"-----"*30)
        data ={}
        data["id"] = sub.id
        data["roll"] = sub.roll.roll
        data["name"] = sub.roll.name
        data["credit"] = sub.credit
        data["attendance"] = sub.attendance
        data["grade"] = sub.grade
        data["cgpa"] = sub.cgpa
        data["result"] = sub.fail
        data["subjName"] =sub.name
        data["code"] = sub.code
        k.append(data)
    
    return k



#---- Function Depending on Main SEMESTER ANALYSIS FUNCTIONs -------------

def get_sect_analysis(sem_id):
    sem = Semester.objects.get(id=sem_id)
    reg = Regulation.objects.get(id=sem.regulation.id)
    batch = Batch.objects.get(id=sem.batch.id)
    branch = Branch.objects.get(id=sem.branch.id)
    if Student.objects.filter(regulation=reg, batch=batch,branch=branch).exists():
        dsecs = get_sect_data(sem_id)
        secs = []
        for i in dsecs["data"]:
            secs.append(i["name"])
        subjs = sem.subject.split(',')
        data = []
        for i in subjs:
            code,name = i.split('-')[0],i.split('-')[1:]
            l = get_pass_fail_count_of_each_subject_for_table(code,i,secs,sem,branch,batch)
            data.append(l)
        students = Student.objects.all().filter(regulation=reg, batch=batch,branch=branch)
        sect_list = get_section_list(students)
        main = {}   
        main["sect"] = list(sect_list.keys())
        main["data"] = data
        main2 = {}
        main2["data"] = main
        main2["msg"] = "success"
        return main2
    else:
        return {"msg":"error"}






def get_subj_section_data(sem_id):
    top_data = get_topper_data(sem_id)
    dsecs = get_sect_data(sem_id)
    sem = Semester.objects.get(id=sem_id)
    batch  = Batch.objects.get(id=sem.batch.id)
    branch_obj = Branch.objects.get(id=sem.branch.id)
    students = Student.objects.filter(batch=batch,branch=branch_obj)
    secs = []
    for i in dsecs["data"]:
        secs.append(i["name"])
    sectionTopData = get_sec_wise_topper_data(sem_id,secs)
    subjs = sem.subject.split(',')
    fails = get_section_fail_perc(sem_id,secs)
    data = []
    for i in subjs:
        code,name = i.split('-')[0],i.split('-')[1:]

        l = get_pass_fail_count_of_each_subject(code,i,secs,sem,branch_obj,batch)
        data.append(l)

    sectionTopData["onlysections"] = secs
    
    temp = {"subjSectionData":data,"sectionList":dsecs,"semtopData":top_data,"failPercentageSection":fails,"onlysections":secs,"eachSectionTopData":sectionTopData}
    pp = {"data":temp,"msg":"success"}
    return pp










        
        
        
  

#-------------------- Main FUNCTION FOR SEM ANALYSIS ---------------- 
# SEM ANALYSIS FUNCTION       
        
def get_subject_analysis_data(sem,sem_id):
    if Semester.objects.filter(id=sem.id).exists():
        sem = Semester.objects.get(id=sem.id)
        batch = sem.batch
        reg = sem.regulation
        branch = sem.branch
        subjData = get_subj_section_data(sem_id)
        sectData = get_sect_analysis(sem_id)
        subjs = Subjects.objects.all().filter(sem=sem,batch=batch,regulation=reg,branch=branch)
        subj_list = sem.subject.split(',')
        title_code = title_and_code(subj_list)
        code = title_code[0]
        title = title_code[1]
        data = {}
        sem_data = {}
        for i in range(len(code)):
            d = subj_analysis_one_more(sem,batch,reg,branch,code[i],title[i])
            data[code[i]] = {title[i]:d}
        sem_data["Subjects"] = data
        per = get_sem_performance_analysis(sem)
        sem_data["failedStudents"] = getBackStudentDetails(sem)
        sem_data["sem_performance"] = per
        sem_data["details"] = {"name":sem.name,"reg":sem.regulation.regulation,"branch":sem.branch.branches,"batch":sem.batch.name}
        finalData = {}
        finalData["subjData"] = subjData
        finalData["sectData"] = sectData
        finalData["semAnalysis"] = sem_data
    return finalData





def subj_analysis(sem_id,name,code):
    subjs = Subjects.objects.all().filter(sem=sem_id,name=name,code=code)
    return subjs






def all_subj(sem_id):
    sem = Semester.object.get(id=sem_id)
    subs = Subjects.objects.all().filter(sem=sem)
    subj_list = sem.subject.split(',')
    for i in subj_list:
        code,name = i.split('-')
        data = subj_analysis(sem.id,name.strip(),code.strip())
    return {'ji':"hi"}
        



# def section_analysis(sect,reg,batch,branch,sem,students):
#     pass




def get_sec_wise_topper_data(sem_id,secs):
    # print(dsecs)
    sem = Semester.objects.get(id=sem_id)
    # sem = convert_num_to_sem(sem)
    batch  = Batch.objects.get(id=sem.batch.id)
    branch_obj = Branch.objects.get(id=sem.branch.id)
    # firoz = Student.objects.filter(roll="20135A0516").values()
    # print(firoz)

    data = {}

    for sec in secs:
        k = {}
        per_data=[]
        students = Student.objects.filter(batch=batch,branch=branch_obj,section=sec)
        performance =  Performance.objects.filter(roll__in=(students),batch=batch,regulation=sem.regulation,sem=sem).order_by('-SCGPA')[:10]
        for i in performance:
            per_data.append({"roll":i.roll.roll,"name":i.roll.name,"sect":i.roll.section,"SCGPA":i.SCGPA})
        data[f"{sec}"] = per_data
    
    # p = {"allSection":get_topper_data(sem_id)}
    data["allSection"] = get_topper_data(sem_id)


    return data





from django.db.models.fields import CharField
from django.http.response import HttpResponse
from student.add_to_DB import extract_name
from student.models import *
import pandas as pd
import numpy as np


def title_and_code(subj_list):
    titles = []
    code = []
    for sub in subj_list:
        d = extract_name(sub)
        titles.append(d[1])
        code.append(d[0])
    return [code, titles]


def subj_analysis_one_more(sem,batch,reg,branch,code,name):
    subs = Subjects.objects.all().filter(sem=sem,batch=batch,regulation=reg,branch=branch,code=code,name=name)
    fail_count = 0
    num_of_student = 0
    pass_count = 0
    for sub in subs:
        if sub.fail == True:
            fail_count += 1
        else:
            pass_count +=1
            
        num_of_student +=1
    return {"fail":fail_count,"total_student":num_of_student,"passed_student":pass_count}
    
    
    
def cgpa_analysis_fun(cgpa):
    cgpa_analysis = {"O":0,"A+":0, "A":0, "B+":0, "B":0,"C":0}
    for i in range(len(cgpa)):
        if cgpa[i] > 9 :
            cgpa_analysis["O"] +=1
        elif cgpa[i] > 8:
            cgpa_analysis["A+"] +=1
        elif cgpa[i] > 7:
            cgpa_analysis["A"] +=1
        elif cgpa[i] > 6:
            cgpa_analysis["B+"] +=1
        elif cgpa[i] > 5:
            cgpa_analysis["B"] +=1
        elif cgpa[i] > 4:
            cgpa_analysis["C"] +=1
            
    return cgpa_analysis
    
    
def get_sem_performance_analysis(sem):
    if Performance.objects.filter(sem=sem, regulation=sem.regulation,batch=sem.batch).exists():
        pers = Performance.objects.all().filter(sem=sem, regulation=sem.regulation,batch=sem.batch, no_of_backlog=0)
        fail_count = 0
        pass_count = 0
        register_count = 0
        cgpa = []
        no_of_back = []
        
        for per in pers:
            if per.passed == False:
                fail_count +=1
                print("inside back")
                no_of_back.append(per.no_of_backlog)
            else:
                pass_count +=1
            register_count +=1
            cgpa.append(per.SCGPA)
        
        
            
        back_data = {}
        print(back_data)
                
        for i in range(len(no_of_back)):
            print(back_data)
            print("inside back data")
            if no_of_back[i] in back_data:
                print(back_data[no_of_back[i]])
                back_data[no_of_back[i]] += 1
            else:
                back_data[no_of_back[i]] = 1
        data = {}
        
        data["CGPA"] = cgpa_analysis_fun(cgpa)
        data["Fail_count"] = fail_count
        data["Pass_count"] = pass_count
        data["Total_Registered"] = register_count
        data["Back_data"] = back_data
    
        return data

    return 0
            
            
        
        
        
        
        
def get_subject_analysis_data(sem):
    if Semester.objects.filter(id=sem.id).exists():
        sem = Semester.objects.get(id=sem.id)
        batch = sem.batch
        reg = sem.regulation
        branch = sem.branch
        
        subjs = Subjects.objects.all().filter(sem=sem,batch=batch,regulation=reg,branch=branch)
        subj_list = sem.subject.split(',')
        title_code = title_and_code(subj_list)
        code = title_code[0]
        title = title_code[1]
        data = {}
        sem_data = {}
        for i in range(len(code)):
            d = subj_analysis_one_more(sem,batch,reg,branch,code[i],title[i])
            data[code[i]] = {title[i]:d}
        sem_data["Subjects"] = data
        per = get_sem_performance_analysis(sem)
        sem_data["Semester PerFormance"] = per
    return sem_data











import calendar
import json
from math import ceil
import requests as req


def getResult(rno,branch):
    BASE_URL="http://123.108.200.174/studresult?"
    URL=BASE_URL+"rollno="+rno+"&"+"branch="+branch
    res=req.get(URL)
    res = json.loads(res.text)
    return res


def getDetails(rno):
    BASE_URL="http://123.108.200.174/studdetails?"
    URL=BASE_URL+"rollno="+rno
    res=req.get(URL)
    data = str(res.text).strip("['\"']").split("½")
    return data


# d=getResult("20135A0514","CSE")
# print(len(d))
# print(d)

# to get the result pass student roll and BRANCH)
# result=getResult("16131A0599","CSE")

def get_formated_result(roll,branch):
    result = getResult(roll,branch)
    # result = getResult("18131A0525","CSE")
    mdata={}
    index=0
    for value in result:
        value=value[0:len(value)-1]
        tmp=value.split("@")
        span=len(tmp)
        # print(tmp)
        data=[]
        index1=0
        for value1 in tmp:
            if tmp[0] != " ":
                tmp1=value1.split(";")
                try:
                    month=calendar.month_name[int(tmp1[8])]
                except:
                    month=""
                if month:
                    data.append({"SNo":index1+1, "SubjectCode":tmp1[1], "SubjectName":tmp1[2], "SubjectType":tmp1[3], "AttendanceGrade":tmp1[4], "Credits":tmp1[5], "ResultGrade":tmp1[6], "CreditsPoints":tmp1[7], "DateOfRelease":tmp1[9]})
            index1+=1
        if index % 2 == 0:
            name=str(int((index/2+1)))
        else:
            name=str(ceil(index/2))+"-Supply"
        mdata[name]=data
        index+=1
    return mdata

# print(mdata)
# for i,j in mdata.items():
#     print(i,j)

# print(get_formated_result("s","sf")["7"])

def fetchDetails(roll):
    return getDetails(roll)






from student.back_log_handler import add_backlog
from ..models import Batch, Branch
from student.Fetch.main_code import get_formated_result
from student.back_log_handler import add_student_performance
from student.models import Performance
from student.models import Subjects
from student.models import Student
from student.models import Regulation
from student.models import Semester
from django.db.models import Count,Value,Case,When,F,DecimalField,Q,IntegerField

from student.analysis.sem_analysis import title_and_code,subj_analysis_one_more


def check_subject_fetch(roll,subj_obj,sem):

    if Student.objects.filter(roll=roll).exists():
        stud_obj = Student.objects.get(roll=roll)
        regulation = stud_obj.regulation
        branch = stud_obj.branch
        batch = stud_obj.batch
        name = subj_obj["SubjectName"].upper()
        code = subj_obj["SubjectCode"]
        subtype = subj_obj["SubjectType"].upper()

        if subtype == "PROFESSIONAL CORE COURSE":
            subt = "PROFESSIONAL CORE COURSE"
            type = False
        else:
            subt = subtype
            type= True

        

        if sem not in stud_obj.sem.all():
            print(sem)
        else:
            print("does not exists")
            stud_obj.sem.add(sem)
            stud_obj.save()
            

        # sem = stud_obj.sem
        if Subjects.objects.filter(regulation=regulation,branch=branch,sem=sem,roll=stud_obj,name=name,code=code,batch=batch).exists():
            print(f"!!! .... Subject for {stud_obj.roll} cannot be created for {name}")
            return
        attendance = subj_obj["AttendanceGrade"]
        grade = subj_obj["ResultGrade"]
        cgpa = subj_obj["CreditsPoints"]
        credit = subj_obj["Credits"]

        

        
        result = "P"
        fail = False
        if grade == "F" or grade == "AB":
            result = "F"
            fail = True
        # if attendance.lower() == "d":
        #     fail = True
        #     result = "F"
        #     credit = 0
        
        if credit == "--" or grade == "--" or cgpa == "--":
            result = "F"
            fail = True
            credit = 0
            grade="AB"
            cgpa = 0

        
        subj = Subjects.objects.create(roll=stud_obj,name=name,regulation=regulation,branch=branch,batch=batch,attendance=attendance,
        cgpa=cgpa,result=result,fail=fail,sem=sem,credit=credit,code=code,grade=grade,subjtype=type, type=subt)

        if subj.result == "F":
            add_backlog(subj,stud_obj)


        
    
        print(f"subject created for {stud_obj.roll} of {name}")
    else:
        print(f"Subject for {roll} not found of {name} ")






def add_subject(result,roll,sem):
    for i in result:
        # print(i)
        check_subject_fetch(roll,i,sem)

    # print(roll)
    # print(sem)


def sem_name_convert(sem):
    sem_names = {1:"I",2:"II",3:"III",4:"IV",5:"V",6:"VI",7:"VII",8:"VIII"}
    return sem_names[sem]

def check_sem_exist(result,branch,batch,reg,sem,subj):
    sems = Semester.objects.all().filter(regulation=reg,branch=branch,batch=batch)
    # print("sems" , sems)
    sem_names = {1:"I",2:"II",3:"III",4:"IV",5:"V",6:"VI",7:"VII",8:"VIII"}

    for  i in sems:
        if i.name == sem_names[sem]:
            print("!!! ....  sem Exists")
            return i
    
    print("Creating Sem Object")
    sem = Semester(name=sem_names[sem],regulation=reg,branch=branch,batch=batch,subject=subj)
    sem.save()

    return sem

    # ["201342-RNAIDA INADONP A","2332323-asjdnskjdna"]
    

def get_subject_from_fetch_obj(result):
    # print("*"*30)
    # print(result)
    subj_list = ""
    data = result[0]["SubjectCode"] + "-"+result[0]["SubjectName"] 
    subj_list += data

    for i in result[1:]:
        data = ""
        data +=   "," + i["SubjectCode"] + "-"+i["SubjectName"] 
        subj_list +=  data.strip()
    
    return subj_list
    

def get_no_of_pass_count(student,sem):
    subjs = Subjects.objects.filter(roll=student,branch=student.branch, regulation=student.regulation, batch=student.batch,sem=sem)
    pass_count = 0
    total_subject = 0
    fail_count = 0

    for i in subjs:
        if i.fail == True:
            fail_count +=1
        else:
            pass_count +=1
        total_subject +=1
    
    return [pass_count,total_subject,fail_count]



def add_preformance_table(roll,sem):

    student_roll = Student.objects.get(roll=roll)
    if not Performance.objects.filter(roll=student_roll,sem=sem).exists():
        registered_data, no_of_pass_data ,no_of_backlog = get_no_of_pass_count(student_roll,sem)
        # print("inside perr")
        per_data = add_student_performance(roll,sem)
        # print("inside agter")
        TCR  = per_data[0]
        TCP  = per_data[1]
        SCGPA  = per_data[2]
        student_roll = Student.objects.get(roll=roll)
        # no_of_backlog = registered_data - no_of_pass_data
        
        if no_of_backlog == 0:
            passed = True
            had_backlog = False
        else:
            passed = False
            had_backlog = True
            
        perform = Performance(roll=student_roll, regulation=sem.regulation,sem=sem,
                                registered=registered_data, no_of_pass=no_of_pass_data, 
                                no_of_backlog=no_of_backlog, passed=passed,
                                TCR=TCR, TCP=TCP, SCGPA=SCGPA, batch=student_roll.batch,had_backlog=had_backlog)
        perform.save()  
        get_perform = Performance.objects.get(id=perform.id)
        subjs = Subjects.objects.all().filter(sem=sem,roll=student_roll)
        for j in subjs:
            sub = Subjects.objects.get(id=j.id)
            get_perform.subject.add(sub)
            get_perform.save()
        
        print(f"Performance Table created Successfully for {student_roll} for semester : {sem}")
            
    else:
        print(f"!!! ....  Performance Table cannot not created for {student_roll} for semester : {sem}")



def fetch_and_add_student_sem(roll,sem,branch):
    student = Student.objects.get(roll=roll)
    branch_obj = student.branch
    result = get_formated_result(roll,branch)
    print(f"Branch : {student.branch} Regultaion : {student.regulation} Batch: {student.batch} Section: {student.section}")
    # print(result)
    result = result[str(sem)]

    if len(result) == 0:
        msg= f"\n\n\n \t Data not exists !!!!!!!!!!  --------- SKipping the student {roll}  sem: {sem} branch: {branch} \n\n\n\n"
        print(msg)
        return {"error":msg}
    subj = get_subject_from_fetch_obj(result)

    # print("-------------------------========================================--------------------------------")
    # print(subj)
    
    # print("-------------------------========================================--------------------------------")

    sem = check_sem_exist(result,student.branch,student.batch,student.regulation,sem,subj)

    add_subject(result,roll,sem)
    add_preformance_table(roll,sem)

    msg = f"successfully added student data of {roll} sem:{sem} branch: {branch}"
    

    return {"success": msg}
    # else:
    #     msg = f"Failed to add data for the student {roll} and sem: {sem} branch:{branch}"
    #     print(msg)
    #     return {"error":msg}








# Toppers Data API for single semester

def get_topper_data(sem_id):
    sem = Semester.objects.get(id=sem_id)
    # sem = convert_num_to_sem(sem)
    batch  = Batch.objects.get(id=sem.batch.id)
    # branch_obj = Branch.objects.get(id=sem.branch.id)
    # students = Student.objects.filter(batch=batch,branch=branch_obj)
    performance =  Performance.objects.filter(batch=batch,regulation=sem.regulation,sem=sem).order_by('-SCGPA')
    k = 0
    data = []
    for i in performance:
        if k==10:
            break
        data.append({"roll":i.roll.roll,"name":i.roll.name,"sect":i.roll.section,"SCGPA":i.SCGPA})
        k+=1

    return data


def get_section_fail_perc(sem_id,secs):
    
    sem = Semester.objects.get(id=sem_id)
    batch  = Batch.objects.get(id=sem.batch.id)
    branch_obj = Branch.objects.get(id=sem.branch.id)
    failcount = []
    for sec in secs:
        students = Student.objects.filter(batch=batch,branch=branch_obj,section=sec)
        fCount = Subjects.objects.filter(roll__in=(students),sem=sem,branch=branch_obj,batch=batch).aggregate(total=Count(Case(When(result__icontains="F",then=1),output_field=IntegerField())))
        failcount.append(fCount["total"])
    
    data = []
    # print(failcount,sum(failcount))
    if sum(failcount) < 1:
        return failcount

    for i in failcount:
        data.append(int(i/sum(failcount)*100))
    # print(data)
    
    return data


    
def fetch_check_result(batch,sem,branch):
    batch  = Batch.objects.get(id=batch)
    branch_obj = Branch.objects.get(branches=branch.upper())
    if not  Student.objects.filter(batch=batch,branch=branch_obj).exists():
        return 0
    roll = str(Student.objects.filter(batch=batch,branch=branch_obj)[0])
    result = get_formated_result(roll,branch)
    # print(result[str(sem)])
    if len(result[str(sem)]) > 0:
        return 1
    else:
        return 0






def getSubjectDetails(students,sem,batch,reg,branch,code,name):
    k= []
    subs = Subjects.objects.all().filter(roll__in=(students),sem=sem,batch=batch,regulation=reg,branch=branch,code=code,name=name).order_by('roll')
    for sub in subs:
        data ={}
        data["id"] = sub.id
        data["roll"] = sub.roll.roll
        data["name"] = sub.roll.name
        data["credit"] = sub.credit
        data["attendance"] = sub.attendance
        data["grade"] = sub.grade
        data["cgpa"] = sub.cgpa
        data["result"] = sub.fail
        k.append(data)
    return k




# code from below is for digging dashboard


def getSemData(sem):
    reg = Regulation.objects.get(id=sem.regulation.id)
    branch = Branch.objects.get(id=sem.branch.id)
    batch = Batch.objects.get(id=sem.batch.id)
    students = Student.objects.filter(batch=batch,branch=branch,regulation=reg)
    # print(sem.subject)
    subj_list = sem.subject.split(',')
    title_code = title_and_code(subj_list)
    code = title_code[0]
    title = title_code[1]
    data = []
    for i in range(len(code)):
        k = {}
        d = getSubjectDetails(students,sem,batch,reg,branch,code[i],title[i])
        k["name"] = title[i]
        k["code"] = code[i]
        k["data"] = d
        data.append(k)
    return data



from student.models import Performance
from student.models import Student







def filteredStudents(branch,reg,batch,sem,sect,backlog,cgpa):
    if sect == "all":
        st = Student.objects.all().filter(branch=branch,regulation=reg,batch=batch)
    else:
        st = Student.objects.all().filter(branch=branch,regulation=reg,batch=batch,section=int(sect))
    

    # backlog code
    if backlog == "clear":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem,passed=True,no_of_backlog=0).only("roll").distinct()
    elif backlog == "all":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem,passed=False).only("roll").distinct()
    elif str(backlog) == "1":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem,passed=False,no_of_backlog=1,had_backlog=True).only("roll").distinct()
    elif str(backlog) == "2":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem,passed=False,no_of_backlog=2,had_backlog=True).only("roll").distinct()
    elif str(backlog) == "3":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem,passed=False,no_of_backlog=3,had_backlog=True).only("roll").distinct()
    elif str(backlog) == "4":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem,passed=False,no_of_backlog=4,had_backlog=True).only("roll").distinct()
    elif str(backlog) == "5":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem,passed=False,no_of_backlog__gte=4,had_backlog=True).only("roll").distinct()
    

    # print(perform)
    # print("-----------------------------------")
    
    st = [i.roll for i in perform]

    # for i in perform:
    #     st.append(i.roll)
    

    if str(cgpa) == "all":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem)
    elif str(cgpa) == "9":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem,SCGPA__gte=9).only("roll").distinct()
    elif str(cgpa) == "8":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem,SCGPA__gte=8).only("roll").distinct()
    elif str(cgpa) == "7":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem,SCGPA__gte=7).only("roll").distinct()
    elif str(cgpa) == "6":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem,SCGPA__gte=6).only("roll").distinct()
    elif str(cgpa) == "5":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem,SCGPA__gte=5).only("roll").distinct()
    elif str(cgpa) == "4":
        perform = Performance.objects.all().filter(roll__in=(st),sem=sem,SCGPA__lte=5).only("roll").distinct()


    
        
    
    # print(perform)
    # print(len(perform))

    return perform


    # Retrieving student numbers after 

    # cgpa code

    
    
    

def tableDetails(performs):
    # print(performs)


    d = {}

    for perform in performs:
        # print(per)
        for per in perform:
            if per.roll.roll not in d:
                detail = {}
                detail["name"] = per.roll.name
                detail["sect"] = per.roll.section
                detail["roll"] = per.roll.roll
                detail["email"] = per.roll.roll + "@gvpce.ac.in"

                detail["sem"] = [{"sem":f"{per.sem.name} Semeseter","scgpa":per.SCGPA,"backlogs":per.no_of_backlog}]

                d[per.roll.roll] = detail
            else:
                d[per.roll.roll]["sem"].append({"sem":f"{per.sem.name} Semeseter","scgpa":per.SCGPA,"backlogs":per.no_of_backlog})
    # print("---------------")
    # print(d)
    k = []

    for i in d:
        k.append(d[i])
    return k
        


from turtle import back
from numpy import roll
from student.models import Batch,Branch, Performance,Semester, Student



def get_select_sem_backlog_analysis(sem):
    sem = Semester.objects.get(id=sem.id)
    students = Student.objects.filter(sem=sem.id)
    backlog_count = 0
    for i in students:
        if Performance.objects.filter(roll=i.id).exists():
            perf = Performance.objects.get(roll=i.id,sem=sem.id)
            if perf.had_backlog == True:
                backlog_count += 1
    return {"semName":sem.name,"backlogCount":backlog_count}




def get_sem_wise_backlog_analysis(sems, batch, branch):
    data = []

    for sem in sems:
        data.append(get_select_sem_backlog_analysis(sem))
    print(data)
    return data






# in this file i'm using quick sort to sort the list of students
# Sorting based on the top performer



def partition(arr,low,high):
    i = low-1
    pivot = arr[high]
    for j in range(low,high):
        if arr[j]["CGPA"] <= pivot["CGPA"]:
            i += 1
            arr[i],arr[j] = arr[j], arr[i]
    
    arr[i+1], arr[high] = arr[high], arr[i+1]   
    return (i+1)


def quickSort(arr,low,high):
    if low < high:
        pi = partition(arr,low,high)
        quickSort(arr,low,pi-1)
        quickSort(arr,pi+1,high)
        
        
# from students.models import Semester
# from result.student.models import Semester
from student.models import Student, Batch, Performance, Semester
from .sort_data import quickSort


# returns list of all the (Stundets) roll numbers present in the batch and branch
def get_all_roll_of_batch(sem,batch_id, branch_id):
    students = Student.objects.filter(batch=batch_id, branch=branch_id)
    roll = []
    for i in students:
        if sem in i.sem.all():
            roll.append(i.roll)
    return roll


#returns the list of students whos data is present in all the semester for the particular batch and branch
def get_roll_in_all_subject(rolls, no_of_sems):
    roll = []
    for i in rolls:
        if rolls.count(i) == no_of_sems:
            roll.append(i)
    return sorted(set(roll))


# this function calculates the CGPA of all the semester in the Batch of that particular student
def get_cgpa_roll(roll):
    roll = Student.objects.get(roll=roll)
    total = 0
    sems_cgpa = []
    for i in roll.sem.all():
        performance = Performance.objects.get(sem=i.id,roll=roll)
        total += performance.SCGPA
        if performance.had_backlog:
            sems_cgpa.append({"sem":performance.sem.name,"semSCGPA":performance.SCGPA,"backLog":True,"noOfBack":performance.no_of_backlog})
        else:
            sems_cgpa.append({"sem":performance.sem.name,"semSCGPA":performance.SCGPA,"backLog":False,"noOfBack":0})
    cgpa = float(str(total/len(roll.sem.all()))[:4])
    # cgpa = total/len(roll.sem.all())
    # {"roll":roll.roll,"CGPA":cgpa}
    return {"roll":roll.roll,"CGPA":cgpa,"data":sems_cgpa}



# returns CGPA of all the students whos data available in all the semester
def all_sems_analysis(sems, batch_id, branch_id):
    rolls = []
    for sem in sems:
        rolls += get_all_roll_of_batch(sem, batch_id , branch_id) # returns all the Students multiple times and store in a list
    roll = get_roll_in_all_subject(rolls, len(sems)) # filter and get list of students whos data is in all semester
    data = []
    all_students = []
    for i in roll:
        cgpa = get_cgpa_roll(i)
        data.append(cgpa)
        all_students.append(cgpa)
    quickSort(data,0,len(data)-1)
    top_data = data[::-1]
    temp  = []
    rank = 1
    for i in top_data:
        d = i
        d["rank"] = rank
        temp.append(d)
        rank+=1
    data = {"all_data":all_students,"top_data":temp}
    return data


# subj wise backlog in all section and
# sem wise backlog list
    
            




    
    
    
    
    
 from re import S
from traceback import print_tb

from scipy.fftpack import tilbert
from .back_log_handler import add_backlog, add_student_performance
from student.preprocesssing import get_subj_list, get_transformed_data
from .models import BacklogSubject, Batch, Performance, Semester, Subjects,Student,Regulation, Branch
import pandas as pd
import numpy as np

def extract_name(subj_name):
    names = subj_name.split("-")
    if len(names) > 1:
        code = names[0].strip()
        name = names[1].strip()
        return [code,name]
    else:
        return names
    
def add_student(sem,roll):
    batch = Batch.objects.get(id=sem.batch.id)
    print(roll)
    for i in range(len(roll)):
        if Student.objects.filter(roll=roll[i]).exists():
            student = Student.objects.get(roll=roll[i])
            print(student)
            print("inside iff")
            if sem not in student.sem.all() and student.branch == sem.branch and student.regulation == sem.regulation:
                student.sem.add(sem)
                student.save() 
            else:
                print("inside")
                return False
        else:
            print("inside else")
            student = Student(roll=roll[i], regulation= sem.regulation, branch=sem.branch,batch=batch)
            student.save()
            student.sem.add(sem)
            student.save()
    return True



def add_subject(data,subj_name,code,sem,roll):
    credit = list(map(float,data["Credit"]))
    batch = Batch.objects.get(id=sem.batch.id)
    # print(type(credit[1]))
    # print(credit[1])
    # print(type(credit))
    cgpa = list(map(float,data["CGPA"]))
    for i in range(len(data)):
        attendance_data = data["Attendance"]
        result_data = data["Result"]
        credit_data = credit[i]
        grade_data = data["Grade"]
        cgpa_data = cgpa[i]
        student_roll = Student.objects.get(roll=roll[i])
        # sem should be removed to maintain unique constraint
        if Subjects.objects.filter(code=code,roll=student_roll,sem=sem,batch=batch).exists():
            pass
        else:
            subj = Subjects(roll=student_roll,name=subj_name,code=code,branch=sem.branch, regulation=sem.regulation,
                            sem=sem,credit=credit_data,result=result_data[i],attendance=attendance_data[i],
                            batch=batch,grade=grade_data[i],cgpa=cgpa_data)
            subj.save()
            
            subj = Subjects.objects.get(id=subj.id)
            if subj.result == "F":
                subj.fail = True
                subj.save()
                add_backlog(subj,student_roll)
            
        # print(f"{roll[i]} for {subj_name} having Attendance of {attendance_data[i]} and result is {result_data[i]} \n credit is {credit_data[i]} grade is {grade_data[i]} cgpa is {cgpa_data[i]}")
    
        


def add_performance_sem(data,roll,sem):
    data["Registered"] = list(map(int,data["Registered"]))
    data["Pass"] = list(map(int,data["Pass"]))
    data["TCR"] = list(map(float,data["TCR"]))
    data["TCP"] = list(map(float,data["TCP"]))
    data["SCGPA"] = list(map(float,data["SCGPA"]))
    
    batch = Batch.objects.get(id=sem.batch.id)
    
    for i in range(len(data)):
        registered_data = data["Registered"]
        no_of_pass_data = data["Pass"]
        # TCR_data = data["TCR"]
        # TCP_data = data["TCP"]
        # scgpa = data["SCGPA"]
        per_data = add_student_performance(roll[i],sem)
        TCR  = per_data[0]
        TCP  = per_data[1]
        SCGPA  = per_data[2]
        student_roll = Student.objects.get(roll=roll[i])
        no_of_backlog = registered_data[i] - no_of_pass_data[i]
        
        if no_of_backlog < 1:
            passed = True
            had_backlog = False
        else:
            passed = False
            had_backlog = True
            
        perform = Performance(roll=student_roll, regulation=sem.regulation,sem=sem,
                              registered=registered_data[i], no_of_pass=no_of_pass_data[i], 
                              no_of_backlog=no_of_backlog, passed=passed,
                              TCR=TCR, TCP=TCP, SCGPA=SCGPA, batch=batch,had_backlog=had_backlog)
        perform.save()  
        get_perform = Performance.objects.get(id=perform.id)
        subjs = Subjects.objects.all().filter(sem=sem,roll=student_roll)
        for j in subjs:
            sub = Subjects.objects.get(id=j.id)
            get_perform.subject.add(sub)
            get_perform.save()
        


def check_repeated_subj(data,bra,reg,batch):
    sems = Semester.objects.filter(branch=bra,regulation=reg,batch=batch)
    # for i in sems:
    #     if i.subject == subjs:
    #         return False
    #     s = i.subject.split(",")
    #     for j in s:
    #         if j in title:
    #             return False
    return True
    
def check_repeated_sem(title,sem):
    sems = Semester.objects.filter(branch=sem.branch,regulation=sem.regulation,batch=sem.batch)
    if len(sems) > 1:
        subjs = ",".join(title[:-1])
        print(title,"-"*10)
        for i in sems:
            if i.subject == subjs and i.id != sem.id:
                return False
            s = i.subject.split(",")
            print("-------------------------- new-----------------")
            print(s)
            if len(s) > 1 and i.id != sem.id:
                for j in s:
                    print(j)
                    if j in title:
                        print("fkadsdsnlsklllllllllllllllllllllllllll")
                        return False
            
    return True
    
    
def split_data(data,sem_id):
    sem = Semester.objects.get(id=sem_id)
    data = pd.read_excel(data)
    title = get_subj_list(data,6)
    
    sem.subject = ",".join(title[:-1])
    sem.save()
    if not check_repeated_sem(title,sem):
        return False
    di = get_transformed_data(data)
    # sem.subject = ",".join(title[:-1])
    # sem.save()
    
    
    
    
    # compulsory add this line to add new students in the database
    
    if not add_student(sem,di[1]):
        print("please check your file. it may contain inconsistent data")
        return False
    # d1 = di[0][title[-1]]
    for i in di[0].keys():
        code_and_subj = extract_name(i)
        if len(code_and_subj) > 1:
            subj_name = code_and_subj[1]
            code = code_and_subj[0]
            data = di[0][i]
            add_subject(data,subj_name,code,sem,di[1])
            
        else:
            add_performance_sem(di[0][i],di[1],sem)
            
    return True



def add_or_update_student_details(data,branch,reg,batch):
    names = list(data["name"])
    rolls = list(data["roll"])
    secs = list(data["sec"])
    if Student.objects.filter(regulation=reg, branch=branch, batch=batch).exists():
        for i in range(len(data)):
            if Student.objects.filter(regulation=reg, branch=branch, batch=batch,roll=rolls[i]).exists():
                # print(rolls[i])
                if Student.objects.filter(regulation=reg, branch=branch, batch=batch,roll=rolls[i],section=10).exists():
                    student = Student.objects.get(regulation=reg, branch=branch, batch=batch,roll=rolls[i],section=10)
                    student.section = secs[i]
                    if not pd.isna(names[i]):
                        student.name = names[i]
                    student.save()
                else:
                    pass
            else:
                st = Student.objects.filter(regulation=reg, branch=branch, batch=batch,roll=rolls[i])
                sp = Student.objects.get(roll="20131A0516")
                # print(sp,sp.regulation,sp.batch,sp.branch)
                # print(st)
                # print(reg,branch,batch)
                name = names[i]
                roll = rolls[i]
                sec = secs[i]
                student = Student(roll=roll,name=name,section=sec,regulation=reg, branch=branch, batch=batch)
                student.save()
    else:
        for i in range(len(data)):
            name = names[i]
            roll = rolls[i]
            sec = secs[i]
            if not  Student.objects.filter(roll=roll).exists():
                student = Student(roll=roll,section=sec,regulation=reg, branch=branch, batch=batch)
                student.save()
                if not pd.isna(names[i]):
                    student.name = names[i]
                student.save()


# add student with section and name details
def split_data_student(data, branch, reg, batch):
    data = pd.read_excel(data)
    # print(data)
    data = data.iloc[:,1:]
    print(data)
    add_or_update_student_details(data,branch,reg,batch)
    



            
    
    
    from django.contrib import admin
from .models import Attempt, BacklogData, BacklogSubject, Batch, Branch, Performance, Regulation, Semester, Student, StudentDetails, Subjects
# Register your models here.

class VideoAdminModel(admin.ModelAdmin):
    search_fields=('roll','section','regulation','branch')
    list_display = ('roll','name','branch','regulation','batch','section')
    list_filter = ('section','branch','regulation')
    list_display_links = ('roll','section')


class StudentDetailsAdmin(admin.ModelAdmin):
    search_fields = ('roll','name')
    list_display = ('name','roll','dob','aadhar')
    list_display_links = ('name','roll')


class SemesterAdmin(admin.ModelAdmin):
    search_fields = ('name',)
    list_display = ('name','branch','batch','regulation')
    list_filter = ('name','branch','batch','regulation')
    list_display_links = ('name',)

class SubjectAdmin(admin.ModelAdmin):
    search_fields=('name','code','sem')
    list_display = ('roll','name','code','branch','batch','sem','result')
    list_filter = ('sem','branch','result','fail')
    list_display_links = ('name','code','roll')




admin.site.register([Branch,Regulation,Subjects,Performance, BacklogSubject ,Attempt, Batch,BacklogData])
admin.site.register(Student,VideoAdminModel)
admin.site.register(StudentDetails,StudentDetailsAdmin)
admin.site.register(Semester,SemesterAdmin)
# admin.site.register(Subjects)


import pandas as pd
from student.models import Regulation
from student.models import Attempt, BacklogSubject, Batch, Semester, Student, Subjects, Performance
from student.preprocesssing import get_subj_list #, get_transformed_data



def add_student_performance(roll,sem):
    # print(roll,sem)
    grade = {"O":10,"A+":9,"A":8,"B+":7,"B":6,"C":5,"F":0,"AB":0,"D":0,"H":0}
    # grade = {"A+":10,"A":9,"B":8,"C":7,"D":6,"E":5,"F":0,"AB":0}
    if Student.objects.filter(roll=roll).exists():
        student = Student.objects.get(roll=roll)
        subj = Subjects.objects.all().filter(roll=student,sem=sem)
        # print(student.regulation)
        # print()
        reg = Regulation.objects.get(regulation=student.regulation.regulation)
        credit = [sub.credit for sub in subj]
        grade_val = [sub.grade for sub in subj]
        # print(student,credit,grade_val)
        
        CP = []
        for i in range(len(credit)):
            # print(grade[grade_val[i]], credit[i])
            # print(credit[i]*grade[grade_val[i]])
            # print(reg.grades)
            # print(grade_val[i])
            CP.append(credit[i]*reg.grades[grade_val[i]]) 
        TCR = sum(credit)
        # for i in grade_val:
        #     TCR += grade[i]
        TCP = sum(CP)

        # print(TCP,TCR)
        
        if sum(credit) > 0:
            SCGPA = TCP/sum(credit)
        else:
            SCGPA = 0

        
        return [TCR, TCP,SCGPA ]
    else:
        print(roll)
        

def add_backlog(subj,student_roll):
    subj = Subjects.objects.get(id=subj.id)
    batch = Batch.objects.get(id=subj.batch.id)
    sem = subj.sem
    reg = subj.regulation
    branch = subj.branch
    code = subj.code
    subj_name = subj
    if subj.roll.roll == student_roll.roll:
        backlog = BacklogSubject(roll=student_roll,sem=sem,reg=reg,branch=branch,subj_code=code,subject=subj_name,count=1,
                                 batch=batch)
        backlog.save()

def update_performance(subj):
    # print(subj.name,subj.sem.name, subj)
    perf = Performance.objects.get(sem=subj.sem,roll=subj.roll)
    perf.no_of_pass += 1
    perf.no_of_backlog -=1
    data = add_student_performance(subj.roll.roll,subj.sem)
    perf.TCR = data[0]
    perf.TCP = data[1]
    perf.SCGPA = data[2]
    
    if perf.no_of_backlog == 0:
        perf.passed = True
    perf.save()

def update_subject(attmpt):
    subj = Subjects.objects.get(id=attmpt.subj.id, sem=attmpt.sem)
    subj.fail = False
    subj.credit = attmpt.credit
    subj.result = attmpt.result
    subj.attendance = attmpt.attendance
    subj.grade = attmpt.grade
    subj.cgpa = attmpt.cgpa
    subj.save()
    
    update_performance(subj)
        
def add_attempt_details(subject,sem,data,student_roll,attendance_data,batch,credit_data,result_data,grade_data,cgpa_data):
    
    sbj = Subjects.objects.get(id=subject.id)
    if sbj.fail == False:
        return None
    
    if result_data.lower() == "p":
        passed = True
    else:
        passed = False
        
    attmpt = Attempt(roll=student_roll,subj=subject,sem=sem,
                     batch=batch,credit=credit_data,result=result_data,
                     attendance=attendance_data,grade=grade_data,cgpa=cgpa_data,passed=passed)
    attmpt.save()
    attmpt.back_log.add(data)
    attmpt.save()
    
    backsubj = BacklogSubject.objects.get(id=data.id)
    backsubj.count += 1
    backsubj.passed = passed
    backsubj.save()
    
    if passed == True:
        update_subject(attmpt)
    
    
# def add_attempt(data,subj_name,code,sem,roll):
#     credit = list(map(float,data["Credit"]))
#     batch = Batch.objects.get(id=sem.batch.id)
#     cgpa = list(map(float,data["CGPA"]))
    
    
#     for i in range(len(data)):
#         attendance_data = data["Attendance"]
#         result_data = data["Result"]
#         credit_data = credit[i]
#         grade_data = data["Grade"]
#         cgpa_data = cgpa[i]
#         student_roll = Student.objects.get(roll=roll[i])
#         if BacklogSubject.objects.filter(roll=student_roll).exists():
#             back_subj_data = BacklogSubject.objects.all().filter(roll=student_roll)
#             if len(back_subj_data) > 1:
#                 for back_data in back_subj_data:
#                     if back_data.subject.name == subj_name:
#                         add_attempt_details(back_data.subject,back_data.sem,back_data,student_roll,attendance_data[i],batch,credit_data,result_data[i],grade_data[i],cgpa_data)
#             else:
#                 back_data = back_subj_data[0]
#                 if back_data.subject.name == subj_name:
#                     add_attempt_details(back_data.subject,back_data.sem,back_data,student_roll,attendance_data[i],batch,credit_data,result_data[i],grade_data[i],cgpa_data)
               
               
    
def add_attempt(Roll, Attendance,Result,Credit,Grade,CGPA,subj_name,code,sem):
    credit = float(Credit)
    batch = Batch.objects.get(id=sem.batch.id)
    cgpa = float(CGPA)
    
    student_roll = Student.objects.get(roll=Roll)
    if BacklogSubject.objects.filter(roll=student_roll).exists():
        back_subj_data = BacklogSubject.objects.all().filter(roll=student_roll)
        if len(back_subj_data) > 1:
            for back_data in back_subj_data:
                if back_data.subject.name == subj_name:
                    add_attempt_details(back_data.subject,back_data.sem,back_data,student_roll,Attendance,batch,credit,Result,Grade,CGPA)
        else:
            back_data = back_subj_data[0]
            if back_data.subject.name == subj_name:
                add_attempt_details(back_data.subject,back_data.sem,back_data,student_roll,Attendance,batch,credit,Result,Grade,CGPA)
               

# Backlog filr data handler


def get_transformed_data(data):
    num_of_subj = get_subj_list(data,6)
    count = len(num_of_subj)
    data = data.iloc[11:,1:]
    data = data.dropna()
    subj_dict = {}
    for i in range(1,count+1):
        subj_dict[num_of_subj[i-1]] = ""
    roll = data.iloc[:,0]
    roll = roll.reset_index(drop=True)
    data = data.iloc[:,1:]
    data = data.reset_index(drop=True)
    for i in range(count):
        if count - i == 1:
            subj_data = data.iloc[:,i*5:(i*5)+5]
            subj_data.rename(columns={f"Unnamed: {(i*5)+2}":"Registered",f"Unnamed: {(i*5)+3}":"Pass",f"Unnamed: {(i*5)+4}":"TCR",f"Unnamed: {(i*5)+5}":"TCP",f"Unnamed: {(i*5)+6}":"SCGPA"},inplace=True)
            subj_data["Roll"] = roll
        else:
            subj_data = data.iloc[:,i*5:(i*5)+5]
            subj_data.rename(columns={f"Unnamed: {(i*5)+2}":"Attendance",f"Unnamed: {(i*5)+3}":"Result",f"Unnamed: {(i*5)+4}":"Credit",f"Unnamed: {(i*5)+5}":"Grade",f"Unnamed: {(i*5)+6}":"CGPA"},inplace=True)
            subj_data["Roll"] = roll
        subj_dict[list(subj_dict.keys())[i]] = subj_data
    return [subj_dict,roll]






def extract_name(subj_name):
    names = subj_name.split("-")
    if len(names) > 1:
        code = names[0].strip()
        name = names[1].strip()
        return [code,name]
    else:
        return names

def split_data_backlog(data,sem_id):
    sem = Semester.objects.get(id=sem_id)
    data = pd.read_excel(data)
    title = get_subj_list(data,6)
    di = get_transformed_data(data)
    # # compulsory add this line to add new students in the database
    # # add_student(sem,di[1])
    # # d1 = di[0][title[-1]]
    for i in di[0].keys():
        code_and_subj = extract_name(i)
        if len(code_and_subj) > 1:
            subj_name = code_and_subj[1]
            code = code_and_subj[0]
            data = di[0][i]
            for i in range(len(data["Result"])):
                if "p" in data["Result"][i] or "f" in data["Result"][i]:
                    # print(data["Roll"][i], subj_name, data["Attendance"][i], data["Result"][i], data["Credit"][i],data["Grade"][i],data["CGPA"][i])
                    add_attempt(data["Roll"][i], data["Attendance"][i], data["Result"][i], data["Credit"][i],data["Grade"][i],data["CGPA"][i],subj_name,code,sem)
            
        # else:
        #     add_performance_sem(di[0][i],di[1],sem)
            

        
            
            
from email.policy import default
from http.cookies import Morsel
from django.db import models
import os

# Create your models here.

def path_and_rename(instance, filename):
    upload_to = "Excel/"
    ext = filename.split('.')[-1]
    if instance.name:
        filename = f"files/{instance.regulation.regulation}/{instance.branch}/{instance.name}.{ext}"
    return os.path.join(upload_to, filename)

def path_and_rename_backlog(instance, filename):
    upload_to = "Excel/"
    ext = filename.split('.')[-1]
    if instance.branch:
        filename = f"files/backlog/{instance.regulation.regulation}/{instance.branch}/{instance.sem.name}.{ext}"
    return os.path.join(upload_to, filename)


class Branch(models.Model):
    branches = models.CharField(max_length=50)
    
    def __str__(self):
        return self.branches
    
    class Meta:
        verbose_name_plural = "Branches"


# class GradingSystem(models.Model):
#     name = models.CharField(max_length=200)
#     year = models.CharField(max_length=50)
#     # 30 -> A+  
#     # 27 -> A
#     # 24 -> B+
#     g_10 = models.CharField(max_length=10)
#     g_9 = models.CharField(max_length=10)
#     g_8 = models.CharField(max_length=10)
#     g_7 = models.CharField(max_length=10)
#     g_6 = models.CharField(max_length=10)
#     g_5 = models.CharField(max_length=10)
#     fail = models.CharField(max_length=10)

#     class Meta:
#         verbose_name_plural = "GradingSystem"
    
#     def __str__(self):
#         return self.name + self.year
    
    
class Regulation(models.Model):
    regulation = models.CharField(max_length=50,unique=True)
    year = models.CharField(max_length=50)
    grades = models.JSONField(blank=True)
    # grades = models.ForeignKey(GradingSystem, on_delete=models.CASCADE)
    
    def __str__(self):
        return f"{self.regulation} for year {self.year}"

class Batch(models.Model):
    name = models.CharField(max_length=100)
    reg = models.ForeignKey(Regulation,on_delete=models.CASCADE)
    
    # start_year = models.DateField(blank=True)
    # end_year = models.DateField(blank=True)
    
    def __str__(self):
        return f"{self.reg.regulation} of batch {self.name}"
    
    

class Semester(models.Model):
    name = models.CharField(max_length=10)
    regulation = models.ForeignKey(Regulation,on_delete=models.CASCADE)
    branch = models.ForeignKey(Branch, on_delete=models.CASCADE)
    batch = models.ForeignKey(Batch,on_delete=models.CASCADE)
    subject = models.CharField(max_length=1000,blank=True)
    year = models.DateTimeField(auto_now_add=True)
    file = models.FileField(upload_to=path_and_rename, verbose_name="Excel FIle", blank=True)
    
    def __str__(self):
        return f"{self.name}  of {self.regulation.regulation} in {self.branch.branches} of Batch {self.batch.name}"
    
    class Meta:
        verbose_name_plural = "Semesters"
    
    # def all_subject(self):
    #     subj = Subjects.objects.all().filter(sem=self.id)
    #     return subj

    
class Student(models.Model):
    roll = models.CharField(max_length=15,unique=True)
    name = models.CharField(max_length=120,blank=True)
    # gender = models.CharField(c)
    regulation = models.ForeignKey(Regulation,on_delete=models.CASCADE)
    branch = models.ForeignKey(Branch,on_delete=models.CASCADE)
    sem = models.ManyToManyField(Semester)
    batch = models.ForeignKey(Batch,on_delete=models.CASCADE)
    section = models.IntegerField(default=1,blank=True)

    def __str__(self):
        return self.roll
    
    def sems(self):
        sems = Semester.objects.all().filter(regulation=self.regulation)
        return sems
      
    class Meta:
        verbose_name_plural = "Students"
    



class StudentDetails(models.Model):
    roll = models.ForeignKey(Student,on_delete=models.CASCADE)
    name = models.CharField(max_length=250,blank=True)
    father = models.CharField(max_length=250,blank=True)
    mother = models.CharField(max_length=250,blank=True)
    dob = models.DateField(blank=True)
    dobstr = models.CharField(max_length=50,blank=True)
    nationality = models.CharField(max_length=50,blank=True)
    religion = models.CharField(max_length=50,blank=True)
    father_occupation = models.CharField(max_length=50,blank=True)
    mother_occupation = models.CharField(max_length=50,blank=True)
    mobile = models.CharField(max_length=20,blank=True)
    alter_mobile = models.CharField(max_length=20,blank=True)
    mail = models.EmailField(max_length=40,blank=True)
    alter_mail = models.EmailField(max_length=40,blank=True)
    aadhar = models.EmailField(max_length=20,blank=True)
    address = models.TextField(max_length=200,blank=True)

    class Meta:
        verbose_name_plural = "StudentDetails"

class Subjects(models.Model):
    roll = models.ForeignKey(Student,on_delete=models.CASCADE)
    name = models.CharField(max_length=150)
    code = models.CharField(max_length=20)
    branch = models.ForeignKey(Branch,on_delete=models.CASCADE)
    regulation = models.ForeignKey(Regulation,on_delete=models.CASCADE)
    sem = models.ForeignKey(Semester,on_delete=models.CASCADE)
    batch = models.ForeignKey(Batch,on_delete=models.CASCADE)
    credit = models.FloatField()
    result = models.CharField(max_length=20,blank=True)
    attendance = models.CharField(max_length=5,blank=True)
    grade = models.CharField(max_length=5,blank=True)
    cgpa = models.FloatField()
    fail = models.BooleanField(default=False)
    subjtype = models.BooleanField(default=False)
    type = models.CharField(max_length=100,blank=True)
    # semester = models.ManyToManyField(Semester)
    def __str__(self):
        return f"{self.name} of  {self.roll.roll} during {self.sem.name} got cgpa of {self.cgpa}"
    
    class Meta:
        verbose_name_plural = "Subjects"
        

class BacklogSubject(models.Model):
    roll = models.ForeignKey(Student,on_delete=models.CASCADE)
    branch = models.ForeignKey(Branch,on_delete=models.CASCADE)
    reg = models.ForeignKey(Regulation,on_delete=models.CASCADE)
    sem = models.ForeignKey(Semester,on_delete=models.CASCADE)
    subject = models.ForeignKey(Subjects,on_delete=models.CASCADE)
    batch = models.ForeignKey(Batch,on_delete=models.CASCADE)
    subj_code = models.CharField(max_length=20)
    date = models.DateTimeField(auto_now_add=True)
    count = models.IntegerField(default=1)
    passed = models.BooleanField(default=False)
    
    class Meta:
        verbose_name_plural = "BackLogSubject"
        
    def __str__(self):
        return f"{self.roll.roll} had failed in {self.subject.name}"
    

    

class Attempt(models.Model):
    roll = models.ForeignKey(Student,on_delete=models.CASCADE)
    back_log = models.ManyToManyField(BacklogSubject)
    subj = models.ForeignKey(Subjects,on_delete=models.CASCADE)
    sem = models.ForeignKey(Semester,on_delete=models.CASCADE)
    batch = models.ForeignKey(Batch,on_delete=models.CASCADE)
    credit = models.FloatField()
    result = models.CharField(max_length=20,blank=True)
    attendance = models.CharField(max_length=5,blank=True)
    grade = models.CharField(max_length=5,blank=True)
    cgpa = models.FloatField()
    passed = models.BooleanField(default=True)
    
    class Meta:
        verbose_name_plural = "AttemptBacklog"
    
    def __str__(self):
        return f"{self.roll.roll} for subject {self.subj.name} in {self.sem.name}"
    
    
    


class Performance(models.Model):
    roll = models.ForeignKey(Student,on_delete=models.CASCADE)
    regulation = models.ForeignKey(Regulation, on_delete=models.CASCADE)
    sem = models.ForeignKey(Semester,on_delete=models.CASCADE)
    batch = models.ForeignKey(Batch,on_delete=models.CASCADE)
    subject = models.ManyToManyField(Subjects)
    registered = models.IntegerField(blank=True)
    no_of_pass = models.IntegerField(blank=True)
    TCR = models.FloatField(blank=True)
    TCP = models.FloatField(blank=True)
    SCGPA = models.FloatField(blank=True)
    no_of_backlog = models.IntegerField()
    passed = models.BooleanField(default=True)
    had_backlog = models.BooleanField(default=False)
    
    
    def __str__(self):
        return f"{self.roll} got SCGPA of {self.SCGPA} for {self.sem.name} semester"
    
    def save(self, *args, **kwargs):
        self.SCGPA = round(self.SCGPA, 2)
        super(Performance, self).save(*args, **kwargs)
    
    
    
    
class BacklogData(models.Model):
    date = models.DateTimeField(auto_now_add=True)
    regulation = models.ForeignKey(Regulation, on_delete=models.CASCADE)
    sem = models.ForeignKey(Semester,on_delete=models.CASCADE)
    batch = models.ForeignKey(Batch,on_delete=models.CASCADE)
    branch = models.ForeignKey(Branch,on_delete=models.CASCADE)
    # name = models.CharField(max_length=100)
    file = models.FileField(upload_to=path_and_rename_backlog, verbose_name="Excel FIle", blank=True)
    
    class Meta:
        verbose_name_plural = "BackLogDATA"
    







    








from genericpath import exists
import pandas as pd
from student.models import Batch, Regulation, Semester
from student.models import Student, Subjects
pd.options.mode.chained_assignment = None


def regGrades(reg):
    grades = reg.grades
    result = []
    # print(grades)
    for grade,value in grades.items():
        k = {}
        k["grade"] = grade
        k["value"] = value
        result.append(k)
    return result
    




def convert_num_to_sem(num):
    sems = {1:"I",2:"II",3:"III",4:"IV",5:"V",6:"VI",7:"VII",8:"VIII"}
    return sems[num]



def lst_of_sect_of_sem(students):
    secs = []
    for i in students:
        if i.section not in secs and  i.section != 10:
            secs.append(i.section)
    
    return secs 


def get_subj_list(data,row_index):
    title = data.iloc[row_index]
    title = title.dropna()[2:]
    return list(title)

def get_transformed_data(data):
    print('tt')
    num_of_subj = get_subj_list(data,6)
    count = len(num_of_subj)
    data = data.iloc[8:,1:]
    print(data.iloc[:10])
    data = data.dropna()
    subj_dict = {}
    for i in range(1,count+1):
        subj_dict[num_of_subj[i-1]] = ""
    roll = data.iloc[:,0]
    roll = roll.reset_index(drop=True)
    data = data.iloc[:,1:]
    data = data.reset_index(drop=True)
    for i in range(count):
        if count - i == 1:
            subj_data = data.iloc[:,i*5:(i*5)+5]
            subj_data.rename(columns={f"Unnamed: {(i*5)+2}":"Registered",f"Unnamed: {(i*5)+3}":"Pass",f"Unnamed: {(i*5)+4}":"TCR",f"Unnamed: {(i*5)+5}":"TCP",f"Unnamed: {(i*5)+6}":"SCGPA"},inplace=True)
            subj_data["Roll"] = roll
        else:
            subj_data = data.iloc[:,i*5:(i*5)+5]
            subj_data.rename(columns={f"Unnamed: {(i*5)+2}":"Attendance",f"Unnamed: {(i*5)+3}":"Result",f"Unnamed: {(i*5)+4}":"Credit",f"Unnamed: {(i*5)+5}":"Grade",f"Unnamed: {(i*5)+6}":"CGPA"},inplace=True)
            subj_data["Roll"] = roll
        subj_dict[list(subj_dict.keys())[i]] = subj_data
    return [subj_dict,roll]


def describe_about_column(data):
    data = pd.Series(data)
    data_describe = dict(data.value_counts())
    return data_describe

def get_subject_analysis(sem,subj):
    subject_data = Subjects.objects.all().filter(name=subj)
    attnd = [data.cgpa for data in subject_data]
    attnd_value_count = describe_about_column(attnd)
    result = [data.result for data in subject_data]
    result_value_count = describe_about_column(result)
    num_of_failes = result_value_count['F']
    grade = [data.grade for data in subject_data]
    grade_value_count = describe_about_column(
        grade)
    
    




def get_section_list(students):
    sect = {}
    for stu in students:
        if stu.section not in sect:
            sect[stu.section] = 1
        else:
            sect[stu.section] +=1
    
    return sect




# def get_all_batch_for_reg(reg):
#     reg = Regulation.objects.get(id=reg.id)
#     batchs = Batch.objects.all().filter(reg=reg.id)
#     main = []
    
#     for i in batchs:
#         data = {}
#         data["name"] = i.name
#         data["id"] = i.id
#         main.append(data)
#     return main


def get_sem_for_branch(batch,reg,branch):
    reg = Regulation.objects.get(id=reg.id)
    batch = Batch.objects.get(id=batch.id)
    if Semester.objects.all().filter(regulation=reg.id,branch=branch.id,batch=batch.id).exists():
        sems = Semester.objects.all().filter(regulation=reg.id,branch=branch.id,batch=batch.id).order_by('name')
        data = []
        for i in sems:
            temp = {}
            temp["id"] = i.id
            temp["name"] = i.name
            data.append(temp)
        return data
    return []

def get_all_batch_for_reg(reg,branch):
    if  Regulation.objects.filter(id=reg.id).exists():
        reg = Regulation.objects.get(id=reg.id)
        if Batch.objects.all().filter(reg=reg.id).exists():
            
            batchs = Batch.objects.all().filter(reg=reg.id)
            main = []
            for i in batchs:
                data = {}
                data["name"] = i.name
                data["id"] = i.id
                data["sem"] = get_sem_for_branch(i,reg,branch)
                main.append(data)
            return main
        return []
    return []


    


def get_all_reg_for_branch(branch):
    reg = Regulation.objects.all()
    # batchs = Batch.objects.all()
    # print(batchs)
    data = []
    for i in reg:
        sub = {}
        sub["id"] = i.id
        sub["title"] = i.regulation
        sub["year"] = i.year
        sub["data"] = get_all_batch_for_reg(i,branch)
        data.append(sub)    
        
    return data
    


from dataclasses import field
from rest_framework import serializers
from .models import Semester


class SemesterSerializer(serializers.ModelSerializer):
    class Meta:
        model = Semester
        fields = ['name','regulation','branch','batch','file']
        
        
        
from rest_framework.authentication import SessionAuthentication, BasicAuthentication 

class CsrfExemptSessionAuthentication(SessionAuthentication):

    def enforce_csrf(self, request):
        return  # To not perform the csrf check previously happening


from django.urls import path

from . import views
urlpatterns = [
    # path('semester',views.SemView.as_view()),
    path('index',views.index, name="index"),
    # path('upload',views.upload,name="upload"),
    path('data',views.data,name="upload_data"),
    # path('backlog',views.backlogupload,name="backlog"),
    path('backpost',views.backlogdata,name="backlog_data"),
    path('subj/<int:sem_id>',views.get_sem_analysis,name="sem_data"),#----------------
    path('all-subj/<int:sem_id>',views.subj_analysis_all,name="all-subj-analysis"),
    path('student',views.student_detail,name="student"),
    path('student/<int:sem_id>',views.get_sect_analysis,name="student_data"),#-----------
    path('test',views.generate_list_semester, name="test"),
    path('updata',views.get_reg_branch_batch,name="updata"),
    path('backupdata',views.get_back_predata, name="backdata"),
    path('batch/<int:batch_id>/<int:branch_id>',views.get_batch_analysis,name="batch_data"),
    path('batch/sem/<int:batch_id>/<int:branch_id>',views.get_all_sems_backlog,name="Sem_backlog_data"),
    path('fetch_result/<str:roll>/<str:branch>/<int:sem>',views.fetch_result,name="fetch_result"), 
    path('fetch_semester_result/<int:batch>/<int:sem>/<str:branch>',views.fetch_semester_result,name="fetch_semester_result"), 
    path('check_sem_data_exists/<int:batch>/<int:sem>/<str:branch>',views.check_sem_data_exists,name="check_sem_data_exists"), 
    path('fetch_test/<int:num>',views.fetch_test,name="fetch_test"),
    # path('roll/<str:roll>',views.get_roll_details,name="get_roll_details"),
    # path('get_topper_data/<int:batch>/<int:sem>/<str:branch>',views.get_topper_data,name="get_topper_data"),
    path('get_sect_data/<int:sem_id>',views.get_sect_data,name="get_sect_data"),
    path('get_fetch_data',views.get_fetch_data,name="get_fetch_data"),
    path('check_student_exists/<str:roll>',views.check_student_exists,name="check_student_exists"),
    path('get_subj_section_data/<int:sem_id>',views.get_subj_section_data,name="get_subj_section_data"),#-------------------
    path('get_sec_wise_topper_data/<int:batch>/<int:sem>/<str:branch>/<int:sec>',views.get_sec_wise_topper_data,name="get_sec_wise_topper_data"),
    path('get_individual_sem_analysis/<str:roll>',views.get_individual_sem_analysis,name="get_individual_sem_analysis"),
    path('fetchdata1',views.fetchdata1,name="fetchdata1"),
    path('fetchdata2/<int:reg>',views.fetchdata2,name="fetchdata2"),
    path('fetchdata3/<int:reg>/<int:branch>/<int:batch>',views.fetchdata3,name="fetchdata3"),
    path('filter',views.filter,name="filter"),
    path('addreg',views.addreg,name="addreg"),
    path('addbranch',views.addbranch,name="addbranch"),
    path('addbatch',views.addbatch,name="addbatch"),
    path('semWiseBacklogData/<str:roll>',views.semWiseBacklogData,name="addbranch"),
    path('getAllAdminData',views.getAllAdminData,name="getAllAdminData"),
    path('dltBranch',views.dltBranch,name="dltBranch"),
    path('editBranch',views.editBranch,name="editBranch"),
    path('dltRegulation',views.dltRegulation,name="dltRegulation"),
    path('editRegulation',views.editRegulation,name="editRegulation"),
    path('dltBatch',views.dltBatch,name="dltBatch"),
    path('editBatch',views.editBatch,name="editBatch"),
    path('viewSemDetails',views.viewSemDetails,name="viewSemDetails"),
    
]



 
 


from cgi import test
from distutils.command.install_egg_info import safe_name
from json import JSONDecodeError
import json
from pprint import pformat
from traceback import print_tb
from urllib import response
from django.http import request
from django.http.response import HttpResponse, JsonResponse
from django.shortcuts import render
from datetime import datetime
from student.filter.filterPreprocessing import tableDetails
from student.filter.filterPreprocessing import filteredStudents
from student.Fetch.main_code import fetchDetails
from rest_framework import status
from rest_framework.response import Response

from .Fetch.preprocessing import fetch_check_result, get_section_fail_perc, get_topper_data

from .analysis.section_subj_analysis import get_pass_fail_count_of_each_subject, get_pass_fail_count_of_each_subject_for_table
from .preprocesssing import convert_num_to_sem, lst_of_sect_of_sem
from student.Fetch.preprocessing import fetch_and_add_student_sem,getSemData
from student.Fetch.preprocessing import add_preformance_table
from student.Fetch.preprocessing import add_subject,check_sem_exist,get_subject_from_fetch_obj
from student.multi_sem_analysis.Sem_backlog_data_analysis import get_sem_wise_backlog_analysis
from student.multi_sem_analysis.Student_CGPA_analysis import all_sems_analysis
from student.preprocesssing import get_all_batch_for_reg,get_all_reg_for_branch
from student.preprocesssing import  get_section_list,regGrades
from student.add_to_DB import split_data
from .add_to_DB import check_repeated_subj, split_data_student
from student.back_log_handler import split_data_backlog
from .analysis.sem_analysis import get_subject_analysis_data,all_subj,get_sect_data
from .analysis.sect_analysis import  section_analysis
from student.preprocesssing import get_subj_list, get_subject_analysis, get_transformed_data
from .models import BacklogData, Batch, Branch, Performance, Regulation, Semester, Student, StudentDetails, Subjects
import os
import time
import pandas as pd
from rest_framework import status,viewsets
from rest_framework.decorators import api_view
from .serializers import SemesterSerializer,CsrfExemptSessionAuthentication
from rest_framework.parsers import MultiPartParser ,FormParser
from pyexcel_xlsx import get_data
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework.permissions import AllowAny
from django.views.decorators.csrf import csrf_exempt
from student.Fetch.main_code import get_formated_result
from asgiref.sync import sync_to_async
import asyncio
# Create your views here.









######################## --------------- REST API ------------------



# class SemesterViewSet(viewsets.ModelViewSet):
#     queryset = Semester.objects.all()
#     serializer_class = SemesterSerializer
    
#     def post(self, request, *args, **kwargs):
#         name = request.data["name"]
#         reg = request.data["reg"]
#         branch = request.data["branch"]
#         batch = request.data["batch"]
#         file = request.FILES.get('file')
#         data = get_data(file)
#         print(data)
#         sem = Semester.objects.create(name=name,regulation=reg,branch=branch, file=file, batch=batch)
#         split_data(data,sem.id)
#         return HttpResponse({"message": "Book Created"}, status=status.HTTP_200_OK)





class SemView(APIView):
    permission_classes = (AllowAny)
    parser_classes = (MultiPartParser, FormParser)
    def post(self, request, *args, **kwargs):
        name = request.data["name"]
        reg = request.data["reg"]
        branch = request.data["branch"]
        batch = request.data["batch"]
        reg = Regulation.objects.get(id=reg)
        branch= Branch.objects.get(id=branch)
        batch = Batch.objects.get(id=batch)
        sem = Semester.objects.create(name=name,regulation=reg,branch=branch, batch=batch)
        data = request.FILES.get('file')
        sem.file = data
        sem.save()
        split_data(data, sem.id)
        
        return Response({"hi":"hlo"}, status=status.HTTP_200_OK)
        # if file_serializer.is_valid():
        #     file_serializer.save()
        #     return Response(file_serializer.data, status=status.HTTP_201_CREATED)
        # else:
        #     return Response(file_serializer.errors, status=status.HTTP_400_BAD_REQUEST)








def index(request):
    # print("hi")
    # if request.method == 'POST':
    #     if "excel" in request.FILES:
    #         user = request.FILES["excel"]
    #         ex = Semester(file=user)
    #         ex.save()
    #         data = pd.read_excel(user)
    #         title = get_subj_list(data,6)
    #         di = get_transformed_data(data)
    #         d1 = di[0][title[-1]]
    #         print(d1[d1["Roll"] == "20135A0514"])
    #         print(title[-1])
    sem = Semester.objects.all()
    # # subj = Subjects.objects.filter(name="DISCRETE MATHEMATICAL STRUCTURES")
    # get_subject_analysis(sem,"DISCRETE MATHEMATICAL STRUCTURES")
    
    context  = {
        'sem':sem,
    }
    return render(request,"base.html",context) 

def upload(request):
    sem = Semester.objects.all()
    reg = Regulation.objects.all()
    branch = Branch.objects.all()
    batch = Batch.objects.all()
    context = {
        'sem':sem,
        'branch':branch,
        "reg":reg,
        'batch':batch,
    }
    
    return render(request,"upload_excel.html",context)



def backlogupload(request):
    sem = Semester.objects.all()
    reg = Regulation.objects.all()
    branch = Branch.objects.all()
    batch = Batch.objects.all()
    context = {
        'sem':sem,
        'branch':branch,
        "reg":reg,
        'batch':batch
    }
    
    return render(request,"back_log.html",context)


@csrf_exempt
def backlogdata(request):
    if request.method == "POST":
        reg = request.POST.get("reg")
        branch = request.POST.get("branch")
        batch = request.POST.get("batch")
        sem = request.POST.get("sem")
        bra = Branch.objects.get(id=branch)
        reg = Regulation.objects.get(id=reg)
        batch = Batch.objects.get(id=batch)
        sem = Semester.objects.get(id=sem)
        backdata = BacklogData(sem=sem,regulation=reg,branch=bra,batch=batch)
        backdata.save()
        if "file" in request.FILES:
            data = request.FILES['file']
            backdata.file = data
            backdata.save()
        backdata.save()
        split_data_backlog(data,sem.id)
        print("BACKLOG DATA UPLOADED SUCCESSFUL")
        return JsonResponse({"Uploaded":"Success"}, status=status.HTTP_201_CREATED) 
    return JsonResponse({"Uploaded":"Failed"}, status=status.HTTP_400_BAD_REQUEST) 

# 4 
# sem data upload handler
#  Sem Analysis API Function
#  REACT Fetch API function
#  Section wise Analysis API FUNCTION


# UPLOAD EXCEL FILE API HANDLER


@csrf_exempt
def data(request):
    if request.method == "POST":
        reg = request.POST.get("reg")
        branch = request.POST.get("branch")
        name = request.POST.get("name")
        batch = request.POST.get('batch')
        bra = Branch.objects.get(id=branch)
        reg = Regulation.objects.get(id=reg)
        batch = Batch.objects.get(id=batch)
        semName = {"1":"I","II":"III","3":"III","4":"IV","5":"V","6":"VI","7":"VII","8":"VIII"}
        name = semName[name]
        if Semester.objects.filter(branch=bra,batch=batch,regulation=reg,name=name).exists():
            return JsonResponse({"Uploaded":"Failed, Please Check that you are not uploading the Same Semester multiple times","type":"error", "msg":"Failed, Please Check that you are not uploading the Same Semester multiple times", "bb":"danger"},status=status.HTTP_400_BAD_REQUEST)
        else:
            
            # sem = Semester(name=name,branch=bra,regulation=reg,batch=batch)
            # sem.save()
            if "file" in request.FILES:
                data = request.FILES['file']
                sem = Semester(name=name,branch=bra,regulation=reg,batch=batch)
                sem.save()
                sem.file = data
                sem.save()
                if split_data(data,sem.id):
                    print("SEM DATA UPLOADED SUCCESSFUL")
                    return JsonResponse({"Uploaded":"Success","type":"Success", "msg":"Semester Has been started uploading in server", "bb":"success"}, status=status.HTTP_201_CREATED)
                    # return JsonResponse({"Uploaded":"Success"}, status=status.HTTP_201_CREATED) 
                else:
                    sem.delete()
                    return JsonResponse({"Uploaded":"Failed, Please Check that you are not uploading the Same Semester multiple times","type":"error", "msg":"Failed, Please Check that you are not uploading the Same Semester multiple times", "bb":"danger"},status=status.HTTP_400_BAD_REQUEST)
            else:
                return JsonResponse({"Uploaded":"Failed, Please Upload the Excel File","type":"error", "msg":"Failed, Please Upload the Excel File", "bb":"danger"},status=status.HTTP_400_BAD_REQUEST)
            
            
            
            return JsonResponse({"Uploaded":"Success"}, status=status.HTTP_201_CREATED) 
        return JsonResponse({"Uploaded":"Failed"}, status=status.HTTP_400_BAD_REQUEST) 
    
    return Response({"Uploaded":"Failed","type":"error", "msg":"Failed, Please Upload the Excel File", "bb":"danger"}, status=status.HTTP_400_BAD_REQUEST)  





def get_sem_analysis(request,sem_id):
    if Semester.objects.filter(id=sem_id).exists():
        sem = Semester.objects.get(id=sem_id)
        return JsonResponse(get_subject_analysis_data(sem,sem_id))

    
# def get_sect_analysis(request, sem_id):
#     if Semester.objects.filter(id=sem_id).exists():
#         sem = Semester.objects.get(id=sem_id)
#         reg = Regulation.objects.get(id=sem.regulation.id)
#         batch = Batch.objects.get(id=sem.batch.id)
#         branch = Branch.objects.get(id=sem.branch.id)
#         if Student.objects.filter(regulation=reg, batch=batch,branch=branch).exists():
#             students = Student.objects.all().filter(regulation=reg, batch=batch,branch=branch)
#             sect_list = get_section_list(students)
#             subj = sem.subject.split(',')
#             data = {}
#             for i in list(sect_list.keys()):  
#                 analyse = section_analysis(i,reg,batch,branch,sem,students)
#                 data[f"Section_{i}"] = analyse
#             data["subj"] = subj
#             main = {}   
#             main["data"] = data
#             return JsonResponse(main)
    
#     return HttpResponse("hi")
        
        
# SECTION WISE SEM ANALYSIS API HANDLER
#------------------------
def get_sect_analysis(request, sem_id):
    if Semester.objects.filter(id=sem_id).exists():
        sem = Semester.objects.get(id=sem_id)
        reg = Regulation.objects.get(id=sem.regulation.id)
        batch = Batch.objects.get(id=sem.batch.id)
        branch = Branch.objects.get(id=sem.branch.id)
        if Student.objects.filter(regulation=reg, batch=batch,branch=branch).exists():


            #### ------- Warning ---------- Testing area -----------------###

            dsecs = get_sect_data(sem_id)
            # print(dsecs)
            secs = []
            for i in dsecs["data"]:
                secs.append(i["name"])

            subjs = sem.subject.split(',')
            # print(subjs)
            data = []
            for i in subjs:
                code,name = i.split('-')[0],i.split('-')[1:]

                l = get_pass_fail_count_of_each_subject_for_table(code,i,secs,sem,branch,batch)
                # msg = f"result Analysis for subject : {name} and analysis = {l}"
                data.append(l)
                # subj_data = Subjects.objects.filter(sem=sem,batch=batch,branch=branch_obj,roll=)
            

            ##### --------------  wait for while --------------------  ####
            students = Student.objects.all().filter(regulation=reg, batch=batch,branch=branch)
            sect_list = get_section_list(students)
            # subj = sem.subject.split(',')
            # data = []
            # for i in subj:  
            #     analyse = section_analysis(i,reg,batch,branch,sem,students,sect_list)
            #     data.append(analyse)
            main = {}   
            # print(data)
            main["sect"] = list(sect_list.keys())
            main["data"] = data
            main2 = {}
            main2["data"] = main
            # print(main2)
            return JsonResponse(main2,safe=False)
    
    return HttpResponse("hi")
        
        


@csrf_exempt
def student_detail(request):
    if request.method == "POST":
        reg = request.POST.get("reg")
        branch = request.POST.get("branch")
        batch = request.POST.get("batch")
        bra = Branch.objects.get(id=branch)
        reg = Regulation.objects.get(id=reg)
        batch = Batch.objects.get(id=batch)
        # students = Student.objects.all().filter(regulation=reg,branch=bra, batch=batch)
        # backdata = BacklogData.objects.get(id=backdata.id)
        
        if "file" in request.FILES:
            data = request.FILES['file']
            split_data_student(data, bra,reg,batch)
        
        return JsonResponse({"ok":"ok"})
            
            
        
        # split_data_backlog(data,sem.id).\
    
    
    reg = Regulation.objects.all()
    batch = Batch.objects.all()
    branch = Branch.objects.all()
    
    context = {
        'regs': reg,
        'batch': batch,
        'branch': branch,
    }
    
    return render(request, "student.html",context)


def generate_list_semester(request):
    branchs = Branch.objects.all()
    
    data = []
    for i  in branchs:
        temp = {}
        temp["id"] = i.id
        temp["name"] = i.branches
        temp["reg"] = get_all_reg_for_branch(i)
        data.append(temp)
    # print(data)
     
    return JsonResponse(data,safe=False)


def subj_analysis_all(request,sem_id):
    sem = Semester.objects.get(id=sem_id)
    
    data = all_subj(sem.id)
        
    return HttpResponse(sem.subject)



# def generate_list_semester(request):
#     reg = Regulation.objects.all()
#     # batchs = Batch.objects.all()
#     # print(batchs)
#     data = []
#     for i in reg:
#         sub = {}
#         sub["id"] = i.id
#         sub["title"] = i.regulation
#         sub["year"] = i.year
#         sub["data"] = get_all_batch_for_reg(i)
#         data.append(sub)    
        
#     return JsonResponse(data,safe=False)
    
    
def get_reg_branch_batch(request):
    regs = Regulation.objects.all()
    batchs = Batch.objects.all()
    branchs = Branch.objects.all()
    
    reg_dic = []
    for i in regs:
        temp = {}
        temp["title"] = i.regulation
        temp["id"] = i.id
        temp["name"] = f"{i}"
        reg_dic.append(temp)
    batch_dic = []
    for i in batchs:
        temp = {}
        temp["name"] = i.name
        temp["reg"] = i.reg.regulation
        temp["id"] = i.id
        batch_dic.append(temp)
        
    branch_dict = []
    for i in branchs:
        temp = {}
        temp["name"] = i.branches
        temp["id"] = i.id
        branch_dict.append(temp)
    data = {}
    data["updata"] = {"reg":reg_dic, "branch": branch_dict,"batch": batch_dic}
          
    return JsonResponse(data)



def get_back_predata(request):
    regs = Regulation.objects.all()
    batchs = Batch.objects.all()
    branchs = Branch.objects.all()
    sems =  Semester.objects.all()
    
    reg_dic = []
    for i in regs:
        temp = {}
        temp["title"] = i.regulation
        temp["id"] = i.id
        temp["name"] = f"{i}"
        reg_dic.append(temp)
    batch_dic = []
    for i in batchs:
        temp = {}
        temp["name"] = i.name
        temp["reg"] = i.reg.regulation
        temp["id"] = i.id
        batch_dic.append(temp)
        
    branch_dict = []
    for i in branchs:
        temp = {}
        temp["name"] = i.branches
        temp["id"] = i.id
        branch_dict.append(temp)
    sem_dic = []
    for i in sems:
        temp = {}
        temp["name"] = i.name
        temp["id"] = i.id
        temp["reg"] = i.regulation.regulation
        temp["batch"] = i.batch.name
        temp["branch"] = i.branch.branches
        sem_dic.append(temp)
    data = {}
    data["updata"] = {"reg":reg_dic, "branch": branch_dict,"batch": batch_dic,"sem":sem_dic}
    # print(data)
    return JsonResponse(data)


# @api_view(['POST'])
# def test(request):
#     if request.method == "POST":
#         print(request.data)
#         return JsonResponse(request.data)



# controller to get batch student sem analysis of all sems
def get_batch_analysis(request, batch_id, branch_id): 
    batch = Batch.objects.get(id=batch_id)
    branch = Branch.objects.get(id=branch_id)
    sems = Semester.objects.filter(batch=batch,branch=branch)
    data = all_sems_analysis(sems, batch, branch)
    return JsonResponse(data,safe=False)



# # controller to get sems with backlog details

def get_all_sems_backlog(request,batch_id,branch_id):
    batch = Batch.objects.get(id=batch_id)
    branch = Branch.objects.get(id=branch_id)
    sems = Semester.objects.filter(batch=batch,branch=branch)
    data = get_sem_wise_backlog_analysis(sems,batch,branch)
    sem_data = {"sems":data}
    return JsonResponse(sem_data,safe=False)





def fetch_result(request,roll,branch,sem):
    result = get_formated_result(roll,branch)
    # print(result)
    student = Student.objects.get(roll=roll)
    print(f"Branch : {student.branch} Regultaion : {student.regulation} Batch: {student.batch} Section: {student.section}")
    result = result[str(sem)]
    # supply = result[f"{sem}-Supply"]
    subj = get_subject_from_fetch_obj(result)

    sem = check_sem_exist(result,student.branch,student.batch,student.regulation,sem,subj)
    
    add_subject(result,roll,sem)
    add_preformance_table(roll,sem)
    
    return JsonResponse(result, safe=False)


@sync_to_async
def reduced_fetch_semester_result(batch,sem,branch):
    if not Batch.objects.filter(id=batch).exists() and Branch.objects.filter(branches=branch.upper()).exists():
        print("!!!  .....   INVALID DETAILS")
        return

    batch  = Batch.objects.get(id=batch)
    branch_obj = Branch.objects.get(branches=branch.upper())
    students = Student.objects.filter(batch=batch,branch=branch_obj)[190:]

    print("-------------------------------------------------------------------------------------------------")
 

    for i in students:
        time.sleep(10)
        try:
            print(i)
            fetch_and_add_student_sem(i.roll.upper(),sem,branch)
        except Exception as e: 
            print("---")
            print(e)
            return

    
    
    # for i in range(5):
    #     time.sleep(10)
    #     fetch_and_add_student_sem(students[i].roll.upper(),sem,branch)
    
    # print("="*40)
    # print("\n\n\n")
    
    # print("successfully completed process")
    

    
# def fetch22(batch,sem,branch):
#     asyncio.create_task(reduced_fetch_semester_result(batch,sem,branch))

    


# @sync_to_async
async def fetch_semester_result(request,batch,sem,branch):
    asyncio.create_task(reduced_fetch_semester_result(batch,sem,branch))

    return JsonResponse({"response":"started Fetching"},safe=False)


def check_sem_data_exists(request,batch,sem,branch):

    try:
        flag = fetch_check_result(batch,sem,branch) 
        if flag == 0:
            return JsonResponse({"code":"danger","msg":"Semester Result not found in the server .... !!!"}, safe=False)
        elif flag == 1:
            return JsonResponse({"code":"success","msg":"Semester Result has started fetching data from server, wait for while"},safe=False)
    
    except Exception as e: 
        print(e)
        return JsonResponse({"code":"danger","msg":"IMS Server Not Responding .... !!!"}, safe=False)


def test5(num):
    print('inside test5')
    time.sleep(50)

@sync_to_async
def testtttt(num):
    time.sleep(10)
    test5(num)
    print(num)


async def helper(num):
    global t1
    t1 = asyncio.create_task(testtttt(num))

def fetch_test(request,num):
    
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # Run the coroutine containing tasks
    # cancelAfter = 5
    asyncio.run(helper(num))

    return JsonResponse({"sent":num},safe=False)


async def cancel(request):
    t1.cancel()
    print("cancelled")

    return JsonResponse({"cancelled":"yes"},safe=False)





# Toppers Data API for single semester


# def get_sec_wise_topper_data(request,batch,sem,branch,sec):
#     sem = convert_num_to_sem(sem)
#     batch  = Batch.objects.get(id=batch)
#     branch_obj = Branch.objects.get(branches=branch.upper())
#     sem = Semester.objects.get(batch=batch,branch=branch_obj,name=sem)
#     students = Student.objects.filter(batch=batch,branch=branch_obj,section=sec)
#     # firoz = Student.objects.filter(roll="20135A0516").values()
#     # print(firoz)

#     for i in students:
#         print(i)
    
#     print('--------------------------------')

#     performance =  Performance.objects.filter(batch=batch,regulation=sem.regulation,sem=sem,roll__in=students).order_by('-SCGPA')
#     k = 0
#     data = []
#     for i in performance:
#         if k==20:
#             break
#         data.append({"roll":i.roll.roll,"name":i.roll.name,"sect":i.roll.section,"SCGPA":i.SCGPA})
#         k+=1
#     print(*data)
#     return JsonResponse({"data":data},safe=False)








def get_individual_sem_analysis(request,roll):
    if Student.objects.filter(roll=roll).exists():
        stu=Student.objects.get(roll=roll)
        sems =  Performance.objects.filter(roll=stu)
        data={"cgpas":[None,None,None,None,None,None,None,None],"roll":roll}

        std = StudentDetails.objects.get(roll=stu)
        details = {
            "name":std.name,
            "email":std.alter_mail,
            "mobile":std.mobile,
            "dob":std.dobstr,
            "father":std.father,
            "aadhar":std.aadhar,
            "address":std.address,
            "roll":stu.roll,
            "section":stu.section,
            "branch":stu.branch.branches
        }

        for sem in sems:
            if sem.sem.name=="I":
                data["cgpas"][0]=sem.SCGPA
            elif sem.sem.name=="II":
                data["cgpas"][1]=sem.SCGPA
            elif sem.sem.name=="III":
                data["cgpas"][2]=sem.SCGPA
            elif sem.sem.name=="IV":
                data["cgpas"][3]=sem.SCGPA
            elif sem.sem.name=="V":
                data["cgpas"][4]=sem.SCGPA
            elif sem.sem.name=="VI":
                data["cgpas"][5]=sem.SCGPA
            elif sem.sem.name=="VII":
                data["cgpas"][6]=sem.SCGPA
            elif sem.sem.name=="VIII":
                data["cgpas"][7]=sem.SCGPA
        data["details"]= details
        # print(details)
        return JsonResponse(data,safe=False)
    else:
        data={"cgpas":[None,None,None,None,None,None,None,None],"roll":roll}
        return JsonResponse(data)





def get_sec_wise_topper_data(sem_id,secs):
    # print(dsecs)
    sem = Semester.objects.get(id=sem_id)
    # sem = convert_num_to_sem(sem)
    batch  = Batch.objects.get(id=sem.batch.id)
    branch_obj = Branch.objects.get(id=sem.branch.id)
    # firoz = Student.objects.filter(roll="20135A0516").values()
    # print(firoz)

    data = {}

    for sec in secs:
        k = {}
        per_data=[]
        students = Student.objects.filter(batch=batch,branch=branch_obj,section=sec)
        performance =  Performance.objects.filter(roll__in=(students),batch=batch,regulation=sem.regulation,sem=sem).order_by('-SCGPA')[:10]
        for i in performance:
            per_data.append({"roll":i.roll.roll,"name":i.roll.name,"sect":i.roll.section,"SCGPA":i.SCGPA})
        data[f"{sec}"] = per_data
    
    # p = {"allSection":get_topper_data(sem_id)}
    data["allSection"] = get_topper_data(sem_id)


    return data


#------------------------
def get_subj_section_data(request,sem_id):
    top_data = get_topper_data(sem_id)
    # sem = Semester.objects.get(id=sem_id)
    # # sem = convert_num_to_sem(sem)
    # batch  = Batch.objects.get(id=sem.batch.id)
    # branch_obj = Branch.objects.get(id=sem.branch.id)
    # students = Student.objects.filter(batch=batch,branch=branch_obj)
    # for i in students:
    #     i.section = 1
    #     i.save()
    dsecs = get_sect_data(sem_id)
    print("hi")
    # print(dsecs)
    sem = Semester.objects.get(id=sem_id)
    # sem = convert_num_to_sem(sem)
    batch  = Batch.objects.get(id=sem.batch.id)
    branch_obj = Branch.objects.get(id=sem.branch.id)
    students = Student.objects.filter(batch=batch,branch=branch_obj)
    # secs = lst_of_sect_of_sem(students)
    # print(secs)
    secs = []
    for i in dsecs["data"]:
        secs.append(i["name"])
    sectionTopData = get_sec_wise_topper_data(sem_id,secs)
    # print(sectionTopData)
    # print(sec_data)
    subjs = sem.subject.split(',')
    # print(subjs)
    fails = get_section_fail_perc(sem_id,secs)
    data = []
    for i in subjs:
        code,name = i.split('-')[0],i.split('-')[1:]

        l = get_pass_fail_count_of_each_subject(code,i,secs,sem,branch_obj,batch)
        # msg = f"result Analysis for subject : {name} and analysis = {l}"
        data.append(l)
        # subj_data = Subjects.objects.filter(sem=sem,batch=batch,branch=branch_obj,roll=)

    sectionTopData["onlysections"] = secs
    
    temp = {"subjSectionData":data,"sectionList":dsecs,"semtopData":top_data,"failPercentageSection":fails,"onlysections":secs,"eachSectionTopData":sectionTopData}
    return JsonResponse({"data":temp},safe=False)








def get_roll_details(roll):
    rolld = Student.objects.get(roll=roll)

    if StudentDetails.objects.filter(roll=rolld).exists() :
        data = StudentDetails.objects.get(roll=rolld)
    else:
        data = fetchDetails(roll)
        dob = data[3]
        dob = datetime.strptime(dob,"%d/%m/%Y")
        data = StudentDetails.objects.create(roll=rolld,name=data[0],father=data[1],mother=data[2],
            dobstr=data[3],dob=dob,nationality=data[5],religion=data[6],
            father_occupation= data[7],mother_occupation=data[8], mobile=data[10],
            alter_mobile=data[11],mail=data[13],alter_mail=data[14],aadhar=data[15],
            address=data[23]
            )

    k = {"roll":data.roll.roll,"name":data.name,"father":data.father,"mother":data.mother,
            "dob":data.dobstr,"religion":data.religion,"fatherOccupation":data.father_occupation,
            "Aadhar":data.aadhar,"mai":data.mail, "AlterMail":data.alter_mail,
            "address":data.address
            }
    
    return k




def get_fetch_data(request):
    branchs = Branch.objects.all().order_by('id')
    regs = Regulation.objects.all().order_by('id')
    data = []
    regdata = []
    branchData = []

    for branch in branchs:
        t = {}
        t[f"{branch.branches}"] = branch.branches
        branchData.append(t)

    for reg in regs:
        p = {}
        p["id"] = reg.id
        p["name"] = reg.regulation
        regdata.append(p)
        batchs = Batch.objects.filter(reg=reg).order_by('reg')
        for batch in batchs:
            k = {}
            k["id"] = batch.id
            k["name"] = batch.name
            k["reg"] = batch.reg.id
            data.append(k)
    finalData = {}
    finalData["regData"] = regdata
    finalData["batchData"] = data
    finalData["branchData"] = branchData

    return JsonResponse({"data":finalData},safe=False)


def check_student_exists(request,roll):
    if Student.objects.filter(roll=roll).exists():
        get_roll_details(roll)
        return JsonResponse({"code":"success","msg":"Student Exists in Server DataBase..  Fetching Result data just wait for  a few Seconds"})
    else:
        return JsonResponse({"code":"danger","msg":"Student Roll number doesn't exists in the Server DataBase please check roll and try again"})


def student_report(request,roll):
    if Student.objects.filter(roll=roll).exists():
        pass












# -------------------------- FILTER DATA PAGE FUNCTIONS -----------------------


def fetchdata1(request):
    data = {}
    branchs = Branch.objects.all()
    regs = Regulation.objects.all()


    branch = [{"id":"all", "name":"Select All"}]
    for i in branchs:
        d = {}
        d["name"] = i.branches
        d["id"] = i.id
        branch.append(d)

    reg = [{"id":"all", "name":"Select All"}]

    for i in regs:
        d = {}
        d["name"] = f"{i.regulation} for year {i.year}"
        d["id"] = i.id
        reg.append(d)

    data["branch"] = branch
    data["regulation"] = reg
    data["status"] = True

    # print(data)

    return JsonResponse(data,safe=True)







# this function will return list of batch for particular regulation

def fetchdata2(request,reg):
    reg = int(reg)

    if Regulation.objects.filter(id=reg).exists():
        reg = Regulation.objects.get(id=reg)
        batchs = Batch.objects.filter(reg=reg)

        data = {}
        data["batch"] = [{"id":"all", "name":"Select All"}]

        for i in batchs:
            d = {}
            d["name"] = f"batch {i.name}  for {i.reg.regulation}"
            d["id"] = i.id
            data["batch"].append(d)
        
        data["status"] = True

        # print(data)

        return JsonResponse(data,safe=True)
    else:
        data = {}
        data["batch"] = []

        data["status"] = False
        # print(data)
        # print(Regulation.objects.filter(id=reg))

        return JsonResponse(data,safe=True)












# this function will return section details and sems details 

def fetchdata3(request,reg,branch,batch):

    if batch == "all":
        regData = Regulation.objects.get(id=reg)
        branchData = Branch.objects.get(id=branch)

        students = Student.objects.all().filter(regulation=regData,branch=branchData)
        sect = get_section_list(students)
        data = {}
        data["section"] = ["all"]
        data["section"].extend(list(sect.keys()))

        sems = Semester.objects.all().filter(regulation=regData, branch=branchData)

        data["sems"] = []

        for i in sems:
            d = {}
            d["name"] = i.name
            d["id"] = i.id
            data["sems"].append(d)
        
        data["status"] = True

        return JsonResponse(data,safe=True)
        

    elif Regulation.objects.filter(id=reg).exists() and Branch.objects.filter(id=branch).exists() and Batch.objects.filter(id=batch).exists():
        regData = Regulation.objects.get(id=reg)
        branchData = Branch.objects.get(id=branch)
        batchData = Batch.objects.get(id=batch)

        students = Student.objects.all().filter(regulation=regData, batch=batchData,branch=branchData)
        sect = get_section_list(students)
        data = {}
        data["section"] = ["all"]
        data["section"].extend(list(sect.keys()))

        sems = Semester.objects.all().filter(regulation=regData, batch=batchData,branch=branchData).order_by("name")
        data["sems"] = [{"id":"all", "name":"Select All"}]

        for i in sems:
            d = {}
            d["name"] = i.name
            d["id"] = i.id
            data["sems"].append(d)
        
        data["status"] = True

        return JsonResponse(data,safe=True)
    else:
        data = {}
        data["section"] = []
        data["sems"] = []
        data["status"] = False

        return JsonResponse(data,safe=True)





# this function will response to POST request and return filtered Data
   
@csrf_exempt
def filter(request):
    if request.method == "POST":

        # branch,reg,batch,sems,cgpa,backlog,sect
        reg = request.POST.get("reg")
        branch = request.POST.get("branch")
        batch = request.POST.get("batch")
        sems = request.POST.get("sems")
        cgpa = request.POST.get("cgpa")
        backlog = request.POST.get("backlog")
        sect = request.POST.get("sect")


        reg = Regulation.objects.get(id=reg)
        branch = Branch.objects.get(id=branch)
        batch = Batch.objects.get(id=batch)
        # sems = Semester.objects.get(id=sems)

        # all  1 = cgpa > 9, 2 =  cgpa > 8 , 3 =  cgpa > 7 , 4 =  cgpa > 6 , 5 =  cgpa > 5 , 6  =  cgpa < 5

        # clear   1 , 2 , 3 , 4 , 5 = backlog > 4
        # gpa = {"all":"all",1:9,2:8,3:7,4:6,5:5,6:4}

        
        data = {"data":[branch,reg,batch,sems,cgpa,backlog,sect]}
        # print(data)
        
        sm = []
        if "all" not in sems:
            for i in sems.split(","):
                sm.append(Semester.objects.get(id=int(i)))
        else:
            for i in Semester.objects.all().filter(regulation=reg,branch=branch,batch=batch):
                sm.append(i)
            # sm.append(Semester.objects.filter(regulation=reg,branch=branch,batch=batch))
        # print(sm)


        perform = [filteredStudents(branch,reg,batch,sem,sect,backlog,cgpa) for sem in sm]
        


        # for sem in sm:
        #     student = filteredStudents(branch,reg,batch,sem,sect,backlog,cgpa)
        #     students.append(student)

        # print(perform)

        

        detail = tableDetails(perform)
        data = {}
        data["data"] = detail
        # print(data)




        # print(branch,reg,batch,sems,cgpa,backlog,sect)
        return JsonResponse(data,safe=True)
    else:
        return JsonResponse({"data":False})




@csrf_exempt
def addreg(request):
    if request.method == "POST":
        reg = request.POST.get("reg")
        year = request.POST.get("year")
        grades = request.POST.get("grade")

        if Regulation.objects.filter(regulation=reg).exists() or Regulation.objects.filter(year=year).exists():
            grade = {}
            grade["data"] = json.loads(grades)
            print("-========-=-=-==-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-")
            print(grade)
            print(type(grade))
            gg = {}
            for i in grade["data"]:
                gg[i["grade"]]=  int(i["value"])
            print(gg)

            return JsonResponse({"msg":"Error","code":"danger","message":"Same Regulation or Same year exists"})
        else:
            grade = {}
            grade["data"] = json.loads(grades)
            # print("-========-=-=-==-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-")
            # print(grade)
            # print(type(grade))
            gg = {}
            for i in grade["data"]:
                gg[i["grade"].upper()]=  int(i["value"])
            # print(gg)
            regl = Regulation(regulation=reg,year=year,grades=gg)
            regl.save()
            # print("-========-=-=-==-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-")
            # print(reg,year,grades)
            # print(json.loads(grades))
            return JsonResponse({"msg":"Added Successfully","code":"success","message":"Regulation has been added successfully","dd":grade},safe=True)
    else:
        return JsonResponse({"msg":"Error","code":"danger","message":"Some thing went wrong....!!!!!!!"})







@csrf_exempt
def addbranch(request):
    if request.method == "POST":
        branch = request.POST.get("branch")

        if Branch.objects.filter(branches=branch).exists():
            return JsonResponse({"msg":"Error","code":"danger","message":"Same Branch already exists"})
        else:
            bran = Branch(branches=branch)
            bran.save()
            return JsonResponse({"msg":"Added Successfully","code":"success","message":"Branch has been added successfully"},safe=True)
    else:
        return JsonResponse({"msg":"Error","code":"danger","message":"Some thing went wrong....!!!!!!!"})
 

@csrf_exempt
def addbatch(request):
    if request.method == "POST":
        batch = request.POST.get("batch")
        reg = int(request.POST.get("reg"))

        if Batch.objects.filter(name=batch).exists() or  not Regulation.objects.filter(id=reg).exists():
            return JsonResponse({"msg":"Error","code":"danger","message":"Same Batch already Exists or Regulation Doesn't Exists"})
        else:
            reg = Regulation.objects.get(id=reg)
            bran = Batch(name=batch,reg=reg)
            bran.save()
            return JsonResponse({"msg":"Added Successfully","code":"success","message":"Batch has been added successfully"},safe=True)
    else:
        return JsonResponse({"msg":"Error","code":"danger","message":"Some thing went wrong....!!!!!!!"})
 


@csrf_exempt
def getAllAdminData(request):
    branchs = Branch.objects.all()
    regs = Regulation.objects.all()
    batchs = Batch.objects.all().order_by('reg')

    branch = []
    reg = []
    batch = []
    data = {}

    for i in batchs:
        k = {}
        k["id"] = i.id
        k["name"] = i.name
        k["reg"] = i.reg.regulation
        k["regid"] = i.reg.id
        batch.append(k)

    for i in regs:
        k = {}
        k["id"] = i.id
        k["name"]= i.regulation 
        # d["name"] = f"{i.regulation} for year {i.year}"
        k["year"] = i.year
        k["grades"] = regGrades(i)
        reg.append(k)

    for i in branchs:
        k = {}
        k["id"] = i.id
        k["name"] = i.branches
        branch.append(k)
    data["branch"] = branch 
    data["reg"] = reg
    data["batch"] = batch

    # print(data)
    
    return JsonResponse({"msg":"Success","data":data},safe=True)


@csrf_exempt
def dltBranch(request):
    if request.method == "POST":
        branch = request.POST.get("branch")
        # print(branch)
        branch = int(branch)
        if Branch.objects.filter(id=branch).exists():
            brn = Branch.objects.get(id=branch)
            try:
                brn.delete()
                return JsonResponse({"del":"success","msg":"Successfully deleted all the branch and all its objects"})
            except Exception as e:
                return JsonResponse({"del":"error","msg":f"{e}"})
        else:
            return JsonResponse({"del":"error","msg":f"This{branch} Branch Does not exists in DataBase"})

@csrf_exempt
def dltRegulation(request):
    if request.method == "POST":
        reg = request.POST.get("reg")
        # print(reg)
        reg = int(reg)
        if Regulation.objects.filter(id=reg).exists():
            brn = Regulation.objects.get(id=reg)
            try:
                brn.delete()
                return JsonResponse({"del":"success","msg":"Successfully deleted all the Regulation and all its objects"})
            except Exception as e:
                return JsonResponse({"del":"error","msg":f"{e}"})
        else:
            return JsonResponse({"del":"error","msg":f"This{reg} Regulation Does not exists in DataBase"})



@csrf_exempt
def dltBatch(request):
    if request.method == "POST":
        batch = request.POST.get("batch")
        batch = int(batch)
        if Batch.objects.filter(id=batch).exists():
            brn = Batch.objects.get(id=batch)
            try:
                brn.delete()
                return JsonResponse({"del":"success","msg":"Successfully deleted all the Batch and all its objects"})
            except Exception as e:
                return JsonResponse({"del":"error","msg":f"{e}"})
        else:
            return JsonResponse({"del":"error","msg":f"This{batch} Batch Does not exists in DataBase"})


@csrf_exempt
def editBranch(request):
    if request.method == "POST":
        id = request.POST.get("id")
        name = request.POST.get("name")
        if Branch.objects.filter(id=id).exists():
            brn = Branch.objects.get(id=id)
            try:
                brn.branches = name
                brn.save()
                return JsonResponse({"del":"success","msg":f"Successfully Updated the branch name to {name}"})
            except Exception as e:
                return JsonResponse({"del":"error","msg":f"{e}"})
        else:
            return JsonResponse({"del":"error","msg":f"This{name} Branch Does not exists in DataBase"})



@csrf_exempt
def editBatch(request):
    if request.method == "POST":
        id = int(request.POST.get("id"))
        name = request.POST.get("name")
        reg = int(request.POST.get("reg"))
        # print(id,name,reg)
        if Batch.objects.filter(id=id).exists() and Regulation.objects.filter(id=reg).exists():
            brn = Batch.objects.get(id=id)
            reg = Regulation.objects.get(id=reg)
            try:
                brn.name = name
                brn.reg = reg
                brn.save()
                return JsonResponse({"del":"success","msg":f"Successfully Updated the Batch name to {name}"})
            except Exception as e:
                return JsonResponse({"del":"error","msg":f"{e}"})
        else:
            return JsonResponse({"del":"error","msg":f"This{name} Batch Does not exists in DataBase or {reg} Regulation does not existsi in DB"})


@csrf_exempt
def editRegulation(request):
    if request.method == "POST":
        id = request.POST.get("id")
        name = request.POST.get("name")
        year = request.POST.get("year")
        grades = request.POST.get("grade")
        
        if Regulation.objects.filter(regulation=name).exists() or Regulation.objects.filter(year=year).exists() or Regulation.objects.filter(id=id).exists():
            grade = {}
            grade["data"] = json.loads(grades)
            gg = {}
            for i in grade["data"]:
                gg[i["grade"].upper()]=  int(i["value"])
            try:
                reg = Regulation.objects.get(id=id)
                reg.regulation = name
                reg.year = year
                reg.grades = gg
                reg.save()
                return JsonResponse({"del":"success","msg":f"Successfully Updated the Regulation details"})
            except Exception as e:
                return JsonResponse({"del":"error","msg":f"{e}"})
        else:
            return JsonResponse({"del":"error","msg":f"This{name} Regulation Does not exists in DataBase"})

    else:
        return JsonResponse({"msg":"error","code":"danger","message":"Some thing went wrong....!!!!!!!"})




@csrf_exempt
def viewSemDetails(request):
    if request.method == "POST":
        id = request.POST.get("id")
        id = int(id)
        if Semester.objects.filter(id=id).exists():
            sem = Semester.objects.get(id=id)
            data = getSemData(sem)
            # print(get_formated_result("get_formated_result","CSE"))
            # print(data)
            # print(sem)
            return JsonResponse({"msg":"success","message":"Some thing went wrong....!!!!!!!","data":data},safe=True)
        else:
            return JsonResponse({"msg":"error","message":"Some thing went wrong....!!!!!!!"})



def semWiseBacklogData(request,roll):
    return JsonResponse({"success":"ok","allBacklogs":[0,2,3,1,5,0,3,0],"clearedBacklogs":[0,2,2,1,1,0,1,0]})




from student.models import Performance
from student.models import Subjects
from student.models import Student
from student.models import Regulation
from student.models import Semester,Batch,BacklogSubject,Attempt
from django.http.response import HttpResponse, JsonResponse
from student.Fetch.main_code import get_formated_result
from student.back_log_handler import add_backlog, add_student_performance, update_subject


def get_no_of_pass_count(student,sem):
    subjs = Subjects.objects.filter(roll=student,branch=student.branch, regulation=student.regulation, batch=student.batch,sem=sem)
    pass_count = 0
    total_subject = 0
    fail_count = 0

    for i in subjs:
        if i.fail == True:
            fail_count +=1
        else:
            pass_count +=1
        total_subject +=1
    
    return [pass_count,total_subject,fail_count]


def check_subject_fetch(roll,subj_obj,sem):

    if Student.objects.filter(roll=roll).exists():
        stud_obj = Student.objects.get(roll=roll)
        regulation = stud_obj.regulation
        branch = stud_obj.branch
        batch = stud_obj.batch
        name = subj_obj["SubjectName"].upper()
        code = subj_obj["SubjectCode"]
        subtype = subj_obj["SubjectType"].upper()

        if subtype == "PROFESSIONAL CORE COURSE":
            subt = "PROFESSIONAL CORE COURSE"
            type = False
        else:
            subt = subtype
            type= True

        if sem not in list(stud_obj.sem.all()):
        #     print(sem)
        # else:
            print("does not exists")
            # for i in list(stud_obj.sem.all()):
            #     if i == sem:
            #         print("matched", sem,"--------------------", i )
            stud_obj.sem.add(sem)
            stud_obj.save()
        else:
            print("alredy sem exists in student record")
            
        # sem = stud_obj.sem
        if Subjects.objects.filter(regulation=regulation,branch=branch,sem=sem,roll=stud_obj,name=name,code=code,batch=batch).exists():
            print(f"!!! .... Subject for {stud_obj.roll} cannot be created for {name}")
            return
        attendance = subj_obj["AttendanceGrade"]
        grade = subj_obj["ResultGrade"]
        cgpa = subj_obj["CreditsPoints"]
        credit = subj_obj["Credits"]
        
        result = "P"
        fail = False
        if grade == "F" or grade == "AB":
            result = "F"
            fail = True
        # if attendance.lower() == "d":
        #     fail = True
        #     result = "F"
        #     credit = 0
        
        if credit == "--" or grade == "--" or cgpa == "--":
            result = "F"
            fail = True
            credit = 0
            grade="AB"
            cgpa = 0

        
        subj = Subjects.objects.create(roll=stud_obj,name=name,regulation=regulation,branch=branch,batch=batch,attendance=attendance,
        cgpa=cgpa,result=result,fail=fail,sem=sem,credit=credit,code=code,grade=grade,subjtype=type, type=subt)

        if subj.result == "F":
            add_backlog(subj,stud_obj)

        print(f"subject created for {stud_obj.roll} of {name}")
    else:
        print(f"Subject for {roll} not found of {name} ")




def add_preformance_table(roll,sem):

    student_roll = Student.objects.get(roll=roll)
    if not Performance.objects.filter(roll=student_roll,sem=sem).exists():
        registered_data, no_of_pass_data ,no_of_backlog = get_no_of_pass_count(student_roll,sem)
        # print("inside perr")
        per_data = add_student_performance(roll,sem)
        # print("inside agter")
        TCR  = per_data[0]
        TCP  = per_data[1]
        SCGPA  = per_data[2]
        student_roll = Student.objects.get(roll=roll)
        # no_of_backlog = registered_data - no_of_pass_data
        
        if no_of_backlog == 0:
            passed = True
            had_backlog = False
        else:
            passed = False
            had_backlog = True
            
        perform = Performance(roll=student_roll, regulation=sem.regulation,sem=sem,
                                registered=registered_data, no_of_pass=no_of_pass_data, 
                                no_of_backlog=no_of_backlog, passed=passed,
                                TCR=TCR, TCP=TCP, SCGPA=SCGPA, batch=student_roll.batch,had_backlog=had_backlog)
        perform.save()  
        get_perform = Performance.objects.get(id=perform.id)
        subjs = Subjects.objects.all().filter(sem=sem,roll=student_roll)
        for j in subjs:
            sub = Subjects.objects.get(id=j.id)
            get_perform.subject.add(sub)
            get_perform.save()
        
        print(f"Performance Table created Successfully for {student_roll} for semester : {sem}")
            
    else:
        print(f"!!! ....  Performance Table cannot not created for {student_roll} for semester : {sem}")




def add_subject(result,roll,sem):
    for i in result:
        # print(i)
        check_subject_fetch(roll,i,sem)
    # print(roll)
    # print(sem)


def get_subject_from_fetch_obj(result):
    subj_list = ""
    data = result[0]["SubjectCode"] + "-"+result[0]["SubjectName"] 
    subj_list += data

    for i in result[1:]:
        data = ""
        data +=   "," + i["SubjectCode"] + "-"+i["SubjectName"] 
        subj_list +=  data.strip()
    
    return subj_list


def check_sem_exist(result,branch,batch,reg,sem,subj):
    sems = Semester.objects.all().filter(regulation=reg,branch=branch,batch=batch)
    # print("sems" , sems)
    sem_names = {1:"I",2:"II",3:"III",4:"IV",5:"V",6:"VI",7:"VII",8:"VIII"}

    for  i in sems:
        if i.name == sem_names[sem]:
            print("!!! ....  sem Exists")
            return i
    
    print("Creating Sem Object")
    sem = Semester(name=sem_names[sem],regulation=reg,branch=branch,batch=batch,subject=subj)
    sem.save()

    return sem


def check_sem_exist_supply(result,branch,batch,reg,sem,subj):
    sems = Semester.objects.all().filter(regulation=reg,branch=branch,batch=batch)
    # print("sems" , sems)
    sem_names = {1:"I",2:"II",3:"III",4:"IV",5:"V",6:"VI",7:"VII",8:"VIII"}

    for  i in sems:
        if i.name == sem_names[sem]:
            print("!!! ....  sem Exists")
            return [True ,i]
    
    print("Semester Data doesn't exists to add The supply details for the student")

    return [False, 0]



        
def add_attempt_details(subject,sem,data,student_roll,attendance_data,batch,credit_data,result_data,grade_data,cgpa_data):
    
    sbj = Subjects.objects.get(id=subject.id)
    if sbj.fail == False:
        return None
    
    if result_data.lower() == "p":
        passed = True
    else:
        passed = False
        
    attmpt = Attempt(roll=student_roll,subj=subject,sem=sem,
                     batch=batch,credit=credit_data,result=result_data,
                     attendance=attendance_data,grade=grade_data,cgpa=cgpa_data,passed=passed)
    attmpt.save()
    attmpt.back_log.add(data)
    attmpt.save()
    
    backsubj = BacklogSubject.objects.get(id=data.id)
    backsubj.count += 1
    backsubj.passed = passed
    backsubj.save()
    
    if passed == True:
        update_subject(attmpt)
    

def add_attempt_fetch(Roll, Attendance,Result,Credit,Grade,CGPA,subj_name,sem):
    credit = float(Credit)
    batch = Batch.objects.get(id=sem.batch.id)
    cgpa = float(CGPA)
    
    student_roll = Student.objects.get(roll=Roll)
    if BacklogSubject.objects.filter(roll=student_roll).exists():
        back_subj_data = BacklogSubject.objects.all().filter(roll=student_roll)
        if len(back_subj_data) > 1:
            for back_data in back_subj_data:
                if back_data.subject.name == subj_name:
                    add_attempt_details(back_data.subject,back_data.sem,back_data,student_roll,Attendance,batch,credit,Result,Grade,CGPA)
        else:
            back_data = back_subj_data[0]
            if back_data.subject.name == subj_name:
                add_attempt_details(back_data.subject,back_data.sem,back_data,student_roll,Attendance,batch,credit,Result,Grade,CGPA)
               



def check_subject_fetch_supply(roll,subj_obj,sem):

    if Student.objects.filter(roll=roll).exists():
        stud_obj = Student.objects.get(roll=roll)
        regulation = stud_obj.regulation
        branch = stud_obj.branch
        batch = stud_obj.batch
        name = subj_obj["SubjectName"].upper()
        code = subj_obj["SubjectCode"]
        subtype = subj_obj["SubjectType"].upper()

        if subtype == "PROFESSIONAL CORE COURSE":
            subt = "PROFESSIONAL CORE COURSE"
            type = False
        else:
            subt = subtype
            type= True

        # if sem not in stud_obj.sem.all():
        #     print(sem)
        # else:
        #     print("does not exists")
        #     stud_obj.sem.add(sem)
        #     stud_obj.save()
        if sem not in list(stud_obj.sem.all()):
        #     print(sem)
        # else:
            print("does not exists")
            # for i in list(stud_obj.sem.all()):
            #     if i == sem:
            #         print("matched", sem,"--------------------", i )
            stud_obj.sem.add(sem)
            stud_obj.save()
        else:
            print("alredy sem exists in student record")
    
        # sem = stud_obj.sem
        # if Subjects.objects.filter(regulation=regulation,branch=branch,sem=sem,roll=stud_obj,name=name,code=code,batch=batch).exists():
        #     print(f"!!! .... Subject for {stud_obj.roll} cannot be created for {name}")
        #     return
        attendance = subj_obj["AttendanceGrade"]
        grade = subj_obj["ResultGrade"]
        cgpa = subj_obj["CreditsPoints"]
        credit = subj_obj["Credits"]

        result = "P"
        fail = False
        if grade == "F" or grade == "AB":
            result = "F"
            fail = True
        # if attendance.lower() == "d":
        #     fail = True
        #     result = "F"
        #     credit = 0
        
        if credit == "--" or grade == "--" or cgpa == "--":
            result = "F"
            fail = True
            credit = 0
            grade="AB"
            cgpa = 0

        try:
            add_attempt_fetch(stud_obj.roll,attendance,result,credit,grade,cgpa,name,sem)
        except Exception as e: 
            print("----------------------     ERROR ....!!!!!!        ----------------------------")
            print(e)
            return        
    
        print(f"---    ---    ---    ---   Backlog   subject created for {stud_obj.roll} of {name}")
    else:
        print(f"Subject for {roll} not found of {name} ")




def add_supply_backlog(value,student,sem):
    for i in value:
        check_subject_fetch_supply(student,i,sem)

def fetch_and_add_student_all_sem(roll,branch):
    student = Student.objects.get(roll=roll)
    branch_obj = student.branch
    result = get_formated_result(roll,branch)
    print(f"Branch : {student.branch} Regultaion : {student.regulation} Batch: {student.batch} Section: {student.section}")
    # print(result)
    # print(len(result),result.keys())
    # result = result[str(sem)]
    for key,value in result.items():
        if '-' in key:
            print("Supply",key)
            # sem = check_sem_exist(result,student.branch,student.batch,student.regulation,sem,subj)
            if len(result[key]) > 0:
                key = key.split('-')[0]
                subj = get_subject_from_fetch_obj(value)
                semInfo = check_sem_exist_supply(value,student.branch,student.batch,student.regulation,int(key),subj)
                if semInfo[0] == True:
                    sem = semInfo[1]
                    try:
                        add_supply_backlog(value,student.roll,sem)
                    except Exception as e: 
                        print("----------------------     ERROR ....!!!!!!        ----------------------------")
                        print(e)
                        return

                # print(subj)
                # data[key] = result[key]
            else:
                print(key, 'No Data Found')
        else:
            print("sem data",key)

            # working on ADD ATTEMP BACKLOG ----------------




            if len(result[key]) > 0:
                subj = get_subject_from_fetch_obj(value)
                print(key) 
                sem = check_sem_exist(result,student.branch,student.batch,student.regulation,int(key),subj)
                add_subject(result[key],roll,sem)
                add_preformance_table(roll,sem)
                # print(value)
    # print(data)
    # return JsonResponse({}, safe=False)
    # if len(result) == 0:
    #     msg= f"\n\n\n \t Data not exists !!!!!!!!!!  --------- SKipping the student {roll}  sem: {sem} branch: {branch} \n\n\n\n"
    #     print(msg)
    #     return {"error":msg}

    # print("-------------------------========================================--------------------------------")
    # print(subj)
    
    # print("-------------------------========================================--------------------------------")

    # sem = check_sem_exist(result,student.branch,student.batch,student.regulation,sem,subj)

    # add_subject(result,roll,sem)
    # add_preformance_table(roll,sem)

    msg = f"successfully added student data of {roll} sem:{sem} branch: {branch}"


    return {"success": msg}






